/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface AIAgentInput
 */
export interface AIAgentInput {
    /**
     * Name of the AI agent
     * @type {string}
     * @memberof AIAgentInput
     */
    name?: string;
    /**
     * Image URL for the AI agent
     * @type {string}
     * @memberof AIAgentInput
     */
    imageUrl?: string;
    /**
     * Mission of the AI agent
     * @type {Mission}
     * @memberof AIAgentInput
     */
    mission?: Mission | null;
    /**
     * Status of the AI agent
     * @type {Status}
     * @memberof AIAgentInput
     */
    status?: Status;
    /**
     * Role of the AI agent in the company
     * @type {string}
     * @memberof AIAgentInput
     */
    role?: string;
    /**
     * Description of the role of the AI agent
     * @type {string}
     * @memberof AIAgentInput
     */
    roleDescription?: string;
    /**
     * Timezone of the AI agent used for scheduling meetings
     * @type {string}
     * @memberof AIAgentInput
     */
    timezone?: string;
    /**
     * Voice of the AI agent
     * @type {VoiceInput}
     * @memberof AIAgentInput
     */
    voice?: VoiceInput | null;
}
/**
 * AI agent configured by businesses
 * @export
 * @interface AIAgentOutput
 */
export interface AIAgentOutput {
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    imageUrl?: string;
    /**
     *
     * @type {Mission}
     * @memberof AIAgentOutput
     */
    mission?: Mission | null;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    role?: string;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    roleDescription?: string;
    /**
     *
     * @type {Transcriber}
     * @memberof AIAgentOutput
     */
    transcriber?: Transcriber | null;
    /**
     *
     * @type {IntelligenceProvider}
     * @memberof AIAgentOutput
     */
    intelligenceProvider?: IntelligenceProvider | null;
    /**
     *
     * @type {VoiceOutput}
     * @memberof AIAgentOutput
     */
    voice?: VoiceOutput | null;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    status?: string;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    timezone?: string;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum Accent {
    American = "American",
    Indian = "Indian"
}
/**
 *
 * @export
 * @interface ActionEndpoint
 */
export interface ActionEndpoint {
    /**
     * Action endpoint URL
     * @type {string}
     * @memberof ActionEndpoint
     */
    url?: string;
    /**
     * Method to be used for invoking the endpoint
     * @type {string}
     * @memberof ActionEndpoint
     */
    method?: ActionEndpointMethodEnum;
    /**
     * Headers for the endpoint
     * @type {any}
     * @memberof ActionEndpoint
     */
    headers?: any | null;
}
/**
    * @export
    * @enum {string}
    */
export declare enum ActionEndpointMethodEnum {
    GET = "GET",
    POST = "POST"
}
/**
 *
 * @export
 * @interface ActionInput
 */
export interface ActionInput {
    /**
     * Name of the action
     * @type {string}
     * @memberof ActionInput
     */
    name?: string;
    /**
     * Description about the action and it should also contain when the action should be triggered
     * @type {string}
     * @memberof ActionInput
     */
    description?: string;
    /**
     * Parameters for the action. It should be a JSON schema object
     * @type {object}
     * @memberof ActionInput
     */
    parameters?: object;
    /**
     * Endpoint for the action
     * @type {ActionEndpoint}
     * @memberof ActionInput
     */
    endpoint?: ActionEndpoint;
    /**
     * Text to be rendered to user when action is invoked
     * @type {string}
     * @memberof ActionInput
     */
    userWaitingText?: string | null;
    /**
     * Text to be rendered to user when action is successful
     * @type {string}
     * @memberof ActionInput
     */
    userSuccessText?: string | null;
    /**
     * Text to be rendered to user when action is not successful
     * @type {string}
     * @memberof ActionInput
     */
    userErrorText?: string | null;
}
/**
 * Action entity to store the actions which can be performed by ai agents
 * @export
 * @interface ActionOutput
 */
export interface ActionOutput {
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    description?: string;
    /**
     *
     * @type {object}
     * @memberof ActionOutput
     */
    parameters?: object | null;
    /**
     *
     * @type {ActionEndpoint}
     * @memberof ActionOutput
     */
    endpoint?: ActionEndpoint | null;
    /**
     *
     * @type {InternalActionEndpoint}
     * @memberof ActionOutput
     */
    internalEndpoint?: InternalActionEndpoint | null;
    /**
     * Type of the action - EXTERNAL/INTERNAL
     * @type {string}
     * @memberof ActionOutput
     */
    type?: string;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    userWaitingText?: string | null;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    userSuccessText?: string | null;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    userErrorText?: string | null;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * Address line 1
     * @type {string}
     * @memberof Address
     */
    line1?: string;
    /**
     * Address line 2
     * @type {string}
     * @memberof Address
     */
    line2?: string | null;
    /**
     * City
     * @type {string}
     * @memberof Address
     */
    city?: string | null;
    /**
     * State
     * @type {string}
     * @memberof Address
     */
    state?: string | null;
    /**
     * Country
     * @type {string}
     * @memberof Address
     */
    country?: string;
}
/**
 *
 * @export
 * @interface AgentConfig
 */
export interface AgentConfig {
    /**
     * Enum class representing transcriber
     * @type {string}
     * @memberof AgentConfig
     */
    transcriber: string;
    /**
     * Enum class representing intelligence provider
     * @type {string}
     * @memberof AgentConfig
     */
    intelligenceProvider: string;
    /**
     *
     * @type {string}
     * @memberof AgentConfig
     */
    synthesizer: string;
    /**
     *
     * @type {string}
     * @memberof AgentConfig
     */
    embeddingsModelConfig: string;
    /**
     *
     * @type {string}
     * @memberof AgentConfig
     */
    hiveStorageConfig: string;
    /**
     *
     * @type {string}
     * @memberof AgentConfig
     */
    fillersConfig?: string | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum AggregationFormula {
    COUNT = "COUNT",
    SUM = "SUM",
    MEDIAN = "MEDIAN"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum AggregationPeriod {
    MONTHLY = "MONTHLY",
    WEEKLY = "WEEKLY",
    DAILY = "DAILY"
}
/**
 *
 * @export
 * @interface BaseResponse
 */
export interface BaseResponse {
    /**
     * Address line 1
     * @type {string}
     * @memberof BaseResponse
     */
    message?: string;
}
/**
 *
 * @export
 * @interface BatchMetricsRequests
 */
export interface BatchMetricsRequests {
    /**
     *
     * @type {Array<MetricsRequest>}
     * @memberof BatchMetricsRequests
     */
    requests: Array<MetricsRequest>;
}
/**
 *
 * @export
 * @interface BatchMetricsResponse
 */
export interface BatchMetricsResponse {
    /**
     *
     * @type {Array<MetricsResponse>}
     * @memberof BatchMetricsResponse
     */
    responses: Array<MetricsResponse>;
}
/**
 *
 * @export
 * @interface BodyCreateOrganizationV1
 */
export interface BodyCreateOrganizationV1 {
    /**
     *
     * @type {Organization}
     * @memberof BodyCreateOrganizationV1
     */
    org: Organization;
    /**
     *
     * @type {string}
     * @memberof BodyCreateOrganizationV1
     */
    adminUserName: string;
}
/**
 *
 * @export
 * @interface BodyUploadFileV1
 */
export interface BodyUploadFileV1 {
    /**
     *
     * @type {Array<any>}
     * @memberof BodyUploadFileV1
     */
    files: Array<any>;
}
/**
 *
 * @export
 * @interface Comment
 */
export interface Comment {
    /**
     * Notes or comments to record
     * @type {string}
     * @memberof Comment
     */
    comment?: string;
    /**
     * Star rating to record
     * @type {number}
     * @memberof Comment
     */
    rating?: number;
}
/**
 * This represents the connection between the user and the assistant
 * @export
 * @interface Connection
 */
export interface Connection {
    /**
     *
     * @type {string}
     * @memberof Connection
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Connection
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof Connection
     */
    sourceName?: string;
    /**
     *
     * @type {string}
     * @memberof Connection
     */
    sourceId?: string;
    /**
     *
     * @type {object}
     * @memberof Connection
     */
    sourceProps?: object | null;
    /**
     *
     * @type {string}
     * @memberof Connection
     */
    agentId?: string;
    /**
     *
     * @type {string}
     * @memberof Connection
     */
    prospectId?: string | null;
    /**
     *
     * @type {string}
     * @memberof Connection
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof Connection
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof Connection
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof Connection
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @interface ConnectionSource
 */
export interface ConnectionSource {
    /**
     * Name of the source
     * @type {string}
     * @memberof ConnectionSource
     */
    sourceName?: ConnectionSourceSourceNameEnum;
    /**
     * Unique identifier for the source
     * @type {string}
     * @memberof ConnectionSource
     */
    sourceId?: string;
    /**
     * Extra properties of source
     * @type {object}
     * @memberof ConnectionSource
     */
    sourceProps?: object;
}
/**
    * @export
    * @enum {string}
    */
export declare enum ConnectionSourceSourceNameEnum {
    TWILIO = "TWILIO",
    BROWSER = "BROWSER"
}
/**
 *
 * @export
 * @interface ConversationAnalytics
 */
export interface ConversationAnalytics {
    /**
     * Overall sentiment of the conversation
     * @type {Sentiment}
     * @memberof ConversationAnalytics
     */
    sentiment?: Sentiment;
    /**
     * Had any repetitive conversations or not as part of the request
     * @type {boolean}
     * @memberof ConversationAnalytics
     */
    repetitions?: boolean;
    /**
     * List of timestamps when the user interrupted the AI agent
     * @type {Array<string>}
     * @memberof ConversationAnalytics
     */
    backChannels?: Array<string> | null;
    /**
     * Hallucination analysis of the conversation
     * @type {object}
     * @memberof ConversationAnalytics
     */
    hallucinationAnalysis?: object | null;
}
/**
 * Any feedback added to the conversation by business is managed here.
 * @export
 * @interface ConversationFeedback
 */
export interface ConversationFeedback {
    /**
     *
     * @type {string}
     * @memberof ConversationFeedback
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationFeedback
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationFeedback
     */
    conversationId?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationFeedback
     */
    feedback?: string;
    /**
     *
     * @type {number}
     * @memberof ConversationFeedback
     */
    rating?: number;
    /**
     *
     * @type {string}
     * @memberof ConversationFeedback
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationFeedback
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationFeedback
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationFeedback
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @interface ConversationInput
 */
export interface ConversationInput {
    /**
     * Source from where the conversation originated. This can be device id, phone number, etc.
     * @type {string}
     * @memberof ConversationInput
     */
    source?: string;
    /**
     * Type of the conversation source
     * @type {ConversationSourceType}
     * @memberof ConversationInput
     */
    sourceType?: ConversationSourceType;
    /**
     * AI agent which handled the conversation
     * @type {string}
     * @memberof ConversationInput
     */
    agentId?: string;
    /**
     * URL to the full transcript of the conversation
     * @type {string}
     * @memberof ConversationInput
     */
    transcriptTextUrl?: string | null;
    /**
     * Summary of the conversation
     * @type {string}
     * @memberof ConversationInput
     */
    transcriptSummary?: string | null;
    /**
     * URL to the recording of the conversation
     * @type {string}
     * @memberof ConversationInput
     */
    transcriptRecordingUrl?: string | null;
    /**
     * Start time of the conversation
     * @type {string}
     * @memberof ConversationInput
     */
    timestampStart?: string;
    /**
     * End time of the conversation
     * @type {string}
     * @memberof ConversationInput
     */
    timestampEnd?: string | null;
    /**
     * Analytics of the conversation
     * @type {ConversationAnalytics}
     * @memberof ConversationInput
     */
    conversationAnalytics?: ConversationAnalytics | null;
    /**
     *
     * @type {Status}
     * @memberof ConversationInput
     */
    status: Status;
    /**
     *
     * @type {Array<Comment>}
     * @memberof ConversationInput
     */
    adminComments: Array<Comment>;
}
/**
 * Any conversation happening between the end user and assistant is stored in this table
 * @export
 * @interface ConversationOutput
 */
export interface ConversationOutput {
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    prospectId?: string | null;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    source?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    sourceType?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    aiAgentId?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    transcriptTextUrl?: string | null;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    transcriptSummary?: string | null;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    transcriptRecordingUrl?: string | null;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    timestampStart?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    timestampEnd?: string | null;
    /**
     * Analytics of the conversation
     * @type {ConversationAnalytics}
     * @memberof ConversationOutput
     */
    conversationAnalytics?: ConversationAnalytics | null;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    status: string;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum ConversationSourceType {
    VOIP = "VOIP",
    PHONE = "PHONE"
}
/**
 *
 * @export
 * @interface ExternalReference
 */
export interface ExternalReference {
    /**
     * External service provider name
     * @type {string}
     * @memberof ExternalReference
     */
    providerName?: string;
    /**
     * External service identifier
     * @type {string}
     * @memberof ExternalReference
     */
    id?: string;
    /**
     * Props for the external reference
     * @type {any}
     * @memberof ExternalReference
     */
    providerProps?: any | null;
}
/**
 *
 * @export
 * @interface ExternalServicePorvider
 */
export interface ExternalServicePorvider {
    /**
     * External service provider name
     * @type {string}
     * @memberof ExternalServicePorvider
     */
    providerName?: string;
    /**
     * External service identifier
     * @type {string}
     * @memberof ExternalServicePorvider
     */
    id?: string;
    /**
     * Props for the external service provider
     * @type {object}
     * @memberof ExternalServicePorvider
     */
    providerProps?: object | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum FileUploadType {
    Hive = "hive"
}
/**
 * Guest users who are not verified by Trata yet
 * @export
 * @interface GuestInput
 */
export interface GuestInput {
    /**
     *
     * @type {string}
     * @memberof GuestInput
     */
    email: string;
    /**
     *
     * @type {string}
     * @memberof GuestInput
     */
    role: string;
}
/**
 * Guest users who are not verified by Trata yet. They will not be able to use Trata until they are verified.
 * @export
 * @interface GuestOutput
 */
export interface GuestOutput {
    /**
     *
     * @type {string}
     * @memberof GuestOutput
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof GuestOutput
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof GuestOutput
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof GuestOutput
     */
    role?: string;
    /**
     *
     * @type {boolean}
     * @memberof GuestOutput
     */
    isEmailVerified?: boolean;
    /**
     *
     * @type {string}
     * @memberof GuestOutput
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof GuestOutput
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof GuestOutput
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof GuestOutput
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     *
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    detail?: Array<ValidationError>;
}
/**
 * Reference to all business knowledge base will be stored in Hive
 * @export
 * @interface Hive
 */
export interface Hive {
    /**
     *
     * @type {string}
     * @memberof Hive
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Hive
     */
    orgId?: string;
    /**
     *
     * @type {HiveContent}
     * @memberof Hive
     */
    content: HiveContent;
    /**
     *
     * @type {string}
     * @memberof Hive
     */
    status: string;
    /**
     *
     * @type {string}
     * @memberof Hive
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof Hive
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof Hive
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof Hive
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @interface HiveContent
 */
export interface HiveContent {
    /**
     *
     * @type {HiveType}
     * @memberof HiveContent
     */
    hiveType: HiveType;
    /**
     * URL of the content
     * @type {string}
     * @memberof HiveContent
     */
    url?: string;
    /**
     * To recursively crawl child pages, add this as props {\"crawl_child_pages\": true},  \"depth\": \"3\"
     * @type {object}
     * @memberof HiveContent
     */
    hiveProps?: object | null;
    /**
     * Internal properties for the hive to store example {\"last_crawled\": \"2021-10-10\"}, {\"queryable_source\": \"postgres\"}
     * @type {object}
     * @memberof HiveContent
     */
    internalProps?: object | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum HiveType {
    WEBSITE = "WEBSITE",
    GOOGLEDOCS = "GOOGLE_DOCS",
    DOCS = "DOCS",
    TRANSCRIPTS = "TRANSCRIPTS"
}
/**
 *
 * @export
 * @interface IntelligenceProvider
 */
export interface IntelligenceProvider {
    /**
     *
     * @type {string}
     * @memberof IntelligenceProvider
     */
    providerName?: string | null;
    /**
     *
     * @type {string}
     * @memberof IntelligenceProvider
     */
    model?: string | null;
    /**
     *
     * @type {object}
     * @memberof IntelligenceProvider
     */
    providerProps?: object | null;
}
/**
 * Internal action endpoint to be used for calling the action inside the module. Not used by external users
 * @export
 * @interface InternalActionEndpoint
 */
export interface InternalActionEndpoint {
    /**
     * Module where the action is defined
     * @type {string}
     * @memberof InternalActionEndpoint
     */
    module?: string;
    /**
     * Function to be called inside the module
     * @type {string}
     * @memberof InternalActionEndpoint
     */
    _function?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum Language {
    English = "English",
    Spanish = "Spanish"
}
/**
 *
 * @export
 * @interface LanguageAccentCombo
 */
export interface LanguageAccentCombo {
    /**
     *
     * @type {Language}
     * @memberof LanguageAccentCombo
     */
    language: Language;
    /**
     *
     * @type {Accent}
     * @memberof LanguageAccentCombo
     */
    accent: Accent;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum MetricName {
    CALLS = "CALLS",
    CALLDURATION = "CALL_DURATION",
    APPOINTMENTSCHEDULED = "APPOINTMENT_SCHEDULED",
    PROSPECTS = "PROSPECTS",
    INTERESTED = "INTERESTED",
    NOTINTERESTED = "NOT_INTERESTED"
}
/**
 *
 * @export
 * @interface MetricResponseDataPoint
 */
export interface MetricResponseDataPoint {
    /**
     * Timestamp of the data point
     * @type {string}
     * @memberof MetricResponseDataPoint
     */
    timestamp?: string;
    /**
     * Value which will be a string representation of integer or floating number
     * @type {string}
     * @memberof MetricResponseDataPoint
     */
    value?: string;
}
/**
 *
 * @export
 * @interface MetricsRequest
 */
export interface MetricsRequest {
    /**
     * Unique identifier for the metric request. This can be helped to co-relate the request and response
     * @type {string}
     * @memberof MetricsRequest
     */
    id?: string;
    /**
     * Name of the metric
     * @type {MetricName}
     * @memberof MetricsRequest
     */
    name?: MetricName;
    /**
     * Start date to get metric request
     * @type {string}
     * @memberof MetricsRequest
     */
    fromDate?: string;
    /**
     * End date until get metric request
     * @type {string}
     * @memberof MetricsRequest
     */
    toDate?: string;
    /**
     * Aggregation period for the metric request
     * @type {AggregationPeriod}
     * @memberof MetricsRequest
     */
    aggregationPeriod?: AggregationPeriod;
    /**
     * Aggregation formula for the metric request
     * @type {AggregationFormula}
     * @memberof MetricsRequest
     */
    aggregationFormula?: AggregationFormula;
}
/**
 *
 * @export
 * @interface MetricsResponse
 */
export interface MetricsResponse {
    /**
     * Unique identifier for the metric response. This will help co-relate the request and response
     * @type {string}
     * @memberof MetricsResponse
     */
    id?: string;
    /**
     * Name of the metric
     * @type {MetricName}
     * @memberof MetricsResponse
     */
    name?: MetricName;
    /**
     * List of data points for the metric response
     * @type {Array<MetricResponseDataPoint>}
     * @memberof MetricsResponse
     */
    datapoints?: Array<MetricResponseDataPoint>;
}
/**
 *
 * @export
 * @interface Mission
 */
export interface Mission {
    /**
     * Prompt instructions for LLM model
     * @type {string}
     * @memberof Mission
     */
    prompt?: string;
    /**
     * Greeting message to be read by the AI agent
     * @type {string}
     * @memberof Mission
     */
    greeting?: string | null;
    /**
     * Sequence of actions to be performed by the AI agent during the conversation.
     * @type {Array<Sequence>}
     * @memberof Mission
     */
    sequence?: Array<Sequence> | null;
    /**
     * Conclusion message to be read by the AI agent
     * @type {string}
     * @memberof Mission
     */
    farewell?: string | null;
}
/**
 * Organization represents the business using Trata and all users are associated to this business entity
 * @export
 * @interface Organization
 */
export interface Organization {
    /**
     * Name of the organization
     * @type {string}
     * @memberof Organization
     */
    name?: string;
    /**
     * Address of the organization
     * @type {Address}
     * @memberof Organization
     */
    address?: Address | null;
    /**
     * Tax details of the organization
     * @type {TaxDetails}
     * @memberof Organization
     */
    tax?: TaxDetails | null;
    /**
     * External references for the organization
     * @type {Array<ExternalServicePorvider>}
     * @memberof Organization
     */
    externalReferenceIds?: Array<ExternalServicePorvider> | null;
    /**
     * Configurations for all the agents going to be created in this org
     * @type {AgentConfig}
     * @memberof Organization
     */
    agentConfig?: AgentConfig | null;
}
/**
 *
 * @export
 * @interface ProductInput
 */
export interface ProductInput {
    /**
     * Product is active or not
     * @type {boolean}
     * @memberof ProductInput
     */
    active?: boolean;
    /**
     * Default price of the product this is represented in the lowest currency denomination. Eg: 1000 for $10
     * @type {number}
     * @memberof ProductInput
     */
    defaultPrice?: number;
    /**
     * Currency of the product
     * @type {string}
     * @memberof ProductInput
     */
    currency?: ProductInputCurrencyEnum;
    /**
     * Description of the product
     * @type {string}
     * @memberof ProductInput
     */
    description?: string;
    /**
     * Name of the product
     * @type {string}
     * @memberof ProductInput
     */
    name?: string;
    /**
     * Product is shippable or not. Service is not shippable
     * @type {boolean}
     * @memberof ProductInput
     */
    shippable?: boolean;
    /**
     * List of features of the product
     * @type {Array<string>}
     * @memberof ProductInput
     */
    features?: Array<string> | null;
    /**
     * Product requires appointment scheduling or not
     * @type {boolean}
     * @memberof ProductInput
     */
    scheduleAppointment?: boolean;
    /**
     * Properties of the product
     * @type {any}
     * @memberof ProductInput
     */
    props?: any | null;
    /**
     * Tags for the product. This is used for grouping purpose. Eg: [\"gardening\", \"tools\"]
     * @type {Array<string>}
     * @memberof ProductInput
     */
    tags?: Array<string> | null;
    /**
     *
     * @type {Status}
     * @memberof ProductInput
     */
    status: Status;
}
/**
    * @export
    * @enum {string}
    */
export declare enum ProductInputCurrencyEnum {
    AED = "AED",
    AFN = "AFN",
    ALL = "ALL",
    AMD = "AMD",
    ANG = "ANG",
    AOA = "AOA",
    ARS = "ARS",
    AUD = "AUD",
    AWG = "AWG",
    AZN = "AZN",
    BAM = "BAM",
    BBD = "BBD",
    BDT = "BDT",
    BGN = "BGN",
    BHD = "BHD",
    BIF = "BIF",
    BMD = "BMD",
    BND = "BND",
    BOB = "BOB",
    BOV = "BOV",
    BRL = "BRL",
    BSD = "BSD",
    BTN = "BTN",
    BWP = "BWP",
    BYN = "BYN",
    BZD = "BZD",
    CAD = "CAD",
    CDF = "CDF",
    CHE = "CHE",
    CHF = "CHF",
    CHW = "CHW",
    CLF = "CLF",
    CLP = "CLP",
    CNY = "CNY",
    COP = "COP",
    COU = "COU",
    CRC = "CRC",
    CUC = "CUC",
    CUP = "CUP",
    CVE = "CVE",
    CZK = "CZK",
    DJF = "DJF",
    DKK = "DKK",
    DOP = "DOP",
    DZD = "DZD",
    EGP = "EGP",
    ERN = "ERN",
    ETB = "ETB",
    EUR = "EUR",
    FJD = "FJD",
    FKP = "FKP",
    GBP = "GBP",
    GEL = "GEL",
    GHS = "GHS",
    GIP = "GIP",
    GMD = "GMD",
    GNF = "GNF",
    GTQ = "GTQ",
    GYD = "GYD",
    HKD = "HKD",
    HNL = "HNL",
    HRK = "HRK",
    HTG = "HTG",
    HUF = "HUF",
    IDR = "IDR",
    ILS = "ILS",
    INR = "INR",
    IQD = "IQD",
    IRR = "IRR",
    ISK = "ISK",
    JMD = "JMD",
    JOD = "JOD",
    JPY = "JPY",
    KES = "KES",
    KGS = "KGS",
    KHR = "KHR",
    KMF = "KMF",
    KPW = "KPW",
    KRW = "KRW",
    KWD = "KWD",
    KYD = "KYD",
    KZT = "KZT",
    LAK = "LAK",
    LBP = "LBP",
    LKR = "LKR",
    LRD = "LRD",
    LSL = "LSL",
    LYD = "LYD",
    MAD = "MAD",
    MDL = "MDL",
    MGA = "MGA",
    MKD = "MKD",
    MMK = "MMK",
    MNT = "MNT",
    MOP = "MOP",
    MRU = "MRU",
    MUR = "MUR",
    MVR = "MVR",
    MWK = "MWK",
    MXN = "MXN",
    MXV = "MXV",
    MYR = "MYR",
    MZN = "MZN",
    NAD = "NAD",
    NGN = "NGN",
    NIO = "NIO",
    NOK = "NOK",
    NPR = "NPR",
    NZD = "NZD",
    OMR = "OMR",
    PAB = "PAB",
    PEN = "PEN",
    PGK = "PGK",
    PHP = "PHP",
    PKR = "PKR",
    PLN = "PLN",
    PYG = "PYG",
    QAR = "QAR",
    RON = "RON",
    RSD = "RSD",
    RUB = "RUB",
    RWF = "RWF",
    SAR = "SAR",
    SBD = "SBD",
    SCR = "SCR",
    SDG = "SDG",
    SEK = "SEK",
    SGD = "SGD",
    SHP = "SHP",
    SLE = "SLE",
    SLL = "SLL",
    SOS = "SOS",
    SRD = "SRD",
    SSP = "SSP",
    STN = "STN",
    SVC = "SVC",
    SYP = "SYP",
    SZL = "SZL",
    THB = "THB",
    TJS = "TJS",
    TMT = "TMT",
    TND = "TND",
    TOP = "TOP",
    TRY = "TRY",
    TTD = "TTD",
    TWD = "TWD",
    TZS = "TZS",
    UAH = "UAH",
    UGX = "UGX",
    USD = "USD",
    USN = "USN",
    UYI = "UYI",
    UYU = "UYU",
    UYW = "UYW",
    UZS = "UZS",
    VED = "VED",
    VES = "VES",
    VND = "VND",
    VUV = "VUV",
    WST = "WST",
    XAF = "XAF",
    XCD = "XCD",
    XOF = "XOF",
    XPF = "XPF",
    XSU = "XSU",
    XUA = "XUA",
    YER = "YER",
    ZAR = "ZAR",
    ZMW = "ZMW",
    ZWL = "ZWL"
}
/**
 * Product and services offered by the business
 * @export
 * @interface ProductOutput
 */
export interface ProductOutput {
    /**
     *
     * @type {string}
     * @memberof ProductOutput
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ProductOutput
     */
    orgId?: string;
    /**
     * Product is active or not
     * @type {boolean}
     * @memberof ProductOutput
     */
    active?: boolean;
    /**
     * Default price of the product this is represented in the lowest currency denomination. Eg: 1000 for $10
     * @type {number}
     * @memberof ProductOutput
     */
    defaultPrice?: number | null;
    /**
     *
     * @type {string}
     * @memberof ProductOutput
     */
    currency?: string | null;
    /**
     * Description of the product
     * @type {string}
     * @memberof ProductOutput
     */
    description?: string | null;
    /**
     * Name of the product
     * @type {string}
     * @memberof ProductOutput
     */
    name?: string;
    /**
     * Product is shippable or not. Service is not shippable
     * @type {boolean}
     * @memberof ProductOutput
     */
    shippable?: boolean;
    /**
     * List of features of the product
     * @type {Array<string>}
     * @memberof ProductOutput
     */
    features?: Array<string> | null;
    /**
     * Product requires appointment scheduling or not
     * @type {boolean}
     * @memberof ProductOutput
     */
    scheduleAppointment?: boolean;
    /**
     * Properties of the product
     * @type {any}
     * @memberof ProductOutput
     */
    props?: any | null;
    /**
     *
     * @type {Array<string>}
     * @memberof ProductOutput
     */
    tags?: Array<string> | null;
    /**
     *
     * @type {string}
     * @memberof ProductOutput
     */
    status: string;
    /**
     *
     * @type {string}
     * @memberof ProductOutput
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof ProductOutput
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof ProductOutput
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof ProductOutput
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @interface PromptTemplate
 */
export interface PromptTemplate {
    /**
     *
     * @type {string}
     * @memberof PromptTemplate
     */
    prompt: string;
    /**
     *
     * @type {Array<Sequence>}
     * @memberof PromptTemplate
     */
    sequences: Array<Sequence>;
    /**
     *
     * @type {string}
     * @memberof PromptTemplate
     */
    role: string;
    /**
     *
     * @type {string}
     * @memberof PromptTemplate
     */
    roleDescription: string;
    /**
     *
     * @type {string}
     * @memberof PromptTemplate
     */
    name: string;
}
/**
 *
 * @export
 * @interface ProspectInput
 */
export interface ProspectInput {
    /**
     * Name of the prospect
     * @type {string}
     * @memberof ProspectInput
     */
    name?: string;
    /**
     * Email of the prospect
     * @type {string}
     * @memberof ProspectInput
     */
    email?: string | null;
    /**
     * Phone number of the prospect
     * @type {string}
     * @memberof ProspectInput
     */
    phoneNumber?: string | null;
    /**
     * External references for the prospect
     * @type {Array<ExternalReference>}
     * @memberof ProspectInput
     */
    externalReference?: Array<ExternalReference> | null;
    /**
     *
     * @type {ProspectStatus}
     * @memberof ProspectInput
     */
    status: ProspectStatus;
    /**
     * Props for the prospect
     * @type {any}
     * @memberof ProspectInput
     */
    prospectProps?: any | null;
}
/**
 * Prospects are the potential customers for business
 * @export
 * @interface ProspectOutput
 */
export interface ProspectOutput {
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    name?: string | null;
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    email?: string | null;
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    phoneNumber?: string | null;
    /**
     *
     * @type {Array<ExternalReference>}
     * @memberof ProspectOutput
     */
    externalReference: Array<ExternalReference> | null;
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    status: string;
    /**
     *
     * @type {any}
     * @memberof ProspectOutput
     */
    prospectProps: any | null;
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum ProspectStatus {
    GENERALENQUIRY = "GENERAL_ENQUIRY",
    SCHEDULEDCALLBACKWITHBOT = "SCHEDULED_CALLBACK_WITH_BOT",
    SCHEDULEDAPPOINTMENTWITHPERSON = "SCHEDULED_APPOINTMENT_WITH_PERSON",
    SCHEDULEDAPPOINTMENTFORSERVICE = "SCHEDULED_APPOINTMENT_FOR_SERVICE",
    NOTINTERESTED = "NOT_INTERESTED",
    PRODUCTORDERPLACED = "PRODUCT_ORDER_PLACED",
    SERVICEORDERPLACED = "SERVICE_ORDER_PLACED"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum Role {
    ADMIN = "ADMIN",
    READONLY = "READ_ONLY"
}
/**
 *
 * @export
 * @interface RoleTemplate
 */
export interface RoleTemplate {
    /**
     *
     * @type {string}
     * @memberof RoleTemplate
     */
    roleName: string;
    /**
     *
     * @type {string}
     * @memberof RoleTemplate
     */
    roleDescription: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum Sentiment {
    POSITIVE = "POSITIVE",
    EXCITED = "EXCITED",
    NEGATIVE = "NEGATIVE",
    BAD = "BAD"
}
/**
 *
 * @export
 * @interface Sequence
 */
export interface Sequence {
    /**
     * Name of the stage
     * @type {string}
     * @memberof Sequence
     */
    stageName?: string;
    /**
     * Description of the stage
     * @type {string}
     * @memberof Sequence
     */
    description?: string;
    /**
     * Other notes that AI agent should know in this stage of conversation
     * @type {string}
     * @memberof Sequence
     */
    otherNotes?: string | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum SortOrder {
    Asc = "asc",
    Desc = "desc"
}
/**
 *
 * @export
 * @interface StatsData
 */
export interface StatsData {
    /**
     *
     * @type {number}
     * @memberof StatsData
     */
    no_of_prospects: number;
    /**
     *
     * @type {number}
     * @memberof StatsData
     */
    appointment_scheduled: number;
    /**
     *
     * @type {number}
     * @memberof StatsData
     */
    unqualified: number;
    /**
     *
     * @type {number}
     * @memberof StatsData
     */
    average_call_duration: number;
}
/**
 *
 * @export
 * @interface StatsResponse
 */
export interface StatsResponse {
    /**
     * Overall stats of prospects
     * @type {StatsData}
     * @memberof StatsResponse
     */
    response: StatsData;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum Status {
    Active = "active",
    Inactive = "inactive"
}
/**
 *
 * @export
 * @interface TaxDetails
 */
export interface TaxDetails {
    /**
     * Tax identifier
     * @type {string}
     * @memberof TaxDetails
     */
    id?: string;
    /**
     * Any extra info related to Tax
     * @type {object}
     * @memberof TaxDetails
     */
    taxProps?: object | null;
}
/**
 *
 * @export
 * @interface Transcriber
 */
export interface Transcriber {
    /**
     *
     * @type {string}
     * @memberof Transcriber
     */
    providerName?: string;
    /**
     *
     * @type {string}
     * @memberof Transcriber
     */
    transcriberModel?: string | null;
    /**
     *
     * @type {object}
     * @memberof Transcriber
     */
    providerProps?: object | null;
}
/**
 * Payload for updating user details API
 * @export
 * @interface UpdateUserPayload
 */
export interface UpdateUserPayload {
    /**
     *
     * @type {Role}
     * @memberof UpdateUserPayload
     */
    role: Role | null;
    /**
     *
     * @type {string}
     * @memberof UpdateUserPayload
     */
    fullName: string | null;
}
/**
 * Model representing the users under an organization
 * @export
 * @interface User
 */
export interface User {
    /**
     *
     * @type {string}
     * @memberof User
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    role?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    fullName?: string | null;
    /**
     *
     * @type {string}
     * @memberof User
     */
    status: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     *
     * @type {Array<string | number>}
     * @memberof ValidationError
     */
    loc: Array<string | number>;
    /**
     *
     * @type {string}
     * @memberof ValidationError
     */
    msg: string;
    /**
     *
     * @type {string}
     * @memberof ValidationError
     */
    type: string;
}
/**
 *
 * @export
 * @interface VoiceInput
 */
export interface VoiceInput {
    /**
     *
     * @type {string}
     * @memberof VoiceInput
     */
    gender: VoiceInputGenderEnum;
    /**
     *
     * @type {LanguageAccentCombo}
     * @memberof VoiceInput
     */
    languageAccent: LanguageAccentCombo;
    /**
     *
     * @type {string}
     * @memberof VoiceInput
     */
    modelName?: string | null;
    /**
     *
     * @type {string}
     * @memberof VoiceInput
     */
    modelProvider: VoiceInputModelProviderEnum;
}
/**
    * @export
    * @enum {string}
    */
export declare enum VoiceInputGenderEnum {
    Male = "Male",
    Female = "Female",
    Neutral = "Neutral"
}
/**
    * @export
    * @enum {string}
    */
export declare enum VoiceInputModelProviderEnum {
    Google = "Google",
    AWS = "AWS",
    Elevenlabs = "Elevenlabs",
    PlayHT = "PlayHT",
    Deepgram = "Deepgram"
}
/**
 *
 * @export
 * @interface VoiceOutput
 */
export interface VoiceOutput {
    /**
     *
     * @type {string}
     * @memberof VoiceOutput
     */
    gender: VoiceOutputGenderEnum;
    /**
     *
     * @type {LanguageAccentCombo}
     * @memberof VoiceOutput
     */
    languageAccent: LanguageAccentCombo;
    /**
     *
     * @type {string}
     * @memberof VoiceOutput
     */
    modelName?: string | null;
    /**
     *
     * @type {string}
     * @memberof VoiceOutput
     */
    modelProvider: VoiceOutputModelProviderEnum;
}
/**
    * @export
    * @enum {string}
    */
export declare enum VoiceOutputGenderEnum {
    Male = "Male",
    Female = "Female",
    Neutral = "Neutral"
}
/**
    * @export
    * @enum {string}
    */
export declare enum VoiceOutputModelProviderEnum {
    Google = "Google",
    AWS = "AWS",
    Elevenlabs = "Elevenlabs",
    PlayHT = "PlayHT",
    Deepgram = "Deepgram"
}
/**
 * ActionAgentLinkApi - axios parameter creator
 * @export
 */
export declare const ActionAgentLinkApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Createactionagentlink
     * @param {string} actionId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createActionAgentLinkV1: (actionId: string, agentId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Deleteactionagentlink
     * @param {string} actionId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteActionAgentLinkV1: (actionId: string, agentId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Listactionsofagent
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActionsOfAgentV1: (agentId: string, options?: any) => Promise<RequestArgs>;
};
/**
 * ActionAgentLinkApi - functional programming interface
 * @export
 */
export declare const ActionAgentLinkApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Createactionagentlink
     * @param {string} actionId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createActionAgentLinkV1(actionId: string, agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
    /**
     *
     * @summary Deleteactionagentlink
     * @param {string} actionId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteActionAgentLinkV1(actionId: string, agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
    /**
     *
     * @summary Listactionsofagent
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActionsOfAgentV1(agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ActionOutput>>>;
};
/**
 * ActionAgentLinkApi - factory interface
 * @export
 */
export declare const ActionAgentLinkApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Createactionagentlink
     * @param {string} actionId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createActionAgentLinkV1(actionId: string, agentId: string, options?: any): AxiosPromise<BaseResponse>;
    /**
     *
     * @summary Deleteactionagentlink
     * @param {string} actionId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteActionAgentLinkV1(actionId: string, agentId: string, options?: any): AxiosPromise<BaseResponse>;
    /**
     *
     * @summary Listactionsofagent
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActionsOfAgentV1(agentId: string, options?: any): AxiosPromise<Array<ActionOutput>>;
};
/**
 * ActionAgentLinkApi - object-oriented interface
 * @export
 * @class ActionAgentLinkApi
 * @extends {BaseAPI}
 */
export declare class ActionAgentLinkApi extends BaseAPI {
    /**
     *
     * @summary Createactionagentlink
     * @param {string} actionId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionAgentLinkApi
     */
    createActionAgentLinkV1(actionId: string, agentId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponse>>;
    /**
     *
     * @summary Deleteactionagentlink
     * @param {string} actionId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionAgentLinkApi
     */
    deleteActionAgentLinkV1(actionId: string, agentId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponse>>;
    /**
     *
     * @summary Listactionsofagent
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionAgentLinkApi
     */
    listActionsOfAgentV1(agentId: string, options?: any): Promise<import("axios").AxiosResponse<ActionOutput[]>>;
}
/**
 * ActionsApi - axios parameter creator
 * @export
 */
export declare const ActionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Createaction
     * @param {ActionInput} actionInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createActionV1: (actionInput: ActionInput, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Deleteaction
     * @param {string} actionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteActionV1: (actionId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Getaction
     * @param {string} actionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActionV1: (actionId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Listactions
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActionsV1: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Updateaction
     * @param {string} actionId
     * @param {ActionInput} actionInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateActionV1: (actionId: string, actionInput: ActionInput, options?: any) => Promise<RequestArgs>;
};
/**
 * ActionsApi - functional programming interface
 * @export
 */
export declare const ActionsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Createaction
     * @param {ActionInput} actionInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createActionV1(actionInput: ActionInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActionOutput>>;
    /**
     *
     * @summary Deleteaction
     * @param {string} actionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteActionV1(actionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
    /**
     *
     * @summary Getaction
     * @param {string} actionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActionV1(actionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActionOutput>>;
    /**
     *
     * @summary Listactions
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActionsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ActionOutput>>>;
    /**
     *
     * @summary Updateaction
     * @param {string} actionId
     * @param {ActionInput} actionInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateActionV1(actionId: string, actionInput: ActionInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActionOutput>>;
};
/**
 * ActionsApi - factory interface
 * @export
 */
export declare const ActionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Createaction
     * @param {ActionInput} actionInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createActionV1(actionInput: ActionInput, options?: any): AxiosPromise<ActionOutput>;
    /**
     *
     * @summary Deleteaction
     * @param {string} actionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteActionV1(actionId: string, options?: any): AxiosPromise<BaseResponse>;
    /**
     *
     * @summary Getaction
     * @param {string} actionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActionV1(actionId: string, options?: any): AxiosPromise<ActionOutput>;
    /**
     *
     * @summary Listactions
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActionsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): AxiosPromise<Array<ActionOutput>>;
    /**
     *
     * @summary Updateaction
     * @param {string} actionId
     * @param {ActionInput} actionInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateActionV1(actionId: string, actionInput: ActionInput, options?: any): AxiosPromise<ActionOutput>;
};
/**
 * ActionsApi - object-oriented interface
 * @export
 * @class ActionsApi
 * @extends {BaseAPI}
 */
export declare class ActionsApi extends BaseAPI {
    /**
     *
     * @summary Createaction
     * @param {ActionInput} actionInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    createActionV1(actionInput: ActionInput, options?: any): Promise<import("axios").AxiosResponse<ActionOutput>>;
    /**
     *
     * @summary Deleteaction
     * @param {string} actionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    deleteActionV1(actionId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponse>>;
    /**
     *
     * @summary Getaction
     * @param {string} actionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    getActionV1(actionId: string, options?: any): Promise<import("axios").AxiosResponse<ActionOutput>>;
    /**
     *
     * @summary Listactions
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    listActionsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): Promise<import("axios").AxiosResponse<ActionOutput[]>>;
    /**
     *
     * @summary Updateaction
     * @param {string} actionId
     * @param {ActionInput} actionInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    updateActionV1(actionId: string, actionInput: ActionInput, options?: any): Promise<import("axios").AxiosResponse<ActionOutput>>;
}
/**
 * AgentsApi - axios parameter creator
 * @export
 */
export declare const AgentsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Createaiagent
     * @param {AIAgentInput} aIAgentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAIAgentV1: (aIAgentInput: AIAgentInput, options?: any) => Promise<RequestArgs>;
    /**
     * Deletes an AI agent.
     * @summary Deleteaiagent
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAIAgentV1: (agentId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Gets a specific AI agent by ID.
     * @summary Getaiagent
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAIAgentV1: (agentId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Lists all AI agents under the user\'s organization.
     * @summary Listaiagents
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAIAgentsV1: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Updates an existing AI agent.
     * @summary Updateaiagent
     * @param {string} agentId
     * @param {AIAgentInput} aIAgentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAIAgentV1: (agentId: string, aIAgentInput: AIAgentInput, options?: any) => Promise<RequestArgs>;
};
/**
 * AgentsApi - functional programming interface
 * @export
 */
export declare const AgentsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Createaiagent
     * @param {AIAgentInput} aIAgentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAIAgentV1(aIAgentInput: AIAgentInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AIAgentOutput>>;
    /**
     * Deletes an AI agent.
     * @summary Deleteaiagent
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAIAgentV1(agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
    /**
     * Gets a specific AI agent by ID.
     * @summary Getaiagent
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAIAgentV1(agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AIAgentOutput>>;
    /**
     * Lists all AI agents under the user\'s organization.
     * @summary Listaiagents
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAIAgentsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AIAgentOutput>>>;
    /**
     * Updates an existing AI agent.
     * @summary Updateaiagent
     * @param {string} agentId
     * @param {AIAgentInput} aIAgentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAIAgentV1(agentId: string, aIAgentInput: AIAgentInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AIAgentOutput>>;
};
/**
 * AgentsApi - factory interface
 * @export
 */
export declare const AgentsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Createaiagent
     * @param {AIAgentInput} aIAgentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAIAgentV1(aIAgentInput: AIAgentInput, options?: any): AxiosPromise<AIAgentOutput>;
    /**
     * Deletes an AI agent.
     * @summary Deleteaiagent
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAIAgentV1(agentId: string, options?: any): AxiosPromise<BaseResponse>;
    /**
     * Gets a specific AI agent by ID.
     * @summary Getaiagent
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAIAgentV1(agentId: string, options?: any): AxiosPromise<AIAgentOutput>;
    /**
     * Lists all AI agents under the user\'s organization.
     * @summary Listaiagents
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAIAgentsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): AxiosPromise<Array<AIAgentOutput>>;
    /**
     * Updates an existing AI agent.
     * @summary Updateaiagent
     * @param {string} agentId
     * @param {AIAgentInput} aIAgentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAIAgentV1(agentId: string, aIAgentInput: AIAgentInput, options?: any): AxiosPromise<AIAgentOutput>;
};
/**
 * AgentsApi - object-oriented interface
 * @export
 * @class AgentsApi
 * @extends {BaseAPI}
 */
export declare class AgentsApi extends BaseAPI {
    /**
     *
     * @summary Createaiagent
     * @param {AIAgentInput} aIAgentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    createAIAgentV1(aIAgentInput: AIAgentInput, options?: any): Promise<import("axios").AxiosResponse<AIAgentOutput>>;
    /**
     * Deletes an AI agent.
     * @summary Deleteaiagent
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    deleteAIAgentV1(agentId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponse>>;
    /**
     * Gets a specific AI agent by ID.
     * @summary Getaiagent
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    getAIAgentV1(agentId: string, options?: any): Promise<import("axios").AxiosResponse<AIAgentOutput>>;
    /**
     * Lists all AI agents under the user\'s organization.
     * @summary Listaiagents
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    listAIAgentsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): Promise<import("axios").AxiosResponse<AIAgentOutput[]>>;
    /**
     * Updates an existing AI agent.
     * @summary Updateaiagent
     * @param {string} agentId
     * @param {AIAgentInput} aIAgentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    updateAIAgentV1(agentId: string, aIAgentInput: AIAgentInput, options?: any): Promise<import("axios").AxiosResponse<AIAgentOutput>>;
}
/**
 * ConversationProspectLinkApi - axios parameter creator
 * @export
 */
export declare const ConversationProspectLinkApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Createconversationprospectlink
     * @param {string} conversationId
     * @param {string} prospectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConversationProspectLinkV1: (conversationId: string, prospectId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Deleteconversationbyprospect
     * @param {string} conversationId
     * @param {string} prospectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConversationProspectLinkV1: (conversationId: string, prospectId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Getconversationsbyprospect
     * @param {string} prospectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConversationsOfProspectsV1: (prospectId: string, options?: any) => Promise<RequestArgs>;
};
/**
 * ConversationProspectLinkApi - functional programming interface
 * @export
 */
export declare const ConversationProspectLinkApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Createconversationprospectlink
     * @param {string} conversationId
     * @param {string} prospectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConversationProspectLinkV1(conversationId: string, prospectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
    /**
     *
     * @summary Deleteconversationbyprospect
     * @param {string} conversationId
     * @param {string} prospectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConversationProspectLinkV1(conversationId: string, prospectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
    /**
     *
     * @summary Getconversationsbyprospect
     * @param {string} prospectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConversationsOfProspectsV1(prospectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConversationOutput>>>;
};
/**
 * ConversationProspectLinkApi - factory interface
 * @export
 */
export declare const ConversationProspectLinkApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Createconversationprospectlink
     * @param {string} conversationId
     * @param {string} prospectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConversationProspectLinkV1(conversationId: string, prospectId: string, options?: any): AxiosPromise<BaseResponse>;
    /**
     *
     * @summary Deleteconversationbyprospect
     * @param {string} conversationId
     * @param {string} prospectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConversationProspectLinkV1(conversationId: string, prospectId: string, options?: any): AxiosPromise<BaseResponse>;
    /**
     *
     * @summary Getconversationsbyprospect
     * @param {string} prospectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConversationsOfProspectsV1(prospectId: string, options?: any): AxiosPromise<Array<ConversationOutput>>;
};
/**
 * ConversationProspectLinkApi - object-oriented interface
 * @export
 * @class ConversationProspectLinkApi
 * @extends {BaseAPI}
 */
export declare class ConversationProspectLinkApi extends BaseAPI {
    /**
     *
     * @summary Createconversationprospectlink
     * @param {string} conversationId
     * @param {string} prospectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationProspectLinkApi
     */
    createConversationProspectLinkV1(conversationId: string, prospectId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponse>>;
    /**
     *
     * @summary Deleteconversationbyprospect
     * @param {string} conversationId
     * @param {string} prospectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationProspectLinkApi
     */
    deleteConversationProspectLinkV1(conversationId: string, prospectId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponse>>;
    /**
     *
     * @summary Getconversationsbyprospect
     * @param {string} prospectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationProspectLinkApi
     */
    listConversationsOfProspectsV1(prospectId: string, options?: any): Promise<import("axios").AxiosResponse<ConversationOutput[]>>;
}
/**
 * ConversationsApi - axios parameter creator
 * @export
 */
export declare const ConversationsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Addfeedback
     * @param {string} conversationId
     * @param {Comment} comment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addFeedbackV1: (conversationId: string, comment: Comment, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Createconversation
     * @param {ConversationInput} conversationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConversationV1: (conversationInput: ConversationInput, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Deleteconversation
     * @param {string} conversationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConversationV1: (conversationId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Getconversation
     * @param {string} conversationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConversationV1: (conversationId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Listconversations
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConversationsV1: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Updateconversation
     * @param {string} conversationId
     * @param {ConversationInput} conversationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConversationV1: (conversationId: string, conversationInput: ConversationInput, options?: any) => Promise<RequestArgs>;
};
/**
 * ConversationsApi - functional programming interface
 * @export
 */
export declare const ConversationsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Addfeedback
     * @param {string} conversationId
     * @param {Comment} comment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addFeedbackV1(conversationId: string, comment: Comment, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationFeedback>>;
    /**
     *
     * @summary Createconversation
     * @param {ConversationInput} conversationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConversationV1(conversationInput: ConversationInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationOutput>>;
    /**
     *
     * @summary Deleteconversation
     * @param {string} conversationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConversationV1(conversationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
    /**
     *
     * @summary Getconversation
     * @param {string} conversationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConversationV1(conversationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationOutput>>;
    /**
     *
     * @summary Listconversations
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConversationsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConversationOutput>>>;
    /**
     *
     * @summary Updateconversation
     * @param {string} conversationId
     * @param {ConversationInput} conversationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConversationV1(conversationId: string, conversationInput: ConversationInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationOutput>>;
};
/**
 * ConversationsApi - factory interface
 * @export
 */
export declare const ConversationsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Addfeedback
     * @param {string} conversationId
     * @param {Comment} comment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addFeedbackV1(conversationId: string, comment: Comment, options?: any): AxiosPromise<ConversationFeedback>;
    /**
     *
     * @summary Createconversation
     * @param {ConversationInput} conversationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConversationV1(conversationInput: ConversationInput, options?: any): AxiosPromise<ConversationOutput>;
    /**
     *
     * @summary Deleteconversation
     * @param {string} conversationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConversationV1(conversationId: string, options?: any): AxiosPromise<BaseResponse>;
    /**
     *
     * @summary Getconversation
     * @param {string} conversationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConversationV1(conversationId: string, options?: any): AxiosPromise<ConversationOutput>;
    /**
     *
     * @summary Listconversations
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConversationsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): AxiosPromise<Array<ConversationOutput>>;
    /**
     *
     * @summary Updateconversation
     * @param {string} conversationId
     * @param {ConversationInput} conversationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConversationV1(conversationId: string, conversationInput: ConversationInput, options?: any): AxiosPromise<ConversationOutput>;
};
/**
 * ConversationsApi - object-oriented interface
 * @export
 * @class ConversationsApi
 * @extends {BaseAPI}
 */
export declare class ConversationsApi extends BaseAPI {
    /**
     *
     * @summary Addfeedback
     * @param {string} conversationId
     * @param {Comment} comment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    addFeedbackV1(conversationId: string, comment: Comment, options?: any): Promise<import("axios").AxiosResponse<ConversationFeedback>>;
    /**
     *
     * @summary Createconversation
     * @param {ConversationInput} conversationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    createConversationV1(conversationInput: ConversationInput, options?: any): Promise<import("axios").AxiosResponse<ConversationOutput>>;
    /**
     *
     * @summary Deleteconversation
     * @param {string} conversationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    deleteConversationV1(conversationId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponse>>;
    /**
     *
     * @summary Getconversation
     * @param {string} conversationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    getConversationV1(conversationId: string, options?: any): Promise<import("axios").AxiosResponse<ConversationOutput>>;
    /**
     *
     * @summary Listconversations
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    listConversationsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): Promise<import("axios").AxiosResponse<ConversationOutput[]>>;
    /**
     *
     * @summary Updateconversation
     * @param {string} conversationId
     * @param {ConversationInput} conversationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    updateConversationV1(conversationId: string, conversationInput: ConversationInput, options?: any): Promise<import("axios").AxiosResponse<ConversationOutput>>;
}
/**
 * DataPlaneApi - axios parameter creator
 * @export
 */
export declare const DataPlaneApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Createconnection
     * @param {string} agentId
     * @param {ConnectionSource} connectionSource
     * @param {string} [prospectId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConnection: (agentId: string, connectionSource: ConnectionSource, prospectId?: string, options?: any) => Promise<RequestArgs>;
};
/**
 * DataPlaneApi - functional programming interface
 * @export
 */
export declare const DataPlaneApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Createconnection
     * @param {string} agentId
     * @param {ConnectionSource} connectionSource
     * @param {string} [prospectId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConnection(agentId: string, connectionSource: ConnectionSource, prospectId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Connection>>;
};
/**
 * DataPlaneApi - factory interface
 * @export
 */
export declare const DataPlaneApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Createconnection
     * @param {string} agentId
     * @param {ConnectionSource} connectionSource
     * @param {string} [prospectId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConnection(agentId: string, connectionSource: ConnectionSource, prospectId?: string, options?: any): AxiosPromise<Connection>;
};
/**
 * DataPlaneApi - object-oriented interface
 * @export
 * @class DataPlaneApi
 * @extends {BaseAPI}
 */
export declare class DataPlaneApi extends BaseAPI {
    /**
     *
     * @summary Createconnection
     * @param {string} agentId
     * @param {ConnectionSource} connectionSource
     * @param {string} [prospectId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataPlaneApi
     */
    createConnection(agentId: string, connectionSource: ConnectionSource, prospectId?: string, options?: any): Promise<import("axios").AxiosResponse<Connection>>;
}
/**
 * HealthApi - axios parameter creator
 * @export
 */
export declare const HealthApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Favicon
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    faviconFaviconIcoGet: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusStatusGet: (options?: any) => Promise<RequestArgs>;
};
/**
 * HealthApi - functional programming interface
 * @export
 */
export declare const HealthApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Favicon
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    faviconFaviconIcoGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusStatusGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{
        [key: string]: string;
    }>>;
};
/**
 * HealthApi - factory interface
 * @export
 */
export declare const HealthApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Favicon
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    faviconFaviconIcoGet(options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusStatusGet(options?: any): AxiosPromise<{
        [key: string]: string;
    }>;
};
/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export declare class HealthApi extends BaseAPI {
    /**
     *
     * @summary Favicon
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    faviconFaviconIcoGet(options?: any): Promise<import("axios").AxiosResponse<any>>;
    /**
     *
     * @summary Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    statusStatusGet(options?: any): Promise<import("axios").AxiosResponse<{
        [key: string]: string;
    }>>;
}
/**
 * HiveApi - axios parameter creator
 * @export
 */
export declare const HiveApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Createhive
     * @param {HiveContent} hiveContent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createHiveV1: (hiveContent: HiveContent, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletehive
     * @param {string} hiveId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteHiveV1: (hiveId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Gethive
     * @param {string} hiveId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHiveV1: (hiveId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Listhives
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listHivesV1: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Updatehive
     * @param {string} hiveId
     * @param {HiveContent} hiveContent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateHiveV1: (hiveId: string, hiveContent: HiveContent, options?: any) => Promise<RequestArgs>;
};
/**
 * HiveApi - functional programming interface
 * @export
 */
export declare const HiveApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Createhive
     * @param {HiveContent} hiveContent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createHiveV1(hiveContent: HiveContent, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Hive>>;
    /**
     *
     * @summary Deletehive
     * @param {string} hiveId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteHiveV1(hiveId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
    /**
     *
     * @summary Gethive
     * @param {string} hiveId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHiveV1(hiveId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Hive>>;
    /**
     *
     * @summary Listhives
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listHivesV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Hive>>>;
    /**
     *
     * @summary Updatehive
     * @param {string} hiveId
     * @param {HiveContent} hiveContent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateHiveV1(hiveId: string, hiveContent: HiveContent, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Hive>>;
};
/**
 * HiveApi - factory interface
 * @export
 */
export declare const HiveApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Createhive
     * @param {HiveContent} hiveContent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createHiveV1(hiveContent: HiveContent, options?: any): AxiosPromise<Hive>;
    /**
     *
     * @summary Deletehive
     * @param {string} hiveId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteHiveV1(hiveId: string, options?: any): AxiosPromise<BaseResponse>;
    /**
     *
     * @summary Gethive
     * @param {string} hiveId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHiveV1(hiveId: string, options?: any): AxiosPromise<Hive>;
    /**
     *
     * @summary Listhives
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listHivesV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): AxiosPromise<Array<Hive>>;
    /**
     *
     * @summary Updatehive
     * @param {string} hiveId
     * @param {HiveContent} hiveContent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateHiveV1(hiveId: string, hiveContent: HiveContent, options?: any): AxiosPromise<Hive>;
};
/**
 * HiveApi - object-oriented interface
 * @export
 * @class HiveApi
 * @extends {BaseAPI}
 */
export declare class HiveApi extends BaseAPI {
    /**
     *
     * @summary Createhive
     * @param {HiveContent} hiveContent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HiveApi
     */
    createHiveV1(hiveContent: HiveContent, options?: any): Promise<import("axios").AxiosResponse<Hive>>;
    /**
     *
     * @summary Deletehive
     * @param {string} hiveId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HiveApi
     */
    deleteHiveV1(hiveId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponse>>;
    /**
     *
     * @summary Gethive
     * @param {string} hiveId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HiveApi
     */
    getHiveV1(hiveId: string, options?: any): Promise<import("axios").AxiosResponse<Hive>>;
    /**
     *
     * @summary Listhives
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HiveApi
     */
    listHivesV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): Promise<import("axios").AxiosResponse<Hive[]>>;
    /**
     *
     * @summary Updatehive
     * @param {string} hiveId
     * @param {HiveContent} hiveContent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HiveApi
     */
    updateHiveV1(hiveId: string, hiveContent: HiveContent, options?: any): Promise<import("axios").AxiosResponse<Hive>>;
}
/**
 * HiveAgentLinkApi - axios parameter creator
 * @export
 */
export declare const HiveAgentLinkApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Createhiveagentlink
     * @param {string} hiveId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createHiveAgentLinkV1: (hiveId: string, agentId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletehiveagentlink
     * @param {string} hiveId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteHiveAgentLinkV1: (hiveId: string, agentId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Listagentsofhive
     * @param {string} hiveId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAgentsOfHiveV1: (hiveId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Listhivesofagent
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listHivesOfAgentV1: (agentId: string, options?: any) => Promise<RequestArgs>;
};
/**
 * HiveAgentLinkApi - functional programming interface
 * @export
 */
export declare const HiveAgentLinkApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Createhiveagentlink
     * @param {string} hiveId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createHiveAgentLinkV1(hiveId: string, agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
    /**
     *
     * @summary Deletehiveagentlink
     * @param {string} hiveId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteHiveAgentLinkV1(hiveId: string, agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
    /**
     *
     * @summary Listagentsofhive
     * @param {string} hiveId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAgentsOfHiveV1(hiveId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AIAgentOutput>>>;
    /**
     *
     * @summary Listhivesofagent
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listHivesOfAgentV1(agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Hive>>>;
};
/**
 * HiveAgentLinkApi - factory interface
 * @export
 */
export declare const HiveAgentLinkApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Createhiveagentlink
     * @param {string} hiveId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createHiveAgentLinkV1(hiveId: string, agentId: string, options?: any): AxiosPromise<BaseResponse>;
    /**
     *
     * @summary Deletehiveagentlink
     * @param {string} hiveId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteHiveAgentLinkV1(hiveId: string, agentId: string, options?: any): AxiosPromise<BaseResponse>;
    /**
     *
     * @summary Listagentsofhive
     * @param {string} hiveId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAgentsOfHiveV1(hiveId: string, options?: any): AxiosPromise<Array<AIAgentOutput>>;
    /**
     *
     * @summary Listhivesofagent
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listHivesOfAgentV1(agentId: string, options?: any): AxiosPromise<Array<Hive>>;
};
/**
 * HiveAgentLinkApi - object-oriented interface
 * @export
 * @class HiveAgentLinkApi
 * @extends {BaseAPI}
 */
export declare class HiveAgentLinkApi extends BaseAPI {
    /**
     *
     * @summary Createhiveagentlink
     * @param {string} hiveId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HiveAgentLinkApi
     */
    createHiveAgentLinkV1(hiveId: string, agentId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponse>>;
    /**
     *
     * @summary Deletehiveagentlink
     * @param {string} hiveId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HiveAgentLinkApi
     */
    deleteHiveAgentLinkV1(hiveId: string, agentId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponse>>;
    /**
     *
     * @summary Listagentsofhive
     * @param {string} hiveId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HiveAgentLinkApi
     */
    listAgentsOfHiveV1(hiveId: string, options?: any): Promise<import("axios").AxiosResponse<AIAgentOutput[]>>;
    /**
     *
     * @summary Listhivesofagent
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HiveAgentLinkApi
     */
    listHivesOfAgentV1(agentId: string, options?: any): Promise<import("axios").AxiosResponse<Hive[]>>;
}
/**
 * InternalApi - axios parameter creator
 * @export
 */
export declare const InternalApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Accept invite and add new user to organization
     * @summary Acceptinvite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptInviteV1: (options?: any) => Promise<RequestArgs>;
    /**
     * Creates a new organization and adds the user as the \"ADMIN\" user for the org
     * @summary Createorganization
     * @param {BodyCreateOrganizationV1} bodyCreateOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganizationV1: (bodyCreateOrganizationV1: BodyCreateOrganizationV1, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete File
     * @param {FileUploadType} uploadType
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFileV1: (uploadType: FileUploadType, requestBody: Array<string>, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a user
     * @summary Deleteuser
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserV1: (userId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List of all open invites from the organization
     * @summary Listinvites
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listInvitesV1: (options?: any) => Promise<RequestArgs>;
    /**
     * Lists all users under the user\'s organization
     * @summary Listusers
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsersV1: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Invite a new user to an organization or resend invite to the user if the user is already invited
     * @summary Inviteusers
     * @param {GuestInput} guestInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendInviteV1: (guestInput: GuestInput, options?: any) => Promise<RequestArgs>;
    /**
     * Update user details
     * @summary Updateuser
     * @param {string} userId
     * @param {UpdateUserPayload} updateUserPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserV1: (userId: string, updateUserPayload: UpdateUserPayload, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Upload File
     * @param {FileUploadType} uploadType
     * @param {Array<any>} files
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFileV1: (uploadType: FileUploadType, files: Array<any>, options?: any) => Promise<RequestArgs>;
};
/**
 * InternalApi - functional programming interface
 * @export
 */
export declare const InternalApiFp: (configuration?: Configuration) => {
    /**
     * Accept invite and add new user to organization
     * @summary Acceptinvite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptInviteV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     * Creates a new organization and adds the user as the \"ADMIN\" user for the org
     * @summary Createorganization
     * @param {BodyCreateOrganizationV1} bodyCreateOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganizationV1(bodyCreateOrganizationV1: BodyCreateOrganizationV1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     *
     * @summary Delete File
     * @param {FileUploadType} uploadType
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFileV1(uploadType: FileUploadType, requestBody: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>>;
    /**
     * Delete a user
     * @summary Deleteuser
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserV1(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     * List of all open invites from the organization
     * @summary Listinvites
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listInvitesV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GuestOutput>>>;
    /**
     * Lists all users under the user\'s organization
     * @summary Listusers
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsersV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>>;
    /**
     * Invite a new user to an organization or resend invite to the user if the user is already invited
     * @summary Inviteusers
     * @param {GuestInput} guestInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendInviteV1(guestInput: GuestInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GuestOutput>>;
    /**
     * Update user details
     * @summary Updateuser
     * @param {string} userId
     * @param {UpdateUserPayload} updateUserPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserV1(userId: string, updateUserPayload: UpdateUserPayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     *
     * @summary Upload File
     * @param {FileUploadType} uploadType
     * @param {Array<any>} files
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFileV1(uploadType: FileUploadType, files: Array<any>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>>;
};
/**
 * InternalApi - factory interface
 * @export
 */
export declare const InternalApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Accept invite and add new user to organization
     * @summary Acceptinvite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptInviteV1(options?: any): AxiosPromise<User>;
    /**
     * Creates a new organization and adds the user as the \"ADMIN\" user for the org
     * @summary Createorganization
     * @param {BodyCreateOrganizationV1} bodyCreateOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganizationV1(bodyCreateOrganizationV1: BodyCreateOrganizationV1, options?: any): AxiosPromise<User>;
    /**
     *
     * @summary Delete File
     * @param {FileUploadType} uploadType
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFileV1(uploadType: FileUploadType, requestBody: Array<string>, options?: any): AxiosPromise<boolean>;
    /**
     * Delete a user
     * @summary Deleteuser
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserV1(userId: string, options?: any): AxiosPromise<User>;
    /**
     * List of all open invites from the organization
     * @summary Listinvites
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listInvitesV1(options?: any): AxiosPromise<Array<GuestOutput>>;
    /**
     * Lists all users under the user\'s organization
     * @summary Listusers
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsersV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): AxiosPromise<Array<User>>;
    /**
     * Invite a new user to an organization or resend invite to the user if the user is already invited
     * @summary Inviteusers
     * @param {GuestInput} guestInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendInviteV1(guestInput: GuestInput, options?: any): AxiosPromise<GuestOutput>;
    /**
     * Update user details
     * @summary Updateuser
     * @param {string} userId
     * @param {UpdateUserPayload} updateUserPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserV1(userId: string, updateUserPayload: UpdateUserPayload, options?: any): AxiosPromise<User>;
    /**
     *
     * @summary Upload File
     * @param {FileUploadType} uploadType
     * @param {Array<any>} files
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFileV1(uploadType: FileUploadType, files: Array<any>, options?: any): AxiosPromise<Array<string>>;
};
/**
 * InternalApi - object-oriented interface
 * @export
 * @class InternalApi
 * @extends {BaseAPI}
 */
export declare class InternalApi extends BaseAPI {
    /**
     * Accept invite and add new user to organization
     * @summary Acceptinvite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    acceptInviteV1(options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     * Creates a new organization and adds the user as the \"ADMIN\" user for the org
     * @summary Createorganization
     * @param {BodyCreateOrganizationV1} bodyCreateOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    createOrganizationV1(bodyCreateOrganizationV1: BodyCreateOrganizationV1, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     *
     * @summary Delete File
     * @param {FileUploadType} uploadType
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    deleteFileV1(uploadType: FileUploadType, requestBody: Array<string>, options?: any): Promise<import("axios").AxiosResponse<boolean>>;
    /**
     * Delete a user
     * @summary Deleteuser
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    deleteUserV1(userId: string, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     * List of all open invites from the organization
     * @summary Listinvites
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    listInvitesV1(options?: any): Promise<import("axios").AxiosResponse<GuestOutput[]>>;
    /**
     * Lists all users under the user\'s organization
     * @summary Listusers
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    listUsersV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): Promise<import("axios").AxiosResponse<User[]>>;
    /**
     * Invite a new user to an organization or resend invite to the user if the user is already invited
     * @summary Inviteusers
     * @param {GuestInput} guestInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    sendInviteV1(guestInput: GuestInput, options?: any): Promise<import("axios").AxiosResponse<GuestOutput>>;
    /**
     * Update user details
     * @summary Updateuser
     * @param {string} userId
     * @param {UpdateUserPayload} updateUserPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    updateUserV1(userId: string, updateUserPayload: UpdateUserPayload, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     *
     * @summary Upload File
     * @param {FileUploadType} uploadType
     * @param {Array<any>} files
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    uploadFileV1(uploadType: FileUploadType, files: Array<any>, options?: any): Promise<import("axios").AxiosResponse<string[]>>;
}
/**
 * KnowledgeBaseApi - axios parameter creator
 * @export
 */
export declare const KnowledgeBaseApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Createhive
     * @param {HiveContent} hiveContent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createHiveV1: (hiveContent: HiveContent, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Deletehive
     * @param {string} hiveId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteHiveV1: (hiveId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Gethive
     * @param {string} hiveId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHiveV1: (hiveId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Listhives
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listHivesV1: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Updatehive
     * @param {string} hiveId
     * @param {HiveContent} hiveContent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateHiveV1: (hiveId: string, hiveContent: HiveContent, options?: any) => Promise<RequestArgs>;
};
/**
 * KnowledgeBaseApi - functional programming interface
 * @export
 */
export declare const KnowledgeBaseApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Createhive
     * @param {HiveContent} hiveContent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createHiveV1(hiveContent: HiveContent, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Hive>>;
    /**
     *
     * @summary Deletehive
     * @param {string} hiveId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteHiveV1(hiveId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
    /**
     *
     * @summary Gethive
     * @param {string} hiveId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHiveV1(hiveId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Hive>>;
    /**
     *
     * @summary Listhives
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listHivesV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Hive>>>;
    /**
     *
     * @summary Updatehive
     * @param {string} hiveId
     * @param {HiveContent} hiveContent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateHiveV1(hiveId: string, hiveContent: HiveContent, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Hive>>;
};
/**
 * KnowledgeBaseApi - factory interface
 * @export
 */
export declare const KnowledgeBaseApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Createhive
     * @param {HiveContent} hiveContent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createHiveV1(hiveContent: HiveContent, options?: any): AxiosPromise<Hive>;
    /**
     *
     * @summary Deletehive
     * @param {string} hiveId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteHiveV1(hiveId: string, options?: any): AxiosPromise<BaseResponse>;
    /**
     *
     * @summary Gethive
     * @param {string} hiveId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHiveV1(hiveId: string, options?: any): AxiosPromise<Hive>;
    /**
     *
     * @summary Listhives
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listHivesV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): AxiosPromise<Array<Hive>>;
    /**
     *
     * @summary Updatehive
     * @param {string} hiveId
     * @param {HiveContent} hiveContent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateHiveV1(hiveId: string, hiveContent: HiveContent, options?: any): AxiosPromise<Hive>;
};
/**
 * KnowledgeBaseApi - object-oriented interface
 * @export
 * @class KnowledgeBaseApi
 * @extends {BaseAPI}
 */
export declare class KnowledgeBaseApi extends BaseAPI {
    /**
     *
     * @summary Createhive
     * @param {HiveContent} hiveContent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeBaseApi
     */
    createHiveV1(hiveContent: HiveContent, options?: any): Promise<import("axios").AxiosResponse<Hive>>;
    /**
     *
     * @summary Deletehive
     * @param {string} hiveId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeBaseApi
     */
    deleteHiveV1(hiveId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponse>>;
    /**
     *
     * @summary Gethive
     * @param {string} hiveId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeBaseApi
     */
    getHiveV1(hiveId: string, options?: any): Promise<import("axios").AxiosResponse<Hive>>;
    /**
     *
     * @summary Listhives
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeBaseApi
     */
    listHivesV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): Promise<import("axios").AxiosResponse<Hive[]>>;
    /**
     *
     * @summary Updatehive
     * @param {string} hiveId
     * @param {HiveContent} hiveContent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KnowledgeBaseApi
     */
    updateHiveV1(hiveId: string, hiveContent: HiveContent, options?: any): Promise<import("axios").AxiosResponse<Hive>>;
}
/**
 * MetricsApi - axios parameter creator
 * @export
 */
export declare const MetricsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Getmetrics
     * @param {BatchMetricsRequests} batchMetricsRequests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetricsV1MetricsPost: (batchMetricsRequests: BatchMetricsRequests, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Getoverallstats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOverallStatsV1StatsGet: (options?: any) => Promise<RequestArgs>;
};
/**
 * MetricsApi - functional programming interface
 * @export
 */
export declare const MetricsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Getmetrics
     * @param {BatchMetricsRequests} batchMetricsRequests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetricsV1MetricsPost(batchMetricsRequests: BatchMetricsRequests, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchMetricsResponse>>;
    /**
     *
     * @summary Getoverallstats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOverallStatsV1StatsGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatsResponse>>;
};
/**
 * MetricsApi - factory interface
 * @export
 */
export declare const MetricsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Getmetrics
     * @param {BatchMetricsRequests} batchMetricsRequests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetricsV1MetricsPost(batchMetricsRequests: BatchMetricsRequests, options?: any): AxiosPromise<BatchMetricsResponse>;
    /**
     *
     * @summary Getoverallstats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOverallStatsV1StatsGet(options?: any): AxiosPromise<StatsResponse>;
};
/**
 * MetricsApi - object-oriented interface
 * @export
 * @class MetricsApi
 * @extends {BaseAPI}
 */
export declare class MetricsApi extends BaseAPI {
    /**
     *
     * @summary Getmetrics
     * @param {BatchMetricsRequests} batchMetricsRequests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    getMetricsV1MetricsPost(batchMetricsRequests: BatchMetricsRequests, options?: any): Promise<import("axios").AxiosResponse<BatchMetricsResponse>>;
    /**
     *
     * @summary Getoverallstats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetricsApi
     */
    getOverallStatsV1StatsGet(options?: any): Promise<import("axios").AxiosResponse<StatsResponse>>;
}
/**
 * ProductsApi - axios parameter creator
 * @export
 */
export declare const ProductsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Createproduct
     * @param {ProductInput} productInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProductV1: (productInput: ProductInput, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Deleteproduct
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductV1: (productId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Getproduct
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductV1: (productId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Listproducts
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Array<string>} [tags]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProductsV1: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, tags?: Array<string>, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Updateproduct
     * @param {string} productId
     * @param {ProductInput} productInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProductV1: (productId: string, productInput: ProductInput, options?: any) => Promise<RequestArgs>;
};
/**
 * ProductsApi - functional programming interface
 * @export
 */
export declare const ProductsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Createproduct
     * @param {ProductInput} productInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProductV1(productInput: ProductInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductOutput>>;
    /**
     *
     * @summary Deleteproduct
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductV1(productId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
    /**
     *
     * @summary Getproduct
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductV1(productId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductOutput>>;
    /**
     *
     * @summary Listproducts
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Array<string>} [tags]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProductsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, tags?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductOutput>>>;
    /**
     *
     * @summary Updateproduct
     * @param {string} productId
     * @param {ProductInput} productInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProductV1(productId: string, productInput: ProductInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductOutput>>;
};
/**
 * ProductsApi - factory interface
 * @export
 */
export declare const ProductsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Createproduct
     * @param {ProductInput} productInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProductV1(productInput: ProductInput, options?: any): AxiosPromise<ProductOutput>;
    /**
     *
     * @summary Deleteproduct
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductV1(productId: string, options?: any): AxiosPromise<BaseResponse>;
    /**
     *
     * @summary Getproduct
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductV1(productId: string, options?: any): AxiosPromise<ProductOutput>;
    /**
     *
     * @summary Listproducts
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Array<string>} [tags]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProductsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, tags?: Array<string>, options?: any): AxiosPromise<Array<ProductOutput>>;
    /**
     *
     * @summary Updateproduct
     * @param {string} productId
     * @param {ProductInput} productInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProductV1(productId: string, productInput: ProductInput, options?: any): AxiosPromise<ProductOutput>;
};
/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export declare class ProductsApi extends BaseAPI {
    /**
     *
     * @summary Createproduct
     * @param {ProductInput} productInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    createProductV1(productInput: ProductInput, options?: any): Promise<import("axios").AxiosResponse<ProductOutput>>;
    /**
     *
     * @summary Deleteproduct
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    deleteProductV1(productId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponse>>;
    /**
     *
     * @summary Getproduct
     * @param {string} productId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    getProductV1(productId: string, options?: any): Promise<import("axios").AxiosResponse<ProductOutput>>;
    /**
     *
     * @summary Listproducts
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {Array<string>} [tags]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    listProductsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, tags?: Array<string>, options?: any): Promise<import("axios").AxiosResponse<ProductOutput[]>>;
    /**
     *
     * @summary Updateproduct
     * @param {string} productId
     * @param {ProductInput} productInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    updateProductV1(productId: string, productInput: ProductInput, options?: any): Promise<import("axios").AxiosResponse<ProductOutput>>;
}
/**
 * ProspectsApi - axios parameter creator
 * @export
 */
export declare const ProspectsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a new prospect.
     * @summary Createprospect
     * @param {ProspectInput} prospectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProspectV1: (prospectInput: ProspectInput, options?: any) => Promise<RequestArgs>;
    /**
     * Deletes a specific prospect by ID.
     * @summary Deleteprospect
     * @param {string} prospectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProspectV1: (prospectId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Fetches a specific prospect by ID.
     * @summary Getprospect
     * @param {string} prospectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProspectV1: (prospectId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Lists all prospects under the user\'s organization
     * @summary Listprospects
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProspectsV1: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Updates a specific prospect by ID.
     * @summary Updateprospect
     * @param {string} prospectId
     * @param {ProspectInput} prospectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProspectV1: (prospectId: string, prospectInput: ProspectInput, options?: any) => Promise<RequestArgs>;
};
/**
 * ProspectsApi - functional programming interface
 * @export
 */
export declare const ProspectsApiFp: (configuration?: Configuration) => {
    /**
     * Creates a new prospect.
     * @summary Createprospect
     * @param {ProspectInput} prospectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProspectV1(prospectInput: ProspectInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProspectOutput>>;
    /**
     * Deletes a specific prospect by ID.
     * @summary Deleteprospect
     * @param {string} prospectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProspectV1(prospectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>>;
    /**
     * Fetches a specific prospect by ID.
     * @summary Getprospect
     * @param {string} prospectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProspectV1(prospectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProspectOutput>>;
    /**
     * Lists all prospects under the user\'s organization
     * @summary Listprospects
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProspectsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProspectOutput>>>;
    /**
     * Updates a specific prospect by ID.
     * @summary Updateprospect
     * @param {string} prospectId
     * @param {ProspectInput} prospectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProspectV1(prospectId: string, prospectInput: ProspectInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProspectOutput>>;
};
/**
 * ProspectsApi - factory interface
 * @export
 */
export declare const ProspectsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a new prospect.
     * @summary Createprospect
     * @param {ProspectInput} prospectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProspectV1(prospectInput: ProspectInput, options?: any): AxiosPromise<ProspectOutput>;
    /**
     * Deletes a specific prospect by ID.
     * @summary Deleteprospect
     * @param {string} prospectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProspectV1(prospectId: string, options?: any): AxiosPromise<BaseResponse>;
    /**
     * Fetches a specific prospect by ID.
     * @summary Getprospect
     * @param {string} prospectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProspectV1(prospectId: string, options?: any): AxiosPromise<ProspectOutput>;
    /**
     * Lists all prospects under the user\'s organization
     * @summary Listprospects
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProspectsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): AxiosPromise<Array<ProspectOutput>>;
    /**
     * Updates a specific prospect by ID.
     * @summary Updateprospect
     * @param {string} prospectId
     * @param {ProspectInput} prospectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProspectV1(prospectId: string, prospectInput: ProspectInput, options?: any): AxiosPromise<ProspectOutput>;
};
/**
 * ProspectsApi - object-oriented interface
 * @export
 * @class ProspectsApi
 * @extends {BaseAPI}
 */
export declare class ProspectsApi extends BaseAPI {
    /**
     * Creates a new prospect.
     * @summary Createprospect
     * @param {ProspectInput} prospectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProspectsApi
     */
    createProspectV1(prospectInput: ProspectInput, options?: any): Promise<import("axios").AxiosResponse<ProspectOutput>>;
    /**
     * Deletes a specific prospect by ID.
     * @summary Deleteprospect
     * @param {string} prospectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProspectsApi
     */
    deleteProspectV1(prospectId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponse>>;
    /**
     * Fetches a specific prospect by ID.
     * @summary Getprospect
     * @param {string} prospectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProspectsApi
     */
    getProspectV1(prospectId: string, options?: any): Promise<import("axios").AxiosResponse<ProspectOutput>>;
    /**
     * Lists all prospects under the user\'s organization
     * @summary Listprospects
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProspectsApi
     */
    listProspectsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, options?: any): Promise<import("axios").AxiosResponse<ProspectOutput[]>>;
    /**
     * Updates a specific prospect by ID.
     * @summary Updateprospect
     * @param {string} prospectId
     * @param {ProspectInput} prospectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProspectsApi
     */
    updateProspectV1(prospectId: string, prospectInput: ProspectInput, options?: any): Promise<import("axios").AxiosResponse<ProspectOutput>>;
}
/**
 * UIApi - axios parameter creator
 * @export
 */
export declare const UIApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary List Prompt Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPromptTemplatesV1: (language?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary List Role Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRoleTemplatesV1: (language?: string, options?: any) => Promise<RequestArgs>;
};
/**
 * UIApi - functional programming interface
 * @export
 */
export declare const UIApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary List Prompt Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPromptTemplatesV1(language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{
        [key: string]: PromptTemplate;
    }>>;
    /**
     *
     * @summary List Role Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRoleTemplatesV1(language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleTemplate>>>;
};
/**
 * UIApi - factory interface
 * @export
 */
export declare const UIApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary List Prompt Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPromptTemplatesV1(language?: string, options?: any): AxiosPromise<{
        [key: string]: PromptTemplate;
    }>;
    /**
     *
     * @summary List Role Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRoleTemplatesV1(language?: string, options?: any): AxiosPromise<Array<RoleTemplate>>;
};
/**
 * UIApi - object-oriented interface
 * @export
 * @class UIApi
 * @extends {BaseAPI}
 */
export declare class UIApi extends BaseAPI {
    /**
     *
     * @summary List Prompt Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UIApi
     */
    listPromptTemplatesV1(language?: string, options?: any): Promise<import("axios").AxiosResponse<{
        [key: string]: PromptTemplate;
    }>>;
    /**
     *
     * @summary List Role Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UIApi
     */
    listRoleTemplatesV1(language?: string, options?: any): Promise<import("axios").AxiosResponse<RoleTemplate[]>>;
}
/**
 * VoiceModelsApi - axios parameter creator
 * @export
 */
export declare const VoiceModelsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Listvoicemodels
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVoiceModelsV1: (options?: any) => Promise<RequestArgs>;
};
/**
 * VoiceModelsApi - functional programming interface
 * @export
 */
export declare const VoiceModelsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Listvoicemodels
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVoiceModelsV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>>;
};
/**
 * VoiceModelsApi - factory interface
 * @export
 */
export declare const VoiceModelsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Listvoicemodels
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVoiceModelsV1(options?: any): AxiosPromise<Array<object>>;
};
/**
 * VoiceModelsApi - object-oriented interface
 * @export
 * @class VoiceModelsApi
 * @extends {BaseAPI}
 */
export declare class VoiceModelsApi extends BaseAPI {
    /**
     *
     * @summary Listvoicemodels
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoiceModelsApi
     */
    listVoiceModelsV1(options?: any): Promise<import("axios").AxiosResponse<object[]>>;
}
