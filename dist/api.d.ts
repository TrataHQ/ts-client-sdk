/**
 * Trata AI API
 * Human like conversation to answer calls, drive engagement, automate follow-ups & schedule bookings 24/7  with end to end integrations ensuring you never miss a sales enquiry.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface AIAgentInput
 */
export interface AIAgentInput {
    /**
     * Name of the AI agent
     * @type {string}
     * @memberof AIAgentInput
     */
    name: string;
    /**
     * Image URL for the AI agent
     * @type {string}
     * @memberof AIAgentInput
     */
    imageUrl: string;
    /**
     * Mission of the AI agent
     * @type {Mission}
     * @memberof AIAgentInput
     */
    mission?: Mission | null;
    /**
     * Status of the AI agent
     * @type {Status}
     * @memberof AIAgentInput
     */
    status: Status;
    /**
     * Role of the AI agent in the company
     * @type {string}
     * @memberof AIAgentInput
     */
    role: string;
    /**
     * Description of the role of the AI agent
     * @type {string}
     * @memberof AIAgentInput
     */
    roleDescription: string;
    /**
     * Timezone of the AI agent used for scheduling meetings
     * @type {string}
     * @memberof AIAgentInput
     */
    timezone: string;
    /**
     * Voice of the AI agent
     * @type {VoiceInput}
     * @memberof AIAgentInput
     */
    voice?: VoiceInput | null;
    /**
     * List of terms or phrases that the AI agent to prioritize for enhanced recognition
     * @type {Array<string>}
     * @memberof AIAgentInput
     */
    boostedKeywords?: Array<string> | null;
    /**
     * App in which the AI agent is running
     * @type {AppEnumInput}
     * @memberof AIAgentInput
     */
    app?: AppEnumInput | null;
    /**
     * Evaluation metrics for the conversation
     * @type {ConversationEvaluationMetrics}
     * @memberof AIAgentInput
     */
    evaluationMetrics?: ConversationEvaluationMetrics | null;
}
/**
 * AI agent configured by businesses
 * @export
 * @interface AIAgentOutput
 */
export interface AIAgentOutput {
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    imageUrl?: string;
    /**
     *
     * @type {Mission}
     * @memberof AIAgentOutput
     */
    mission?: Mission | null;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    role?: string;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    roleDescription?: string;
    /**
     *
     * @type {Transcriber}
     * @memberof AIAgentOutput
     */
    transcriber?: Transcriber | null;
    /**
     *
     * @type {IntelligenceProvider}
     * @memberof AIAgentOutput
     */
    intelligenceProvider?: IntelligenceProvider | null;
    /**
     *
     * @type {VoiceOutput}
     * @memberof AIAgentOutput
     */
    voice?: VoiceOutput | null;
    /**
     *
     * @type {Array<string>}
     * @memberof AIAgentOutput
     */
    boostedKeywords?: Array<string> | null;
    /**
     * Application under which the AI agent is created
     * @type {AppEnumOutput}
     * @memberof AIAgentOutput
     */
    app?: AppEnumOutput | null;
    /**
     * Evaluation metrics for the conversation
     * @type {ConversationEvaluationMetrics}
     * @memberof AIAgentOutput
     */
    evaluationMetrics?: ConversationEvaluationMetrics | null;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    status?: string;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    timezone?: string;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum Accent {
    American = "American",
    Indian = "Indian",
    Australian = "Australian",
    British = "British",
    Hindi = "Hindi",
    MiddleEastern = "Middle Eastern"
}
/**
 *
 * @export
 * @interface AcceptInviteRequest
 */
export interface AcceptInviteRequest {
    /**
     * Name of the user
     * @type {string}
     * @memberof AcceptInviteRequest
     */
    name?: string | null;
    /**
     * Password for the user
     * @type {string}
     * @memberof AcceptInviteRequest
     */
    password?: string | null;
}
/**
 *
 * @export
 * @interface ActionInput
 */
export interface ActionInput {
    /**
     * Name of the action
     * @type {string}
     * @memberof ActionInput
     */
    name: string;
    /**
     * Description about the action and it should also contain when the action should be triggered
     * @type {string}
     * @memberof ActionInput
     */
    description?: string | null;
    /**
     * Parameters for the action. It should be a JSON schema object
     * @type {object}
     * @memberof ActionInput
     */
    parameters: object;
    /**
     * Endpoint for the action
     * @type {HttpActionEndpoint | InternalActionEndpoint | AgenticWorkflowActionEndpoint}
     * @memberof ActionInput
     */
    endpoint: HttpActionEndpoint | InternalActionEndpoint | AgenticWorkflowActionEndpoint;
    /**
     * Text to be rendered to user when action is invoked
     * @type {string}
     * @memberof ActionInput
     */
    userWaitingText?: string | null;
    /**
     * Text to be rendered to user when action is successful
     * @type {string}
     * @memberof ActionInput
     */
    userSuccessText?: string | null;
    /**
     * Text to be rendered to user when action is not successful
     * @type {string}
     * @memberof ActionInput
     */
    userErrorText?: string | null;
    /**
     * Trigger who invokes the action
     * @type {ActionInvocationTrigger}
     * @memberof ActionInput
     */
    invocationTrigger: ActionInvocationTrigger;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum ActionInvocationTrigger {
    UserQuery = "user_query",
    WebhookConversationStart = "webhook.conversation_start",
    WebhookConversationEnd = "webhook.conversation_end"
}
/**
 * Action entity to store the actions which can be performed by ai agents
 * @export
 * @interface ActionOutput
 */
export interface ActionOutput {
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    description?: string | null;
    /**
     *
     * @type {object}
     * @memberof ActionOutput
     */
    parameters?: object | null;
    /**
     *
     * @type {object}
     * @memberof ActionOutput
     */
    endpoint?: object | null;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    invocationTrigger?: string | null;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    userWaitingText?: string | null;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    userSuccessText?: string | null;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    userErrorText?: string | null;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum Adaptability {
    OpenToChange = "open to change",
    Resistant = "resistant",
    Indifferent = "indifferent"
}
/**
 *
 * @export
 * @interface AddressInput
 */
export interface AddressInput {
    /**
     * Address line 1
     * @type {string}
     * @memberof AddressInput
     */
    line1: string;
    /**
     * Address line 2
     * @type {string}
     * @memberof AddressInput
     */
    line2?: string | null;
    /**
     * City
     * @type {string}
     * @memberof AddressInput
     */
    city?: string | null;
    /**
     * State
     * @type {string}
     * @memberof AddressInput
     */
    state?: string | null;
    /**
     * Country
     * @type {string}
     * @memberof AddressInput
     */
    country: string;
}
/**
 *
 * @export
 * @interface AddressOutput
 */
export interface AddressOutput {
    /**
     *
     * @type {string}
     * @memberof AddressOutput
     */
    line1: string;
    /**
     *
     * @type {string}
     * @memberof AddressOutput
     */
    line2: string | null;
    /**
     *
     * @type {string}
     * @memberof AddressOutput
     */
    city: string | null;
    /**
     *
     * @type {string}
     * @memberof AddressOutput
     */
    state: string | null;
    /**
     *
     * @type {string}
     * @memberof AddressOutput
     */
    country: string | null;
}
/**
 *
 * @export
 * @interface AgentConfig
 */
export interface AgentConfig {
    /**
     * Enum class representing transcriber
     * @type {string}
     * @memberof AgentConfig
     */
    transcriber: string;
    /**
     * Enum class representing intelligence provider
     * @type {string}
     * @memberof AgentConfig
     */
    intelligenceProvider: string;
    /**
     *
     * @type {string}
     * @memberof AgentConfig
     */
    synthesizer: string;
    /**
     *
     * @type {string}
     * @memberof AgentConfig
     */
    embeddingsModelConfig: string;
    /**
     *
     * @type {string}
     * @memberof AgentConfig
     */
    hiveStorageConfig: string;
    /**
     *
     * @type {string}
     * @memberof AgentConfig
     */
    fillersConfig?: string | null;
}
/**
 *
 * @export
 * @interface AgenticWorkflowActionEndpoint
 */
export interface AgenticWorkflowActionEndpoint {
    /**
     * Agentic workflow id
     * @type {string}
     * @memberof AgenticWorkflowActionEndpoint
     */
    workflowId: string;
}
/**
 * Enum which stores the list of apps which are used to create the conversation
 * @export
 * @enum {string}
 */
export declare enum AgenticWorkflowAdkModelsWorkflowAppEnum {
    TRATA = "TRATA",
    TRATASPARR = "TRATA_SPARR"
}
/**
 * Connection represents an instance of an app with specific credentials and configuration
 * @export
 * @interface AgenticWorkflowDbModelsConnection
 */
export interface AgenticWorkflowDbModelsConnection {
    /**
     * The user who created.
     * @type {string}
     * @memberof AgenticWorkflowDbModelsConnection
     */
    createdBy?: string;
    /**
     * The date and time it was created.
     * @type {string}
     * @memberof AgenticWorkflowDbModelsConnection
     */
    createdAt?: string;
    /**
     * The user who last updated.
     * @type {string}
     * @memberof AgenticWorkflowDbModelsConnection
     */
    updatedBy?: string;
    /**
     * The date and time when it was last updated.
     * @type {string}
     * @memberof AgenticWorkflowDbModelsConnection
     */
    updatedAt?: string;
    /**
     * The workspace of the entity.
     * @type {string}
     * @memberof AgenticWorkflowDbModelsConnection
     */
    orgId?: string;
    /**
     * The name of the connection
     * @type {string}
     * @memberof AgenticWorkflowDbModelsConnection
     */
    name?: string;
    /**
     * The unique identifier of the app
     * @type {string}
     * @memberof AgenticWorkflowDbModelsConnection
     */
    appId?: string;
    /**
     * The version of the app
     * @type {string}
     * @memberof AgenticWorkflowDbModelsConnection
     */
    appVersion?: string;
    /**
     * The description of the connection
     * @type {string}
     * @memberof AgenticWorkflowDbModelsConnection
     */
    description?: string | null;
    /**
     * OAuth or API key authentication configuration
     * @type {OAuthCredentials | ApiKeyCredentials | BasicAuthCredentials | NoAuthCredentials}
     * @memberof AgenticWorkflowDbModelsConnection
     */
    credentials: OAuthCredentials | ApiKeyCredentials | BasicAuthCredentials | NoAuthCredentials;
    /**
     * Metadata for the connection
     * @type {object}
     * @memberof AgenticWorkflowDbModelsConnection
     */
    connectionMetaData?: object | null;
    /**
     * The unique identifier of the connection
     * @type {string}
     * @memberof AgenticWorkflowDbModelsConnection
     */
    id?: string;
}
/**
 *
 * @export
 * @interface AgenticWorkflowModelsBaseBaseResponse
 */
export interface AgenticWorkflowModelsBaseBaseResponse {
    /**
     * The message of the response
     * @type {string}
     * @memberof AgenticWorkflowModelsBaseBaseResponse
     */
    message?: string;
    /**
     * The status of the response
     * @type {string}
     * @memberof AgenticWorkflowModelsBaseBaseResponse
     */
    status?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum AggregationFormula {
    COUNT = "COUNT",
    SUM = "SUM",
    MEDIAN = "MEDIAN"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum AggregationPeriod {
    MONTHLY = "MONTHLY",
    WEEKLY = "WEEKLY",
    DAILY = "DAILY"
}
/**
 *
 * @export
 * @interface AnalyticsModelInput
 */
export interface AnalyticsModelInput {
    /**
     *
     * @type {SparrModelsAnalyticsConversationAnalyticsModel}
     * @memberof AnalyticsModelInput
     */
    conversation_analytics: SparrModelsAnalyticsConversationAnalyticsModel;
    /**
     *
     * @type {GoalsAnalyticsModel}
     * @memberof AnalyticsModelInput
     */
    goals_analytics: GoalsAnalyticsModel;
    /**
     *
     * @type {CoachAnalyticsModel}
     * @memberof AnalyticsModelInput
     */
    coach_analytics: CoachAnalyticsModel;
    /**
     *
     * @type {SystemMetrics}
     * @memberof AnalyticsModelInput
     */
    system_metrics: SystemMetrics | null;
    /**
     *
     * @type {any}
     * @memberof AnalyticsModelInput
     */
    weighted_scores: any | null;
}
/**
 *
 * @export
 * @interface AnalyticsModelOutput
 */
export interface AnalyticsModelOutput {
    /**
     *
     * @type {SparrModelsAnalyticsConversationAnalyticsModel}
     * @memberof AnalyticsModelOutput
     */
    conversation_analytics: SparrModelsAnalyticsConversationAnalyticsModel;
    /**
     *
     * @type {GoalsAnalyticsModel}
     * @memberof AnalyticsModelOutput
     */
    goals_analytics: GoalsAnalyticsModel;
    /**
     *
     * @type {CoachAnalyticsModel}
     * @memberof AnalyticsModelOutput
     */
    coach_analytics: CoachAnalyticsModel;
    /**
     *
     * @type {SystemMetrics}
     * @memberof AnalyticsModelOutput
     */
    system_metrics: SystemMetrics | null;
    /**
     *
     * @type {any}
     * @memberof AnalyticsModelOutput
     */
    weighted_scores: any | null;
}
/**
 * API key authentication configuration
 * @export
 * @interface ApiKeyAuth
 */
export interface ApiKeyAuth {
    /**
     * The type of authentication
     * @type {string}
     * @memberof ApiKeyAuth
     */
    authType?: ApiKeyAuthAuthTypeEnum;
}
/**
    * @export
    * @enum {string}
    */
export declare enum ApiKeyAuthAuthTypeEnum {
    Apikey = "apikey"
}
/**
 *
 * @export
 * @interface ApiKeyCredentials
 */
export interface ApiKeyCredentials {
    /**
     * Credential type identifier
     * @type {string}
     * @memberof ApiKeyCredentials
     */
    credentialsType?: ApiKeyCredentialsCredentialsTypeEnum;
    /**
     * The API key for the app
     * @type {string}
     * @memberof ApiKeyCredentials
     */
    apiKey: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum ApiKeyCredentialsCredentialsTypeEnum {
    Apikey = "apikey"
}
/**
 *
 * @export
 * @interface ApiKeyRequest
 */
export interface ApiKeyRequest {
    /**
     *
     * @type {string}
     * @memberof ApiKeyRequest
     */
    key_type?: string | null;
}
/**
 * App represents an integration that can be connected to perform actions and triggers
 * @export
 * @interface App
 */
export interface App {
    /**
     * The user who created.
     * @type {string}
     * @memberof App
     */
    createdBy?: string;
    /**
     * The date and time it was created.
     * @type {string}
     * @memberof App
     */
    createdAt?: string;
    /**
     * The user who last updated.
     * @type {string}
     * @memberof App
     */
    updatedBy?: string;
    /**
     * The date and time when it was last updated.
     * @type {string}
     * @memberof App
     */
    updatedAt?: string;
    /**
     * The workspace of the entity.
     * @type {string}
     * @memberof App
     */
    orgId?: string;
    /**
     * The name of the app
     * @type {string}
     * @memberof App
     */
    name?: string;
    /**
     * The description of the app
     * @type {string}
     * @memberof App
     */
    description?: string | null;
    /**
     * API Endpoint URL for the app
     * @type {string}
     * @memberof App
     */
    endpointUrl?: string | null;
    /**
     * URL to the app\'s logo image
     * @type {string}
     * @memberof App
     */
    logoUrl?: string | null;
    /**
     * Authentication configuration for the app
     * @type {Array<OAuth | ApiKeyAuth | BasicAuth | NoAuth>}
     * @memberof App
     */
    auth: Array<OAuth | ApiKeyAuth | BasicAuth | NoAuth>;
    /**
     * The version of the app
     * @type {string}
     * @memberof App
     */
    version?: string;
    /**
     * The unique identifier of the app
     * @type {string}
     * @memberof App
     */
    id?: string;
}
/**
 * AppAction represents an action that can be performed by an app
 * @export
 * @interface AppAction
 */
export interface AppAction {
    /**
     * The user who created.
     * @type {string}
     * @memberof AppAction
     */
    createdBy?: string;
    /**
     * The date and time it was created.
     * @type {string}
     * @memberof AppAction
     */
    createdAt?: string;
    /**
     * The user who last updated.
     * @type {string}
     * @memberof AppAction
     */
    updatedBy?: string;
    /**
     * The date and time when it was last updated.
     * @type {string}
     * @memberof AppAction
     */
    updatedAt?: string;
    /**
     * The workspace of the entity.
     * @type {string}
     * @memberof AppAction
     */
    orgId?: string;
    /**
     * The type of the step, can be either trigger or action
     * @type {AppActionType}
     * @memberof AppAction
     */
    actionType: AppActionType;
    /**
     * The name of the step. This name should be unique within the app
     * @type {string}
     * @memberof AppAction
     */
    name?: string;
    /**
     * The description of the step
     * @type {string}
     * @memberof AppAction
     */
    description?: string;
    /**
     * JSON Schema for the step data
     * @type {object}
     * @memberof AppAction
     */
    dataSchema: object;
    /**
     * JSON Schema for the UI representation
     * @type {object}
     * @memberof AppAction
     */
    uiSchema: object;
    /**
     * This represents how this action should be displayed in the UI
     * @type {UiNodeType}
     * @memberof AppAction
     */
    uiNodeType: UiNodeType;
    /**
     * The ID of the app that this action belongs to
     * @type {string}
     * @memberof AppAction
     */
    appId: string;
    /**
     * The version of the app that this action belongs to
     * @type {string}
     * @memberof AppAction
     */
    appVersion: string;
    /**
     * The unique identifier of the app action
     * @type {string}
     * @memberof AppAction
     */
    id?: string;
}
/**
 * App Action Model
 * @export
 * @interface AppActionEntity
 */
export interface AppActionEntity {
    /**
     * The type of the step, can be either trigger or action
     * @type {AppActionType}
     * @memberof AppActionEntity
     */
    actionType: AppActionType;
    /**
     * The name of the step. This name should be unique within the app
     * @type {string}
     * @memberof AppActionEntity
     */
    name?: string;
    /**
     * The description of the step
     * @type {string}
     * @memberof AppActionEntity
     */
    description?: string;
    /**
     * JSON Schema for the step data
     * @type {object}
     * @memberof AppActionEntity
     */
    dataSchema: object;
    /**
     * JSON Schema for the UI representation
     * @type {object}
     * @memberof AppActionEntity
     */
    uiSchema: object;
    /**
     * This represents how this action should be displayed in the UI
     * @type {UiNodeType}
     * @memberof AppActionEntity
     */
    uiNodeType: UiNodeType;
}
/**
 * Enum for step types
 * @export
 * @enum {string}
 */
export declare enum AppActionType {
    TRIGGER = "TRIGGER",
    ACTION = "ACTION"
}
/**
 * App DTO Model filled by user
 * @export
 * @interface AppEntity
 */
export interface AppEntity {
    /**
     * The name of the app
     * @type {string}
     * @memberof AppEntity
     */
    name?: string;
    /**
     * The description of the app
     * @type {string}
     * @memberof AppEntity
     */
    description?: string | null;
    /**
     * API Endpoint URL for the app
     * @type {string}
     * @memberof AppEntity
     */
    endpointUrl?: string | null;
    /**
     * URL to the app\'s logo image
     * @type {string}
     * @memberof AppEntity
     */
    logoUrl?: string | null;
    /**
     * Authentication configuration for the app
     * @type {Array<OAuth | ApiKeyAuth | BasicAuth | NoAuth>}
     * @memberof AppEntity
     */
    auth: Array<OAuth | ApiKeyAuth | BasicAuth | NoAuth>;
    /**
     * The version of the app
     * @type {string}
     * @memberof AppEntity
     */
    version?: string;
    /**
     * Array of available actions with their configurations
     * @type {Array<AppActionEntity>}
     * @memberof AppEntity
     */
    actions: Array<AppActionEntity>;
}
/**
 * Enum which stores the list of apps which are used to create the conversation
 * @export
 * @enum {string}
 */
export declare enum AppEnumInput {
    TRATA = "TRATA",
    TRATASPARR = "TRATA_SPARR",
    TRATASPARRV1 = "TRATA_SPARR_V1"
}
/**
 * Enum which stores the list of apps which are used to create the conversation
 * @export
 * @enum {string}
 */
export declare enum AppEnumOutput {
    TRATA = "TRATA",
    TRATASPARR = "TRATA_SPARR",
    TRATASPARRV1 = "TRATA_SPARR_V1"
}
/**
 *
 * @export
 * @interface AppResponse
 */
export interface AppResponse {
    /**
     *
     * @type {App}
     * @memberof AppResponse
     */
    app: App;
    /**
     *
     * @type {Array<AppAction>}
     * @memberof AppResponse
     */
    actions: Array<AppAction>;
}
/**
 *
 * @export
 * @interface AvailablePhoneNumber
 */
export interface AvailablePhoneNumber {
    /**
     *
     * @type {string}
     * @memberof AvailablePhoneNumber
     */
    phoneNumber: string;
    /**
     *
     * @type {string}
     * @memberof AvailablePhoneNumber
     */
    countryCode: string;
    /**
     *
     * @type {string}
     * @memberof AvailablePhoneNumber
     */
    locality: string | null;
    /**
     *
     * @type {string}
     * @memberof AvailablePhoneNumber
     */
    region: string | null;
}
/**
 *
 * @export
 * @interface BaseResponseInput
 */
export interface BaseResponseInput {
    /**
     * Address line 1
     * @type {string}
     * @memberof BaseResponseInput
     */
    message: string;
}
/**
 * Basic authentication configuration
 * @export
 * @interface BasicAuth
 */
export interface BasicAuth {
    /**
     * The type of authentication
     * @type {string}
     * @memberof BasicAuth
     */
    authType?: BasicAuthAuthTypeEnum;
}
/**
    * @export
    * @enum {string}
    */
export declare enum BasicAuthAuthTypeEnum {
    Basic = "basic"
}
/**
 *
 * @export
 * @interface BasicAuthCredentials
 */
export interface BasicAuthCredentials {
    /**
     * Credential type identifier
     * @type {string}
     * @memberof BasicAuthCredentials
     */
    credentialsType?: BasicAuthCredentialsCredentialsTypeEnum;
    /**
     * The username for the app
     * @type {string}
     * @memberof BasicAuthCredentials
     */
    username: string;
    /**
     * The password for the app
     * @type {string}
     * @memberof BasicAuthCredentials
     */
    password: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum BasicAuthCredentialsCredentialsTypeEnum {
    Basic = "basic"
}
/**
 *
 * @export
 * @interface BatchMetricsRequestsInput
 */
export interface BatchMetricsRequestsInput {
    /**
     *
     * @type {Array<MetricsRequestInput>}
     * @memberof BatchMetricsRequestsInput
     */
    requests: Array<MetricsRequestInput>;
}
/**
 *
 * @export
 * @interface BatchMetricsResponseInput
 */
export interface BatchMetricsResponseInput {
    /**
     *
     * @type {Array<MetricsResponseInput>}
     * @memberof BatchMetricsResponseInput
     */
    responses: Array<MetricsResponseInput>;
}
/**
 *
 * @export
 * @interface BodyCreateCustomerOrganizationV1
 */
export interface BodyCreateCustomerOrganizationV1 {
    /**
     *
     * @type {OrganizationInput}
     * @memberof BodyCreateCustomerOrganizationV1
     */
    org: OrganizationInput;
    /**
     *
     * @type {string}
     * @memberof BodyCreateCustomerOrganizationV1
     */
    adminUserName: string;
}
/**
 *
 * @export
 * @interface BodyCreateOrganizationV1
 */
export interface BodyCreateOrganizationV1 {
    /**
     *
     * @type {OrganizationInput}
     * @memberof BodyCreateOrganizationV1
     */
    org: OrganizationInput;
    /**
     *
     * @type {string}
     * @memberof BodyCreateOrganizationV1
     */
    adminUserName: string;
}
/**
 *
 * @export
 * @interface BodyCreateResellerOrganizationV1
 */
export interface BodyCreateResellerOrganizationV1 {
    /**
     *
     * @type {OrganizationInput}
     * @memberof BodyCreateResellerOrganizationV1
     */
    org: OrganizationInput;
    /**
     *
     * @type {string}
     * @memberof BodyCreateResellerOrganizationV1
     */
    adminUserName: string;
}
/**
 *
 * @export
 * @interface BodyUploadFileV1
 */
export interface BodyUploadFileV1 {
    /**
     *
     * @type {Array<any>}
     * @memberof BodyUploadFileV1
     */
    files: Array<any>;
}
/**
 *
 * @export
 * @interface BodyUploadFileV1WorkflowsWorkflowIdFilePost
 */
export interface BodyUploadFileV1WorkflowsWorkflowIdFilePost {
    /**
     *
     * @type {any}
     * @memberof BodyUploadFileV1WorkflowsWorkflowIdFilePost
     */
    file: any;
}
/**
 *
 * @export
 * @interface BodyUploadResellerFilesV1
 */
export interface BodyUploadResellerFilesV1 {
    /**
     *
     * @type {Array<any>}
     * @memberof BodyUploadResellerFilesV1
     */
    files: Array<any>;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum CallSentiment {
    Positive = "positive",
    Negative = "negative",
    Neutral = "neutral"
}
/**
 *
 * @export
 * @interface CoachAnalyticsModel
 */
export interface CoachAnalyticsModel {
    /**
     * Provide 2 to 3 straightforward examples of how the role player could have improved their handling of the conversation. Quote the exact words used by the role player and suggest an alternative response that better aligns with the intended goals. Additionally, specify which goal could have been better achieved with the improved response.
     * @type {Array<string>}
     * @memberof CoachAnalyticsModel
     */
    coaching_points?: Array<string> | null;
}
/**
 *
 * @export
 * @interface Comment
 */
export interface Comment {
    /**
     * Notes or comments to record
     * @type {string}
     * @memberof Comment
     */
    comment: string;
    /**
     * Star rating to record
     * @type {number}
     * @memberof Comment
     */
    rating: number;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum CommunicationStyle {
    Direct = "direct",
    Indirect = "indirect",
    Verbose = "verbose",
    Brief = "brief"
}
/**
 * Condition Model for branching/looping logic
 * @export
 * @interface Condition
 */
export interface Condition {
    /**
     * Condition expression to evaluate
     * @type {string}
     * @memberof Condition
     */
    when: string;
    /**
     * Next step ID if condition is true
     * @type {string}
     * @memberof Condition
     */
    stepId: string;
}
/**
 * Core Connection Model
 * @export
 * @interface ConnectionCore
 */
export interface ConnectionCore {
    /**
     * The name of the connection
     * @type {string}
     * @memberof ConnectionCore
     */
    name?: string;
    /**
     * The unique identifier of the app
     * @type {string}
     * @memberof ConnectionCore
     */
    appId?: string;
    /**
     * The version of the app
     * @type {string}
     * @memberof ConnectionCore
     */
    appVersion?: string;
    /**
     * The description of the connection
     * @type {string}
     * @memberof ConnectionCore
     */
    description?: string | null;
    /**
     * OAuth or API key authentication configuration
     * @type {OAuthCredentials | ApiKeyCredentials | BasicAuthCredentials | NoAuthCredentials}
     * @memberof ConnectionCore
     */
    credentials: OAuthCredentials | ApiKeyCredentials | BasicAuthCredentials | NoAuthCredentials;
    /**
     * Metadata for the connection
     * @type {object}
     * @memberof ConnectionCore
     */
    connectionMetaData?: object | null;
}
/**
 * This represents the connection between the user and the assistant
 * @export
 * @interface ConnectionOutput
 */
export interface ConnectionOutput {
    /**
     *
     * @type {string}
     * @memberof ConnectionOutput
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ConnectionOutput
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof ConnectionOutput
     */
    sourceName?: string;
    /**
     *
     * @type {string}
     * @memberof ConnectionOutput
     */
    sourceId?: string;
    /**
     *
     * @type {object}
     * @memberof ConnectionOutput
     */
    sourceProps?: object | null;
    /**
     *
     * @type {string}
     * @memberof ConnectionOutput
     */
    agentId?: string;
    /**
     *
     * @type {string}
     * @memberof ConnectionOutput
     */
    prospectId?: string | null;
    /**
     *
     * @type {string}
     * @memberof ConnectionOutput
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof ConnectionOutput
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof ConnectionOutput
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof ConnectionOutput
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @interface ConnectionSource
 */
export interface ConnectionSource {
    /**
     * Name of the source
     * @type {string}
     * @memberof ConnectionSource
     */
    sourceName?: ConnectionSourceSourceNameEnum;
    /**
     * Unique identifier for the source
     * @type {string}
     * @memberof ConnectionSource
     */
    sourceId: string;
    /**
     * Extra properties of source
     * @type {object}
     * @memberof ConnectionSource
     */
    sourceProps: object;
}
/**
    * @export
    * @enum {string}
    */
export declare enum ConnectionSourceSourceNameEnum {
    TWILIO = "TWILIO",
    PLIVO = "PLIVO",
    BROWSER = "BROWSER"
}
/**
 * Expected output of the post conversation task
 * @export
 * @interface ConversationAnalyticsModelInput
 */
export interface ConversationAnalyticsModelInput {
    /**
     * Summary of the conversation happened with important details on the conversation. The summary should be concise and to the point. It should contain the important details of the conversation like name, phone number, email, address and any other details shared by the user.
     * @type {string}
     * @memberof ConversationAnalyticsModelInput
     */
    summary: string | null;
    /**
     * List of action items and the next steps to be performed from the conversation details.
     * @type {Array<string>}
     * @memberof ConversationAnalyticsModelInput
     */
    action_items: Array<string> | null;
    /**
     * If the user has given consent to store the audio of the conversation. Unless the user explicitly says yes, this should be false.
     * @type {boolean}
     * @memberof ConversationAnalyticsModelInput
     */
    is_audio_consent_given: boolean;
    /**
     * Extracted email address of the caller from the conversation details. Email should be a valid email address format
     * @type {string}
     * @memberof ConversationAnalyticsModelInput
     */
    email_address_of_caller: string | null;
    /**
     * Extracted name of the caller from the conversation details.
     * @type {string}
     * @memberof ConversationAnalyticsModelInput
     */
    name_of_caller: string | null;
    /**
     * Extracted phone number of the caller from the conversation details.
     * @type {string}
     * @memberof ConversationAnalyticsModelInput
     */
    phone_number_of_caller: string | null;
    /**
     * Extracted address of the caller from the conversation details.
     * @type {string}
     * @memberof ConversationAnalyticsModelInput
     */
    address_of_caller: string | null;
    /**
     * Sentiment of the caller based on the conversation details.
     * @type {CallSentiment}
     * @memberof ConversationAnalyticsModelInput
     */
    sentiment_of_caller: CallSentiment;
    /**
     * Status of the prospect after this conversation.
     * @type {ProspectStatus}
     * @memberof ConversationAnalyticsModelInput
     */
    prospectStatus: ProspectStatus | null;
}
/**
 *
 * @export
 * @interface ConversationEndEvent
 */
export interface ConversationEndEvent {
    /**
     *
     * @type {string}
     * @memberof ConversationEndEvent
     */
    timestamp: string;
    /**
     *
     * @type {string}
     * @memberof ConversationEndEvent
     */
    version?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationEndEvent
     */
    event_name: string;
    /**
     *
     * @type {ConversationEndEventPayload}
     * @memberof ConversationEndEvent
     */
    payload?: ConversationEndEventPayload;
}
/**
 *
 * @export
 * @interface ConversationEndEventPayload
 */
export interface ConversationEndEventPayload {
    /**
     *
     * @type {ConversationOutput}
     * @memberof ConversationEndEventPayload
     */
    conversation: ConversationOutput;
}
/**
 * Model which stores the evaluation metrics for the conversation
 * @export
 * @interface ConversationEvaluation
 */
export interface ConversationEvaluation {
    /**
     *
     * @type {string}
     * @memberof ConversationEvaluation
     */
    aiEvaluationSummary: string | null;
    /**
     *
     * @type {Array<ConversationEvaluationData>}
     * @memberof ConversationEvaluation
     */
    aiEvaluations: Array<ConversationEvaluationData>;
    /**
     *
     * @type {string | Array<string>}
     * @memberof ConversationEvaluation
     */
    aiWhatWentWell: string | Array<string> | null;
    /**
     *
     * @type {string | Array<string>}
     * @memberof ConversationEvaluation
     */
    aiWhatCanBeImproved: string | Array<string> | null;
    /**
     *
     * @type {string}
     * @memberof ConversationEvaluation
     */
    humanEvaluationSummary: string | null;
    /**
     *
     * @type {Array<ConversationEvaluationData>}
     * @memberof ConversationEvaluation
     */
    humanEvaluations: Array<ConversationEvaluationData> | null;
    /**
     *
     * @type {string | Array<string>}
     * @memberof ConversationEvaluation
     */
    humanWhatWentWell: string | Array<string> | null;
    /**
     *
     * @type {string | Array<string>}
     * @memberof ConversationEvaluation
     */
    humanWhatCanBeImproved: string | Array<string> | null;
}
/**
 * Model which stores the result of the evaluation metric for a conversation
 * @export
 * @interface ConversationEvaluationData
 */
export interface ConversationEvaluationData {
    /**
     * Name of the evaluation metric
     * @type {string}
     * @memberof ConversationEvaluationData
     */
    name?: string;
    /**
     * Description about the evaluation metric
     * @type {string}
     * @memberof ConversationEvaluationData
     */
    description?: string;
    /**
     * Value of the evaluation metric
     * @type {string}
     * @memberof ConversationEvaluationData
     */
    value?: string;
}
/**
 * Model which stores the details of each evaluation metric
 * @export
 * @interface ConversationEvaluationMetric
 */
export interface ConversationEvaluationMetric {
    /**
     * Name of the evaluation metric
     * @type {string}
     * @memberof ConversationEvaluationMetric
     */
    name?: string;
    /**
     * Description about the evaluation metric
     * @type {string}
     * @memberof ConversationEvaluationMetric
     */
    description?: string;
}
/**
 * Model which stores all the evaluation metrics which is used to evaluate the conversation
 * @export
 * @interface ConversationEvaluationMetrics
 */
export interface ConversationEvaluationMetrics {
    /**
     *
     * @type {Array<ConversationEvaluationMetric>}
     * @memberof ConversationEvaluationMetrics
     */
    qualitativeMetrics: Array<ConversationEvaluationMetric> | null;
    /**
     *
     * @type {Array<ConversationEvaluationMetric>}
     * @memberof ConversationEvaluationMetrics
     */
    quantitativeMetrics: Array<ConversationEvaluationMetric> | null;
}
/**
 * Any feedback added to the conversation by business is managed here.
 * @export
 * @interface ConversationFeedback
 */
export interface ConversationFeedback {
    /**
     *
     * @type {string}
     * @memberof ConversationFeedback
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationFeedback
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationFeedback
     */
    conversationId?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationFeedback
     */
    feedback?: string;
    /**
     *
     * @type {number}
     * @memberof ConversationFeedback
     */
    rating?: number;
    /**
     *
     * @type {string}
     * @memberof ConversationFeedback
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationFeedback
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationFeedback
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationFeedback
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @interface ConversationInput
 */
export interface ConversationInput {
    /**
     * Source from where the conversation originated. This can be device id, phone number, etc.
     * @type {string}
     * @memberof ConversationInput
     */
    source: string;
    /**
     * Type of the conversation source
     * @type {ConversationSourceType}
     * @memberof ConversationInput
     */
    sourceType: ConversationSourceType;
    /**
     * AI agent which handled the conversation
     * @type {string}
     * @memberof ConversationInput
     */
    agentId: string;
    /**
     * App in which the conversation is created
     * @type {AppEnumInput}
     * @memberof ConversationInput
     */
    app?: AppEnumInput | null;
    /**
     * URL to the full transcript of the conversation
     * @type {Array<DialogLine>}
     * @memberof ConversationInput
     */
    transcriptText?: Array<DialogLine> | null;
    /**
     * Summary of the conversation
     * @type {string}
     * @memberof ConversationInput
     */
    transcriptSummary?: string | null;
    /**
     * URL to the recording of the conversation
     * @type {string}
     * @memberof ConversationInput
     */
    transcriptRecordingUrl?: string | null;
    /**
     * Start time of the conversation
     * @type {string}
     * @memberof ConversationInput
     */
    timestampStart: string;
    /**
     * End time of the conversation
     * @type {string}
     * @memberof ConversationInput
     */
    timestampEnd?: string | null;
    /**
     * Analytics of the conversation
     * @type {ConversationAnalyticsModelInput}
     * @memberof ConversationInput
     */
    conversationAnalytics?: ConversationAnalyticsModelInput | null;
    /**
     * Comments from the admin on the conversation
     * @type {Array<Comment>}
     * @memberof ConversationInput
     */
    adminComments?: Array<Comment> | null;
    /**
     * Stats of the conversation
     * @type {ConversationStatsModel}
     * @memberof ConversationInput
     */
    conversationStats?: ConversationStatsModel | null;
    /**
     * Evaluation of the conversation
     * @type {ConversationEvaluation}
     * @memberof ConversationInput
     */
    evaluation?: ConversationEvaluation | null;
}
/**
 * Any conversation happening between the end user and assistant is stored in this table
 * @export
 * @interface ConversationOutput
 */
export interface ConversationOutput {
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    prospectId?: string | null;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    source?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    sourceType?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    aiAgentId?: string;
    /**
     *
     * @type {Array<DialogLine>}
     * @memberof ConversationOutput
     */
    transcriptText?: Array<DialogLine> | null;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    transcriptSummary?: string | null;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    transcriptRecordingUrl?: string | null;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    timestampStart?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    timestampEnd?: string | null;
    /**
     * Analytics of the conversation
     * @type {ConversationAnalyticsModelInput}
     * @memberof ConversationOutput
     */
    conversationAnalytics?: ConversationAnalyticsModelInput | null;
    /**
     * Stats of the conversation
     * @type {ConversationStatsModel}
     * @memberof ConversationOutput
     */
    conversationStats?: ConversationStatsModel | null;
    /**
     * Application under which the conversation is created
     * @type {AppEnumOutput}
     * @memberof ConversationOutput
     */
    app?: AppEnumOutput | null;
    /**
     * Evaluation of the conversation
     * @type {ConversationEvaluation}
     * @memberof ConversationOutput
     */
    evaluation?: ConversationEvaluation | null;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    status: string;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum ConversationSourceType {
    BROWSER = "BROWSER",
    TWILIO = "TWILIO",
    PLIVO = "PLIVO"
}
/**
 *
 * @export
 * @interface ConversationStartEvent
 */
export interface ConversationStartEvent {
    /**
     *
     * @type {string}
     * @memberof ConversationStartEvent
     */
    timestamp: string;
    /**
     *
     * @type {string}
     * @memberof ConversationStartEvent
     */
    version?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationStartEvent
     */
    event_name: string;
    /**
     *
     * @type {ConversationStartEventPayload}
     * @memberof ConversationStartEvent
     */
    payload?: ConversationStartEventPayload;
}
/**
 *
 * @export
 * @interface ConversationStartEventPayload
 */
export interface ConversationStartEventPayload {
    /**
     *
     * @type {string}
     * @memberof ConversationStartEventPayload
     */
    type: ConversationStartEventPayloadTypeEnum;
    /**
     *
     * @type {string}
     * @memberof ConversationStartEventPayload
     */
    connection_id: string;
    /**
     *
     * @type {string}
     * @memberof ConversationStartEventPayload
     */
    conversation_id: string;
    /**
     *
     * @type {string}
     * @memberof ConversationStartEventPayload
     */
    ai_agent_id: string;
    /**
     *
     * @type {string}
     * @memberof ConversationStartEventPayload
     */
    org_id: string;
    /**
     *
     * @type {object}
     * @memberof ConversationStartEventPayload
     */
    caller_id: object | null;
}
/**
    * @export
    * @enum {string}
    */
export declare enum ConversationStartEventPayloadTypeEnum {
    ConversationStart = "conversation_start"
}
/**
 *
 * @export
 * @interface ConversationStatsModel
 */
export interface ConversationStatsModel {
    /**
     * Total number of dialogs in the conversation
     * @type {number}
     * @memberof ConversationStatsModel
     */
    total_dialog: number;
    /**
     * Ratio of Agent dialogs to total dialogs
     * @type {number}
     * @memberof ConversationStatsModel
     */
    agent_dialog_ratio: number;
    /**
     * Ratio of User dialogs to total dialogs
     * @type {number}
     * @memberof ConversationStatsModel
     */
    user_dialog_ratio: number;
}
/**
 *
 * @export
 * @interface CountryInfo
 */
export interface CountryInfo {
    /**
     *
     * @type {string}
     * @memberof CountryInfo
     */
    code: string;
    /**
     *
     * @type {string}
     * @memberof CountryInfo
     */
    name: string;
}
/**
 * Credits details of the business
 * @export
 * @interface Credit
 */
export interface Credit {
    /**
     *
     * @type {string}
     * @memberof Credit
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Credit
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof Credit
     */
    creditTypeName?: string;
    /**
     *
     * @type {string}
     * @memberof Credit
     */
    totalAvailable?: string;
    /**
     *
     * @type {string}
     * @memberof Credit
     */
    consumed?: string;
    /**
     *
     * @type {string}
     * @memberof Credit
     */
    durationStart?: string;
    /**
     *
     * @type {string}
     * @memberof Credit
     */
    durationEnd?: string;
}
/**
 *
 * @export
 * @interface CreditRequest
 */
export interface CreditRequest {
    /**
     * Credit type
     * @type {CreditType}
     * @memberof CreditRequest
     */
    creditTypeName: CreditType;
    /**
     * Credit value
     * @type {string}
     * @memberof CreditRequest
     */
    creditValue: string;
    /**
     * Start date
     * @type {string}
     * @memberof CreditRequest
     */
    startDate: string;
    /**
     * End date
     * @type {string}
     * @memberof CreditRequest
     */
    endDate: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum CreditType {
    PhoneNumbers = "phone_numbers",
    CallSeconds = "call_seconds"
}
/**
 *
 * @export
 * @interface CustomerBranding
 */
export interface CustomerBranding {
    /**
     * Name of the organization
     * @type {string}
     * @memberof CustomerBranding
     */
    name?: string | null;
    /**
     * Brand color of the organization
     * @type {string}
     * @memberof CustomerBranding
     */
    brandColor?: string | null;
    /**
     * Button color of the organization
     * @type {string}
     * @memberof CustomerBranding
     */
    buttonColor?: string | null;
    /**
     * Secondary color of the organization
     * @type {string}
     * @memberof CustomerBranding
     */
    secondaryColor?: string | null;
    /**
     * Text color of the organization
     * @type {string}
     * @memberof CustomerBranding
     */
    textColor?: string | null;
    /**
     * Favicon of the organization
     * @type {string}
     * @memberof CustomerBranding
     */
    favicon?: string | null;
    /**
     * Favicon URL of the organization
     * @type {string}
     * @memberof CustomerBranding
     */
    faviconUrl?: string | null;
    /**
     * Logo of the organization
     * @type {string}
     * @memberof CustomerBranding
     */
    logo?: string | null;
    /**
     * Logo URL of the organization
     * @type {string}
     * @memberof CustomerBranding
     */
    logoUrl?: string | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum DecisionMakingStyle {
    Logical = "logical",
    Emotional = "emotional",
    Impulsive = "impulsive",
    Hesitant = "hesitant"
}
/**
 *
 * @export
 * @interface DialogLine
 */
export interface DialogLine {
    /**
     *
     * @type {string}
     * @memberof DialogLine
     */
    speaker: DialogLineSpeakerEnum;
    /**
     *
     * @type {string}
     * @memberof DialogLine
     */
    message: string;
    /**
     *
     * @type {string}
     * @memberof DialogLine
     */
    timestamp: string;
    /**
     *
     * @type {string}
     * @memberof DialogLine
     */
    message_id: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum DialogLineSpeakerEnum {
    USER = "USER",
    AI = "AI",
    TOOL = "TOOL",
    AITOOLREQUEST = "AI - TOOL REQUEST"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum EngagementLevel {
    HighlyEngaged = "highly engaged",
    Distracted = "distracted",
    Uninterested = "uninterested"
}
/**
 *
 * @export
 * @interface ExternalReference
 */
export interface ExternalReference {
    /**
     * External service provider name
     * @type {string}
     * @memberof ExternalReference
     */
    providerName: string;
    /**
     * External service identifier
     * @type {string}
     * @memberof ExternalReference
     */
    id: string;
    /**
     * Props for the external reference
     * @type {object}
     * @memberof ExternalReference
     */
    providerProps?: object | null;
}
/**
 *
 * @export
 * @interface ExternalServicePorviderInput
 */
export interface ExternalServicePorviderInput {
    /**
     * External service provider name
     * @type {string}
     * @memberof ExternalServicePorviderInput
     */
    providerName: string;
    /**
     * External service identifier
     * @type {string}
     * @memberof ExternalServicePorviderInput
     */
    id: string;
    /**
     * Props for the external service provider
     * @type {object}
     * @memberof ExternalServicePorviderInput
     */
    providerProps: object | null;
}
/**
 *
 * @export
 * @interface ExternalServicePorviderOutput
 */
export interface ExternalServicePorviderOutput {
    /**
     *
     * @type {string}
     * @memberof ExternalServicePorviderOutput
     */
    providerName: string;
    /**
     *
     * @type {string}
     * @memberof ExternalServicePorviderOutput
     */
    id: string;
    /**
     *
     * @type {object}
     * @memberof ExternalServicePorviderOutput
     */
    providerProps: object | null;
}
/**
 * Feedback represents a feedback that can be given to a persona
 * @export
 * @interface Feedback
 */
export interface Feedback {
    /**
     * The user who created.
     * @type {string}
     * @memberof Feedback
     */
    createdBy?: string;
    /**
     * The date and time it was created.
     * @type {string}
     * @memberof Feedback
     */
    createdAt?: string;
    /**
     * The user who last updated.
     * @type {string}
     * @memberof Feedback
     */
    updatedBy?: string;
    /**
     * The date and time when it was last updated.
     * @type {string}
     * @memberof Feedback
     */
    updatedAt?: string;
    /**
     * The workspace of the entity.
     * @type {string}
     * @memberof Feedback
     */
    orgId?: string;
    /**
     * The ID of the user who made the call
     * @type {string}
     * @memberof Feedback
     */
    userId: string;
    /**
     * The name of the user who made the call
     * @type {string}
     * @memberof Feedback
     */
    userName: string | null;
    /**
     * The ID of the AI agent
     * @type {string}
     * @memberof Feedback
     */
    aiAgentId: string | null;
    /**
     * The ID of the scenario
     * @type {string}
     * @memberof Feedback
     */
    scenarioId: string;
    /**
     * The ID of the persona
     * @type {string}
     * @memberof Feedback
     */
    personaId: string;
    /**
     * The start timestamp of the conversation
     * @type {string}
     * @memberof Feedback
     */
    startTimestamp: string;
    /**
     * The end timestamp of the conversation
     * @type {string}
     * @memberof Feedback
     */
    endTimestamp: string;
    /**
     * The top insights from the conversation
     * @type {Array<string>}
     * @memberof Feedback
     */
    topInsights: Array<string>;
    /**
     * The URL of the recording of the conversation
     * @type {string}
     * @memberof Feedback
     */
    recordingUrl: string;
    /**
     * The transcript of the conversation
     * @type {Array<SparrDialogLine>}
     * @memberof Feedback
     */
    transcript: Array<SparrDialogLine>;
    /**
     * The analytics of the conversation
     * @type {AnalyticsModelOutput}
     * @memberof Feedback
     */
    analytics: AnalyticsModelOutput;
    /**
     * The overall score of the conversation out of 100 based on the weightage of each goal
     * @type {number}
     * @memberof Feedback
     */
    overallScore: number;
    /**
     * The status of the feedback
     * @type {string}
     * @memberof Feedback
     */
    status?: string;
    /**
     * The unique identifier of the feedback
     * @type {string}
     * @memberof Feedback
     */
    id?: string;
    /**
     * The version of the feedback
     * @type {number}
     * @memberof Feedback
     */
    version?: number;
}
/**
 *
 * @export
 * @interface FeedbackCore
 */
export interface FeedbackCore {
    /**
     * The ID of the user who made the call
     * @type {string}
     * @memberof FeedbackCore
     */
    userId: string;
    /**
     * The name of the user who made the call
     * @type {string}
     * @memberof FeedbackCore
     */
    userName: string | null;
    /**
     * The ID of the AI agent
     * @type {string}
     * @memberof FeedbackCore
     */
    aiAgentId: string | null;
    /**
     * The ID of the scenario
     * @type {string}
     * @memberof FeedbackCore
     */
    scenarioId: string;
    /**
     * The ID of the persona
     * @type {string}
     * @memberof FeedbackCore
     */
    personaId: string;
    /**
     * The start timestamp of the conversation
     * @type {string}
     * @memberof FeedbackCore
     */
    startTimestamp: string;
    /**
     * The end timestamp of the conversation
     * @type {string}
     * @memberof FeedbackCore
     */
    endTimestamp: string;
    /**
     * The top insights from the conversation
     * @type {Array<string>}
     * @memberof FeedbackCore
     */
    topInsights: Array<string>;
    /**
     * The URL of the recording of the conversation
     * @type {string}
     * @memberof FeedbackCore
     */
    recordingUrl: string;
    /**
     * The transcript of the conversation
     * @type {Array<SparrDialogLine>}
     * @memberof FeedbackCore
     */
    transcript: Array<SparrDialogLine>;
    /**
     * The analytics of the conversation
     * @type {AnalyticsModelInput}
     * @memberof FeedbackCore
     */
    analytics: AnalyticsModelInput;
    /**
     * The overall score of the conversation out of 100 based on the weightage of each goal
     * @type {number}
     * @memberof FeedbackCore
     */
    overallScore: number;
    /**
     * The status of the feedback
     * @type {string}
     * @memberof FeedbackCore
     */
    status?: string;
}
/**
 * Stores the map of file id with respective file URL in storage manager
 * @export
 * @interface Files
 */
export interface Files {
    /**
     *
     * @type {string}
     * @memberof Files
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Files
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof Files
     */
    fileName?: string;
    /**
     *
     * @type {string}
     * @memberof Files
     */
    fileUrl?: string;
    /**
     *
     * @type {string}
     * @memberof Files
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof Files
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof Files
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof Files
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @interface FillerWords
 */
export interface FillerWords {
    /**
     *
     * @type {any}
     * @memberof FillerWords
     */
    words: any | null;
    /**
     *
     * @type {number}
     * @memberof FillerWords
     */
    total: number | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum FrustrationTolerance {
    QuickToAnger = "quick to anger",
    Understanding = "understanding",
    Neutral = "neutral"
}
/**
 *
 * @export
 * @interface Goal
 */
export interface Goal {
    /**
     * The name of the goal
     * @type {string}
     * @memberof Goal
     */
    name: string;
    /**
     * The description of the goal
     * @type {string}
     * @memberof Goal
     */
    description: string;
    /**
     * The weightage of the goal in percentage
     * @type {number}
     * @memberof Goal
     */
    weightage: number;
}
/**
 *
 * @export
 * @interface GoalsAnalyticsModel
 */
export interface GoalsAnalyticsModel {
    /**
     *
     * @type {object}
     * @memberof GoalsAnalyticsModel
     */
    goals: object | null;
}
/**
 * Guest users who are not verified by Trata yet
 * @export
 * @interface GuestInput
 */
export interface GuestInput {
    /**
     *
     * @type {string}
     * @memberof GuestInput
     */
    email: string;
    /**
     *
     * @type {string}
     * @memberof GuestInput
     */
    role: string;
}
/**
 * Guest users who are not verified by Trata yet. They will not be able to use Trata until they are verified.
 * @export
 * @interface GuestOutput
 */
export interface GuestOutput {
    /**
     *
     * @type {string}
     * @memberof GuestOutput
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof GuestOutput
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof GuestOutput
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof GuestOutput
     */
    role?: string;
    /**
     *
     * @type {boolean}
     * @memberof GuestOutput
     */
    isEmailVerified?: boolean;
    /**
     *
     * @type {string}
     * @memberof GuestOutput
     */
    last_sent_date?: string;
    /**
     *
     * @type {string}
     * @memberof GuestOutput
     */
    guestInviteCode?: string | null;
    /**
     *
     * @type {number}
     * @memberof GuestOutput
     */
    sent_count?: number;
    /**
     *
     * @type {string}
     * @memberof GuestOutput
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof GuestOutput
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof GuestOutput
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof GuestOutput
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     *
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    detail?: Array<ValidationError>;
}
/**
 * Reference to all business knowledge base will be stored in Hive
 * @export
 * @interface Hive
 */
export interface Hive {
    /**
     *
     * @type {string}
     * @memberof Hive
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Hive
     */
    orgId?: string;
    /**
     *
     * @type {HiveContentOutput}
     * @memberof Hive
     */
    content: HiveContentOutput;
    /**
     *
     * @type {string}
     * @memberof Hive
     */
    status: string;
    /**
     *
     * @type {string}
     * @memberof Hive
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof Hive
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof Hive
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof Hive
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @interface HiveContentInput
 */
export interface HiveContentInput {
    /**
     *
     * @type {HiveType}
     * @memberof HiveContentInput
     */
    hiveType: HiveType;
    /**
     * URL of the content
     * @type {string}
     * @memberof HiveContentInput
     */
    url?: string | null;
    /**
     * List of file ids to be referenced for the hive
     * @type {Array<string>}
     * @memberof HiveContentInput
     */
    file_ids?: Array<string> | null;
    /**
     * To recursively crawl child pages, add this as props {\"crawl_child_pages\": true},  \"depth\": \"3\"
     * @type {object}
     * @memberof HiveContentInput
     */
    hiveProps?: object | null;
}
/**
 *
 * @export
 * @interface HiveContentOutput
 */
export interface HiveContentOutput {
    /**
     *
     * @type {HiveType}
     * @memberof HiveContentOutput
     */
    hiveType: HiveType;
    /**
     * URL of the content
     * @type {string}
     * @memberof HiveContentOutput
     */
    url?: string | null;
    /**
     * List of files to be referenced for the hive
     * @type {Array<Files>}
     * @memberof HiveContentOutput
     */
    files?: Array<Files> | null;
    /**
     * To recursively crawl child pages, add this as props {\"crawl_child_pages\": true},  \"depth\": \"3\"
     * @type {object}
     * @memberof HiveContentOutput
     */
    hiveProps?: object | null;
    /**
     * To add any internal props, add this as props {\"last_crawl_time\": \"123123123123\"}
     * @type {object}
     * @memberof HiveContentOutput
     */
    internalProps?: object | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum HiveType {
    WEBSITE = "WEBSITE",
    GOOGLEDOCS = "GOOGLE_DOCS",
    DOCS = "DOCS",
    TRANSCRIPTS = "TRANSCRIPTS"
}
/**
 *
 * @export
 * @interface HttpActionEndpoint
 */
export interface HttpActionEndpoint {
    /**
     * Action endpoint URL
     * @type {string}
     * @memberof HttpActionEndpoint
     */
    url: string;
    /**
     * Method to be used for invoking the endpoint
     * @type {string}
     * @memberof HttpActionEndpoint
     */
    method?: HttpActionEndpointMethodEnum;
    /**
     * Headers for the endpoint
     * @type {object}
     * @memberof HttpActionEndpoint
     */
    headers?: object | null;
    /**
     * Payload for the endpoint
     * @type {object}
     * @memberof HttpActionEndpoint
     */
    payload?: object | null;
}
/**
    * @export
    * @enum {string}
    */
export declare enum HttpActionEndpointMethodEnum {
    GET = "GET",
    POST = "POST"
}
/**
 *
 * @export
 * @interface IntelligenceProvider
 */
export interface IntelligenceProvider {
    /**
     *
     * @type {string}
     * @memberof IntelligenceProvider
     */
    providerName?: string | null;
    /**
     *
     * @type {string}
     * @memberof IntelligenceProvider
     */
    model?: string | null;
    /**
     *
     * @type {object}
     * @memberof IntelligenceProvider
     */
    providerProps?: object | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum InteractionTone {
    Professional = "professional",
    Casual = "casual",
    Friendly = "friendly",
    Authoritative = "authoritative"
}
/**
 * Internal action endpoint to be used for calling the action inside the module. Not used by external users
 * @export
 * @interface InternalActionEndpoint
 */
export interface InternalActionEndpoint {
    /**
     * Module where the action is defined
     * @type {string}
     * @memberof InternalActionEndpoint
     */
    module: string;
    /**
     * Function to be called inside the module
     * @type {string}
     * @memberof InternalActionEndpoint
     */
    _function: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum Language {
    English = "English",
    Spanish = "Spanish",
    Hindi = "Hindi"
}
/**
 *
 * @export
 * @interface LanguageAccentCombo
 */
export interface LanguageAccentCombo {
    /**
     *
     * @type {Language}
     * @memberof LanguageAccentCombo
     */
    language: Language;
    /**
     *
     * @type {Accent}
     * @memberof LanguageAccentCombo
     */
    accent: Accent;
}
/**
 *
 * @export
 * @interface LongestMonologue
 */
export interface LongestMonologue {
    /**
     *
     * @type {string}
     * @memberof LongestMonologue
     */
    message: string;
    /**
     *
     * @type {number}
     * @memberof LongestMonologue
     */
    start_at_seconds: number;
    /**
     *
     * @type {number}
     * @memberof LongestMonologue
     */
    end_at_seconds: number;
    /**
     *
     * @type {number}
     * @memberof LongestMonologue
     */
    duration: number;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum MetricNameInput {
    CALLS = "CALLS",
    CALLDURATION = "CALL_DURATION",
    SPARRCALLS = "SPARR_CALLS",
    SPARRCALLDURATION = "SPARR_CALL_DURATION",
    APPOINTMENTSCHEDULED = "APPOINTMENT_SCHEDULED",
    PROSPECTS = "PROSPECTS",
    INTERESTED = "INTERESTED",
    NOTINTERESTED = "NOT_INTERESTED"
}
/**
 *
 * @export
 * @interface MetricResponseDataPoint
 */
export interface MetricResponseDataPoint {
    /**
     * Timestamp of the data point
     * @type {string}
     * @memberof MetricResponseDataPoint
     */
    timestamp: string;
    /**
     * Value which will be a string representation of integer or floating number
     * @type {string}
     * @memberof MetricResponseDataPoint
     */
    value: string;
}
/**
 *
 * @export
 * @interface MetricsRequestInput
 */
export interface MetricsRequestInput {
    /**
     * Unique identifier for the metric request. This can be helped to co-relate the request and response
     * @type {string}
     * @memberof MetricsRequestInput
     */
    id: string;
    /**
     * Name of the metric
     * @type {MetricNameInput}
     * @memberof MetricsRequestInput
     */
    name: MetricNameInput;
    /**
     * Start date to get metric request
     * @type {string}
     * @memberof MetricsRequestInput
     */
    fromDate: string;
    /**
     * End date until get metric request
     * @type {string}
     * @memberof MetricsRequestInput
     */
    toDate: string;
    /**
     * Aggregation period for the metric request
     * @type {AggregationPeriod}
     * @memberof MetricsRequestInput
     */
    aggregationPeriod: AggregationPeriod;
    /**
     * Aggregation formula for the metric request
     * @type {AggregationFormula}
     * @memberof MetricsRequestInput
     */
    aggregationFormula: AggregationFormula;
}
/**
 *
 * @export
 * @interface MetricsResponseInput
 */
export interface MetricsResponseInput {
    /**
     * Unique identifier for the metric response. This will help co-relate the request and response
     * @type {string}
     * @memberof MetricsResponseInput
     */
    id: string;
    /**
     * Name of the metric
     * @type {MetricNameInput}
     * @memberof MetricsResponseInput
     */
    name: MetricNameInput;
    /**
     * List of data points for the metric response
     * @type {Array<MetricResponseDataPoint>}
     * @memberof MetricsResponseInput
     */
    datapoints: Array<MetricResponseDataPoint>;
}
/**
 *
 * @export
 * @interface Mission
 */
export interface Mission {
    /**
     * Full prompt instructions for LLM model
     * @type {string}
     * @memberof Mission
     */
    prompt?: string | null;
    /**
     * Objective of the mission
     * @type {string}
     * @memberof Mission
     */
    objective?: string | null;
    /**
     * Greeting message to be read by the AI agent
     * @type {string}
     * @memberof Mission
     */
    greeting: string | null;
    /**
     * Sequence of actions to be performed by the AI agent during the conversation.
     * @type {Array<Sequence>}
     * @memberof Mission
     */
    sequence?: Array<Sequence> | null;
    /**
     * Conclusion message to be read by the AI agent
     * @type {string}
     * @memberof Mission
     */
    farewell?: string | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum NegotiationStyle {
    HardBargainer = "hard bargainer",
    FriendlyNegotiator = "friendly negotiator",
    NonNegotiator = "non-negotiator"
}
/**
 * Defines how to determine the next step
 * @export
 * @interface NextStepResolver
 */
export interface NextStepResolver {
    /**
     * Array of conditions to evaluate
     * @type {Array<Condition>}
     * @memberof NextStepResolver
     */
    conditions?: Array<Condition> | null;
    /**
     * Direct next step ID
     * @type {string}
     * @memberof NextStepResolver
     */
    nextStepId?: string | null;
}
/**
 * No authentication configuration
 * @export
 * @interface NoAuth
 */
export interface NoAuth {
    /**
     * The type of authentication
     * @type {string}
     * @memberof NoAuth
     */
    authType?: NoAuthAuthTypeEnum;
}
/**
    * @export
    * @enum {string}
    */
export declare enum NoAuthAuthTypeEnum {
    Noauth = "noauth"
}
/**
 *
 * @export
 * @interface NoAuthCredentials
 */
export interface NoAuthCredentials {
    /**
     * Credential type identifier
     * @type {string}
     * @memberof NoAuthCredentials
     */
    credentialsType?: NoAuthCredentialsCredentialsTypeEnum;
}
/**
    * @export
    * @enum {string}
    */
export declare enum NoAuthCredentialsCredentialsTypeEnum {
    Noauth = "noauth"
}
/**
 *
 * @export
 * @interface NumberPurchaseRequest
 */
export interface NumberPurchaseRequest {
    /**
     *
     * @type {string}
     * @memberof NumberPurchaseRequest
     */
    countryCode: string;
    /**
     *
     * @type {string}
     * @memberof NumberPurchaseRequest
     */
    phoneNumber: string;
}
/**
 * OAuth authentication configuration
 * @export
 * @interface OAuth
 */
export interface OAuth {
    /**
     * The type of authentication
     * @type {string}
     * @memberof OAuth
     */
    authType?: OAuthAuthTypeEnum;
    /**
     * The client ID for the OAuth app
     * @type {string}
     * @memberof OAuth
     */
    clientId: string;
    /**
     * The client secret for the OAuth app
     * @type {string}
     * @memberof OAuth
     */
    clientSecret: string;
    /**
     * The redirect URI for the OAuth app
     * @type {string}
     * @memberof OAuth
     */
    redirectUri: string;
    /**
     * The scopes for the OAuth app
     * @type {Array<string>}
     * @memberof OAuth
     */
    scopes?: Array<string> | null;
    /**
     * The authorization URL for the OAuth app
     * @type {string}
     * @memberof OAuth
     */
    authUrl: string;
    /**
     * The token URL for the OAuth app
     * @type {string}
     * @memberof OAuth
     */
    tokenUrl: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum OAuthAuthTypeEnum {
    Oauth = "oauth"
}
/**
 *
 * @export
 * @interface OAuthCredentials
 */
export interface OAuthCredentials {
    /**
     * Credential type identifier
     * @type {string}
     * @memberof OAuthCredentials
     */
    credentialsType?: OAuthCredentialsCredentialsTypeEnum;
    /**
     * The code for the OAuth app
     * @type {string}
     * @memberof OAuthCredentials
     */
    code?: string | null;
    /**
     * The access token for the OAuth app
     * @type {string}
     * @memberof OAuthCredentials
     */
    accessToken?: string | null;
    /**
     * The refresh token for the OAuth app
     * @type {string}
     * @memberof OAuthCredentials
     */
    refreshToken?: string | null;
    /**
     * The expiration date of the access token
     * @type {string}
     * @memberof OAuthCredentials
     */
    expiresAt?: string | null;
}
/**
    * @export
    * @enum {string}
    */
export declare enum OAuthCredentialsCredentialsTypeEnum {
    Oauth = "oauth"
}
/**
 *
 * @export
 * @interface Objection
 */
export interface Objection {
    /**
     * The objection to be handled
     * @type {string}
     * @memberof Objection
     */
    objection: string;
    /**
     * The rebuttal to the objection
     * @type {string}
     * @memberof Objection
     */
    rebuttal: string;
}
/**
 *
 * @export
 * @interface OrgUsersPriceCredits
 */
export interface OrgUsersPriceCredits {
    /**
     *
     * @type {OrganizationOutput}
     * @memberof OrgUsersPriceCredits
     */
    organization: OrganizationOutput;
    /**
     *
     * @type {Array<User>}
     * @memberof OrgUsersPriceCredits
     */
    users: Array<User>;
    /**
     *
     * @type {Array<Price>}
     * @memberof OrgUsersPriceCredits
     */
    prices?: Array<Price> | null;
    /**
     *
     * @type {Array<Credit>}
     * @memberof OrgUsersPriceCredits
     */
    credits?: Array<Credit> | null;
    /**
     *
     * @type {string}
     * @memberof OrgUsersPriceCredits
     */
    resellerAdminUserCredentials?: string | null;
}
/**
 *
 * @export
 * @interface OrgWithUsers
 */
export interface OrgWithUsers {
    /**
     *
     * @type {OrganizationOutput}
     * @memberof OrgWithUsers
     */
    organization: OrganizationOutput;
    /**
     *
     * @type {Array<User>}
     * @memberof OrgWithUsers
     */
    users: Array<User>;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum OrganizationInitializationStatus {
    PENDING = "PENDING",
    COMPLETED = "COMPLETED",
    FAILED = "FAILED"
}
/**
 * Organization represents the business using Trata and all users are associated to this business entity
 * @export
 * @interface OrganizationInput
 */
export interface OrganizationInput {
    /**
     * Name of the organization
     * @type {string}
     * @memberof OrganizationInput
     */
    name: string;
    /**
     * Address of the organization
     * @type {AddressInput}
     * @memberof OrganizationInput
     */
    address?: AddressInput | null;
    /**
     * Tax details of the organization
     * @type {TaxDetailsInput}
     * @memberof OrganizationInput
     */
    tax?: TaxDetailsInput | null;
    /**
     * External references for the organization
     * @type {Array<ExternalServicePorviderInput>}
     * @memberof OrganizationInput
     */
    externalReferenceIds?: Array<ExternalServicePorviderInput> | null;
    /**
     * Configurations for all the agents going to be created in this org
     * @type {AgentConfig}
     * @memberof OrganizationInput
     */
    agentConfig?: AgentConfig | null;
}
/**
 * Organization represents the business using Trata and all users are associated to this business entity
 * @export
 * @interface OrganizationOutput
 */
export interface OrganizationOutput {
    /**
     *
     * @type {string}
     * @memberof OrganizationOutput
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationOutput
     */
    name?: string;
    /**
     *
     * @type {AgentConfig}
     * @memberof OrganizationOutput
     */
    config: AgentConfig;
    /**
     *
     * @type {AddressOutput}
     * @memberof OrganizationOutput
     */
    address: AddressOutput | null;
    /**
     *
     * @type {TaxDetailsOutput}
     * @memberof OrganizationOutput
     */
    tax: TaxDetailsOutput | null;
    /**
     *
     * @type {Array<ExternalServicePorviderOutput>}
     * @memberof OrganizationOutput
     */
    externalReferenceIds: Array<ExternalServicePorviderOutput> | null;
    /**
     *
     * @type {OrganizationInitializationStatus}
     * @memberof OrganizationOutput
     */
    isInitialized?: OrganizationInitializationStatus;
    /**
     *
     * @type {string}
     * @memberof OrganizationOutput
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationOutput
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationOutput
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationOutput
     */
    updatedAt?: string;
    /**
     *
     * @type {object}
     * @memberof OrganizationOutput
     */
    internalProps: object | null;
    /**
     * If the Organization is created by reseller, this field will have the reseller org id as the parent organization id
     * @type {string}
     * @memberof OrganizationOutput
     */
    parentOrgId?: string;
    /**
     * Type of the organization. Currently only CONSUMER & RESELLER are supported
     * @type {string}
     * @memberof OrganizationOutput
     */
    orgType?: string | null;
}
/**
 *
 * @export
 * @interface OrganizationSettings
 */
export interface OrganizationSettings {
    /**
     *
     * @type {string}
     * @memberof OrganizationSettings
     */
    orgId?: string | null;
    /**
     *
     * @type {string}
     * @memberof OrganizationSettings
     */
    name?: string | null;
    /**
     *
     * @type {string}
     * @memberof OrganizationSettings
     */
    domain?: string | null;
    /**
     *
     * @type {string}
     * @memberof OrganizationSettings
     */
    stripeKey?: string | null;
    /**
     *
     * @type {string}
     * @memberof OrganizationSettings
     */
    brandColor?: string | null;
    /**
     *
     * @type {string}
     * @memberof OrganizationSettings
     */
    buttonColor?: string | null;
    /**
     *
     * @type {string}
     * @memberof OrganizationSettings
     */
    secondaryColor?: string | null;
    /**
     *
     * @type {string}
     * @memberof OrganizationSettings
     */
    textColor?: string | null;
    /**
     *
     * @type {string}
     * @memberof OrganizationSettings
     */
    favicon?: string | null;
    /**
     *
     * @type {string}
     * @memberof OrganizationSettings
     */
    faviconUrl?: string | null;
    /**
     *
     * @type {string}
     * @memberof OrganizationSettings
     */
    logo?: string | null;
    /**
     *
     * @type {string}
     * @memberof OrganizationSettings
     */
    logoUrl?: string | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum PatienceLevel {
    Impatient = "impatient",
    Neutral = "neutral",
    VeryPatient = "very patient"
}
/**
 * Persona represents a persona that can be used in a scenario
 * @export
 * @interface Persona
 */
export interface Persona {
    /**
     * The user who created.
     * @type {string}
     * @memberof Persona
     */
    createdBy?: string;
    /**
     * The date and time it was created.
     * @type {string}
     * @memberof Persona
     */
    createdAt?: string;
    /**
     * The user who last updated.
     * @type {string}
     * @memberof Persona
     */
    updatedBy?: string;
    /**
     * The date and time when it was last updated.
     * @type {string}
     * @memberof Persona
     */
    updatedAt?: string;
    /**
     * The workspace of the entity.
     * @type {string}
     * @memberof Persona
     */
    orgId?: string;
    /**
     * The name of the persona
     * @type {string}
     * @memberof Persona
     */
    name: string;
    /**
     * The title of the persona
     * @type {string}
     * @memberof Persona
     */
    title: string;
    /**
     * The company of the persona
     * @type {string}
     * @memberof Persona
     */
    company: string;
    /**
     * The context of the persona
     * @type {string}
     * @memberof Persona
     */
    context: string;
    /**
     * The voice of the persona
     * @type {SparrVoiceOutput}
     * @memberof Persona
     */
    voice: SparrVoiceOutput;
    /**
     * The demeanor of the persona
     * @type {SparrDemeanorOutput}
     * @memberof Persona
     */
    demeanor: SparrDemeanorOutput;
    /**
     * The additional background of the persona
     * @type {string}
     * @memberof Persona
     */
    additionalBackground: string;
    /**
     * The work history of the persona
     * @type {Array<SparrWorkDetails>}
     * @memberof Persona
     */
    workHistory: Array<SparrWorkDetails>;
    /**
     * The LinkedIn URL of the persona
     * @type {string}
     * @memberof Persona
     */
    linkedInUrl: string;
    /**
     * The Twitter URL of the persona
     * @type {string}
     * @memberof Persona
     */
    twitterUrl: string | null;
    /**
     * The website URL of the persona
     * @type {string}
     * @memberof Persona
     */
    blogUrl: string | null;
    /**
     * Whether the persona is inherited from the parent persona
     * @type {boolean}
     * @memberof Persona
     */
    isInherited?: boolean;
    /**
     * The profile picture URL of the persona
     * @type {string}
     * @memberof Persona
     */
    profilePictureUrl: string | null;
    /**
     * The status of the persona
     * @type {string}
     * @memberof Persona
     */
    status?: string;
    /**
     * The unique identifier of the persona
     * @type {string}
     * @memberof Persona
     */
    id?: string;
    /**
     * The version of the persona
     * @type {number}
     * @memberof Persona
     */
    version?: number;
}
/**
 *
 * @export
 * @interface PersonaAttributesAndTraits
 */
export interface PersonaAttributesAndTraits {
    /**
     *
     * @type {PatienceLevel | string}
     * @memberof PersonaAttributesAndTraits
     */
    patience_level?: PatienceLevel | string | null;
    /**
     *
     * @type {DecisionMakingStyle | string}
     * @memberof PersonaAttributesAndTraits
     */
    decision_making_style?: DecisionMakingStyle | string | null;
    /**
     *
     * @type {CommunicationStyle | string}
     * @memberof PersonaAttributesAndTraits
     */
    communication_style?: CommunicationStyle | string | null;
    /**
     *
     * @type {Adaptability | string}
     * @memberof PersonaAttributesAndTraits
     */
    adaptability?: Adaptability | string | null;
    /**
     *
     * @type {FrustrationTolerance | string}
     * @memberof PersonaAttributesAndTraits
     */
    frustration_tolerance?: FrustrationTolerance | string | null;
    /**
     *
     * @type {EngagementLevel | string}
     * @memberof PersonaAttributesAndTraits
     */
    engagement_level?: EngagementLevel | string | null;
    /**
     *
     * @type {InteractionTone | string}
     * @memberof PersonaAttributesAndTraits
     */
    preferred_tone?: InteractionTone | string | null;
    /**
     *
     * @type {NegotiationStyle | string}
     * @memberof PersonaAttributesAndTraits
     */
    negotiation_style?: NegotiationStyle | string | null;
}
/**
 *
 * @export
 * @interface PersonaCore
 */
export interface PersonaCore {
    /**
     * The name of the persona
     * @type {string}
     * @memberof PersonaCore
     */
    name: string;
    /**
     * The title of the persona
     * @type {string}
     * @memberof PersonaCore
     */
    title: string;
    /**
     * The company of the persona
     * @type {string}
     * @memberof PersonaCore
     */
    company: string;
    /**
     * The context of the persona
     * @type {string}
     * @memberof PersonaCore
     */
    context: string;
    /**
     * The voice of the persona
     * @type {SparrVoiceInput}
     * @memberof PersonaCore
     */
    voice: SparrVoiceInput;
    /**
     * The demeanor of the persona
     * @type {SparrDemeanorInput}
     * @memberof PersonaCore
     */
    demeanor: SparrDemeanorInput;
    /**
     * The additional background of the persona
     * @type {string}
     * @memberof PersonaCore
     */
    additionalBackground: string;
    /**
     * The work history of the persona
     * @type {Array<SparrWorkDetails>}
     * @memberof PersonaCore
     */
    workHistory: Array<SparrWorkDetails>;
    /**
     * The LinkedIn URL of the persona
     * @type {string}
     * @memberof PersonaCore
     */
    linkedInUrl: string;
    /**
     * The Twitter URL of the persona
     * @type {string}
     * @memberof PersonaCore
     */
    twitterUrl: string | null;
    /**
     * The website URL of the persona
     * @type {string}
     * @memberof PersonaCore
     */
    blogUrl: string | null;
    /**
     * Whether the persona is inherited from the parent persona
     * @type {boolean}
     * @memberof PersonaCore
     */
    isInherited?: boolean;
    /**
     * The profile picture URL of the persona
     * @type {string}
     * @memberof PersonaCore
     */
    profilePictureUrl: string | null;
    /**
     * The status of the persona
     * @type {string}
     * @memberof PersonaCore
     */
    status?: string;
}
/**
 *
 * @export
 * @interface PersonaSearchResponse
 */
export interface PersonaSearchResponse {
    /**
     *
     * @type {Array<Persona>}
     * @memberof PersonaSearchResponse
     */
    items: Array<Persona>;
    /**
     *
     * @type {number}
     * @memberof PersonaSearchResponse
     */
    total: number;
    /**
     *
     * @type {number}
     * @memberof PersonaSearchResponse
     */
    pages: number;
    /**
     *
     * @type {number}
     * @memberof PersonaSearchResponse
     */
    current_page: number;
    /**
     *
     * @type {number}
     * @memberof PersonaSearchResponse
     */
    page_size: number;
}
/**
 * Price details of the business
 * @export
 * @interface Price
 */
export interface Price {
    /**
     *
     * @type {string}
     * @memberof Price
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Price
     */
    parentOrgId?: string;
    /**
     *
     * @type {string}
     * @memberof Price
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof Price
     */
    priceName?: string;
    /**
     *
     * @type {string}
     * @memberof Price
     */
    description?: string;
    /**
     *
     * @type {number}
     * @memberof Price
     */
    price?: number;
    /**
     * Determines customer/reseller using custom price or default price
     * @type {boolean}
     * @memberof Price
     */
    isDefault?: boolean | null;
    /**
     *
     * @type {string}
     * @memberof Price
     */
    currency?: string;
    /**
     *
     * @type {string}
     * @memberof Price
     */
    stripePriceId?: string | null;
    /**
     *
     * @type {string}
     * @memberof Price
     */
    stripeProductId?: string | null;
    /**
     *
     * @type {PriceInterval}
     * @memberof Price
     */
    priceInterval?: PriceInterval;
    /**
     *
     * @type {string}
     * @memberof Price
     */
    creditsPhoneNumbers?: string | null;
    /**
     *
     * @type {string}
     * @memberof Price
     */
    creditsCallSeconds?: string | null;
    /**
     * List of features included in this price tier
     * @type {Array<string>}
     * @memberof Price
     */
    features?: Array<string> | null;
    /**
     *
     * @type {PriceMetadata}
     * @memberof Price
     */
    price_metadata?: PriceMetadata;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum PriceInterval {
    Recurring = "recurring",
    OneTime = "one_time"
}
/**
 *
 * @export
 * @interface PriceMetadata
 */
export interface PriceMetadata {
    /**
     * Number of phone numbers to be purchased for the given price.
     * @type {string}
     * @memberof PriceMetadata
     */
    trata_phone_numbers: string;
    /**
     * Number of call seconds to be purchased for the given price.
     * @type {string}
     * @memberof PriceMetadata
     */
    trata_call_seconds: string;
}
/**
 *
 * @export
 * @interface PricingRequest
 */
export interface PricingRequest {
    /**
     * Price name
     * @type {string}
     * @memberof PricingRequest
     */
    priceName: string;
    /**
     * Description
     * @type {string}
     * @memberof PricingRequest
     */
    description: string;
    /**
     * Price in the lowest denomination of the currency
     * @type {number}
     * @memberof PricingRequest
     */
    price?: number;
    /**
     * Currency
     * @type {string}
     * @memberof PricingRequest
     */
    currency: string;
    /**
     * Price interval
     * @type {PriceInterval}
     * @memberof PricingRequest
     */
    priceInterval: PriceInterval;
    /**
     * Maximum number of phone numbers to be purchased for the given price.
     * @type {string}
     * @memberof PricingRequest
     */
    creditsPhoneNumbers: string;
    /**
     * Maximum number of call seconds to be purchased for the given price.
     * @type {string}
     * @memberof PricingRequest
     */
    creditsCallSeconds: string;
    /**
     * List of features included in this price tier
     * @type {Array<string>}
     * @memberof PricingRequest
     */
    features?: Array<string> | null;
}
/**
 *
 * @export
 * @interface ProductInput
 */
export interface ProductInput {
    /**
     * Product is active or not
     * @type {boolean}
     * @memberof ProductInput
     */
    active: boolean;
    /**
     * Default price of the product this is represented in the lowest currency denomination. Eg: 1000 for $10
     * @type {number}
     * @memberof ProductInput
     */
    defaultPrice: number;
    /**
     * Currency of the product
     * @type {string}
     * @memberof ProductInput
     */
    currency: ProductInputCurrencyEnum;
    /**
     * Description of the product
     * @type {string}
     * @memberof ProductInput
     */
    description: string;
    /**
     * Name of the product
     * @type {string}
     * @memberof ProductInput
     */
    name: string;
    /**
     * Product is shippable or not. Service is not shippable
     * @type {boolean}
     * @memberof ProductInput
     */
    shippable?: boolean;
    /**
     * List of features of the product
     * @type {Array<string>}
     * @memberof ProductInput
     */
    features?: Array<string> | null;
    /**
     * Product requires appointment scheduling or not
     * @type {boolean}
     * @memberof ProductInput
     */
    scheduleAppointment?: boolean;
    /**
     * Properties of the product
     * @type {object}
     * @memberof ProductInput
     */
    props?: object | null;
    /**
     * Tags for the product. This is used for grouping purpose. Eg: [\"gardening\", \"tools\"]
     * @type {Array<string>}
     * @memberof ProductInput
     */
    tags?: Array<string> | null;
    /**
     *
     * @type {Status}
     * @memberof ProductInput
     */
    status: Status;
    /**
     * List of agent ids which are accessible for this product
     * @type {Array<string>}
     * @memberof ProductInput
     */
    agentIds?: Array<string> | null;
}
/**
    * @export
    * @enum {string}
    */
export declare enum ProductInputCurrencyEnum {
    AED = "AED",
    AFN = "AFN",
    ALL = "ALL",
    AMD = "AMD",
    ANG = "ANG",
    AOA = "AOA",
    ARS = "ARS",
    AUD = "AUD",
    AWG = "AWG",
    AZN = "AZN",
    BAM = "BAM",
    BBD = "BBD",
    BDT = "BDT",
    BGN = "BGN",
    BHD = "BHD",
    BIF = "BIF",
    BMD = "BMD",
    BND = "BND",
    BOB = "BOB",
    BOV = "BOV",
    BRL = "BRL",
    BSD = "BSD",
    BTN = "BTN",
    BWP = "BWP",
    BYN = "BYN",
    BZD = "BZD",
    CAD = "CAD",
    CDF = "CDF",
    CHE = "CHE",
    CHF = "CHF",
    CHW = "CHW",
    CLF = "CLF",
    CLP = "CLP",
    CNY = "CNY",
    COP = "COP",
    COU = "COU",
    CRC = "CRC",
    CUC = "CUC",
    CUP = "CUP",
    CVE = "CVE",
    CZK = "CZK",
    DJF = "DJF",
    DKK = "DKK",
    DOP = "DOP",
    DZD = "DZD",
    EGP = "EGP",
    ERN = "ERN",
    ETB = "ETB",
    EUR = "EUR",
    FJD = "FJD",
    FKP = "FKP",
    GBP = "GBP",
    GEL = "GEL",
    GHS = "GHS",
    GIP = "GIP",
    GMD = "GMD",
    GNF = "GNF",
    GTQ = "GTQ",
    GYD = "GYD",
    HKD = "HKD",
    HNL = "HNL",
    HRK = "HRK",
    HTG = "HTG",
    HUF = "HUF",
    IDR = "IDR",
    ILS = "ILS",
    INR = "INR",
    IQD = "IQD",
    IRR = "IRR",
    ISK = "ISK",
    JMD = "JMD",
    JOD = "JOD",
    JPY = "JPY",
    KES = "KES",
    KGS = "KGS",
    KHR = "KHR",
    KMF = "KMF",
    KPW = "KPW",
    KRW = "KRW",
    KWD = "KWD",
    KYD = "KYD",
    KZT = "KZT",
    LAK = "LAK",
    LBP = "LBP",
    LKR = "LKR",
    LRD = "LRD",
    LSL = "LSL",
    LYD = "LYD",
    MAD = "MAD",
    MDL = "MDL",
    MGA = "MGA",
    MKD = "MKD",
    MMK = "MMK",
    MNT = "MNT",
    MOP = "MOP",
    MRU = "MRU",
    MUR = "MUR",
    MVR = "MVR",
    MWK = "MWK",
    MXN = "MXN",
    MXV = "MXV",
    MYR = "MYR",
    MZN = "MZN",
    NAD = "NAD",
    NGN = "NGN",
    NIO = "NIO",
    NOK = "NOK",
    NPR = "NPR",
    NZD = "NZD",
    OMR = "OMR",
    PAB = "PAB",
    PEN = "PEN",
    PGK = "PGK",
    PHP = "PHP",
    PKR = "PKR",
    PLN = "PLN",
    PYG = "PYG",
    QAR = "QAR",
    RON = "RON",
    RSD = "RSD",
    RUB = "RUB",
    RWF = "RWF",
    SAR = "SAR",
    SBD = "SBD",
    SCR = "SCR",
    SDG = "SDG",
    SEK = "SEK",
    SGD = "SGD",
    SHP = "SHP",
    SLE = "SLE",
    SLL = "SLL",
    SOS = "SOS",
    SRD = "SRD",
    SSP = "SSP",
    STN = "STN",
    SVC = "SVC",
    SYP = "SYP",
    SZL = "SZL",
    THB = "THB",
    TJS = "TJS",
    TMT = "TMT",
    TND = "TND",
    TOP = "TOP",
    TRY = "TRY",
    TTD = "TTD",
    TWD = "TWD",
    TZS = "TZS",
    UAH = "UAH",
    UGX = "UGX",
    USD = "USD",
    USN = "USN",
    UYI = "UYI",
    UYU = "UYU",
    UYW = "UYW",
    UZS = "UZS",
    VED = "VED",
    VES = "VES",
    VND = "VND",
    VUV = "VUV",
    WST = "WST",
    XAF = "XAF",
    XCD = "XCD",
    XOF = "XOF",
    XPF = "XPF",
    XSU = "XSU",
    XUA = "XUA",
    YER = "YER",
    ZAR = "ZAR",
    ZMW = "ZMW",
    ZWL = "ZWL"
}
/**
 * Product and services offered by the business
 * @export
 * @interface ProductOutput
 */
export interface ProductOutput {
    /**
     *
     * @type {string}
     * @memberof ProductOutput
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ProductOutput
     */
    orgId?: string;
    /**
     * Product is active or not
     * @type {boolean}
     * @memberof ProductOutput
     */
    active?: boolean;
    /**
     * Default price of the product this is represented in the lowest currency denomination. Eg: 1000 for $10
     * @type {number}
     * @memberof ProductOutput
     */
    defaultPrice?: number | null;
    /**
     *
     * @type {string}
     * @memberof ProductOutput
     */
    currency?: string | null;
    /**
     * Description of the product
     * @type {string}
     * @memberof ProductOutput
     */
    description?: string | null;
    /**
     * Name of the product
     * @type {string}
     * @memberof ProductOutput
     */
    name?: string;
    /**
     * Product is shippable or not. Service is not shippable
     * @type {boolean}
     * @memberof ProductOutput
     */
    shippable?: boolean;
    /**
     * List of features of the product
     * @type {Array<string>}
     * @memberof ProductOutput
     */
    features?: Array<string> | null;
    /**
     * Product requires appointment scheduling or not
     * @type {boolean}
     * @memberof ProductOutput
     */
    scheduleAppointment?: boolean;
    /**
     * Properties of the product
     * @type {object}
     * @memberof ProductOutput
     */
    props?: object | null;
    /**
     *
     * @type {Array<string>}
     * @memberof ProductOutput
     */
    tags?: Array<string> | null;
    /**
     *
     * @type {string}
     * @memberof ProductOutput
     */
    status: string;
    /**
     *
     * @type {string}
     * @memberof ProductOutput
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof ProductOutput
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof ProductOutput
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof ProductOutput
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @interface ProductWithAgents
 */
export interface ProductWithAgents {
    /**
     *
     * @type {ProductOutput}
     * @memberof ProductWithAgents
     */
    product: ProductOutput;
    /**
     *
     * @type {Array<AIAgentOutput>}
     * @memberof ProductWithAgents
     */
    agents?: Array<AIAgentOutput>;
}
/**
 *
 * @export
 * @interface PromptTemplate
 */
export interface PromptTemplate {
    /**
     *
     * @type {string}
     * @memberof PromptTemplate
     */
    prompt: string;
    /**
     *
     * @type {Array<Sequence>}
     * @memberof PromptTemplate
     */
    sequences: Array<Sequence>;
    /**
     *
     * @type {string}
     * @memberof PromptTemplate
     */
    role: string;
    /**
     *
     * @type {string}
     * @memberof PromptTemplate
     */
    roleDescription: string;
    /**
     *
     * @type {string}
     * @memberof PromptTemplate
     */
    name: string;
}
/**
 *
 * @export
 * @interface ProspectInput
 */
export interface ProspectInput {
    /**
     * Name of the prospect
     * @type {string}
     * @memberof ProspectInput
     */
    name?: string | null;
    /**
     * Email of the prospect
     * @type {string}
     * @memberof ProspectInput
     */
    email?: string | null;
    /**
     * Phone number of the prospect
     * @type {string}
     * @memberof ProspectInput
     */
    phoneNumber?: string | null;
    /**
     * External references for the prospect
     * @type {Array<ExternalReference>}
     * @memberof ProspectInput
     */
    externalReference?: Array<ExternalReference> | null;
    /**
     *
     * @type {ProspectStatus}
     * @memberof ProspectInput
     */
    status: ProspectStatus;
    /**
     * Props for the prospect
     * @type {object}
     * @memberof ProspectInput
     */
    prospectProps?: object | null;
}
/**
 * Prospects are the potential customers for business
 * @export
 * @interface ProspectOutput
 */
export interface ProspectOutput {
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    name?: string | null;
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    email?: string | null;
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    phoneNumber?: string | null;
    /**
     *
     * @type {Array<ExternalReference>}
     * @memberof ProspectOutput
     */
    externalReference: Array<ExternalReference> | null;
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    status: string;
    /**
     *
     * @type {object}
     * @memberof ProspectOutput
     */
    prospectProps: object | null;
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum ProspectStatus {
    NEW = "NEW",
    GENERALENQUIRY = "GENERAL_ENQUIRY",
    SCHEDULEDCALLBACKWITHBOT = "SCHEDULED_CALLBACK_WITH_BOT",
    SCHEDULEDAPPOINTMENTWITHPERSON = "SCHEDULED_APPOINTMENT_WITH_PERSON",
    SCHEDULEDAPPOINTMENTFORSERVICE = "SCHEDULED_APPOINTMENT_FOR_SERVICE",
    NOTINTERESTED = "NOT_INTERESTED",
    PRODUCTORDERPLACED = "PRODUCT_ORDER_PLACED",
    SERVICEORDERPLACED = "SERVICE_ORDER_PLACED"
}
/**
 *
 * @export
 * @interface ResellerAdminUserCredentials
 */
export interface ResellerAdminUserCredentials {
    /**
     * Username of the reseller admin user
     * @type {string}
     * @memberof ResellerAdminUserCredentials
     */
    username: string;
    /**
     * Password of the reseller admin user
     * @type {string}
     * @memberof ResellerAdminUserCredentials
     */
    password: string;
}
/**
 *
 * @export
 * @interface ResellerBatchMetricsRequests
 */
export interface ResellerBatchMetricsRequests {
    /**
     *
     * @type {Array<string>}
     * @memberof ResellerBatchMetricsRequests
     */
    organization: Array<string>;
    /**
     *
     * @type {Array<MetricsRequestInput>}
     * @memberof ResellerBatchMetricsRequests
     */
    requests: Array<MetricsRequestInput>;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum Role {
    ADMIN = "ADMIN",
    READONLY = "READ_ONLY",
    RESELLERADMIN = "RESELLER_ADMIN"
}
/**
 *
 * @export
 * @interface RoleTemplate
 */
export interface RoleTemplate {
    /**
     *
     * @type {string}
     * @memberof RoleTemplate
     */
    roleName: string;
    /**
     *
     * @type {string}
     * @memberof RoleTemplate
     */
    roleDescription: string;
}
/**
 * Scenario represents a sequence of steps that can be performed by an app
 * @export
 * @interface Scenario
 */
export interface Scenario {
    /**
     * The user who created.
     * @type {string}
     * @memberof Scenario
     */
    createdBy?: string;
    /**
     * The date and time it was created.
     * @type {string}
     * @memberof Scenario
     */
    createdAt?: string;
    /**
     * The user who last updated.
     * @type {string}
     * @memberof Scenario
     */
    updatedBy?: string;
    /**
     * The date and time when it was last updated.
     * @type {string}
     * @memberof Scenario
     */
    updatedAt?: string;
    /**
     * The workspace of the entity.
     * @type {string}
     * @memberof Scenario
     */
    orgId?: string;
    /**
     * The name of the scenario
     * @type {string}
     * @memberof Scenario
     */
    name: string;
    /**
     * The description of the scenario
     * @type {string}
     * @memberof Scenario
     */
    description: string;
    /**
     * The objections to be handled for the scenario
     * @type {Array<Objection>}
     * @memberof Scenario
     */
    objections: Array<Objection>;
    /**
     * The type of call to be used for this scenario
     * @type {string}
     * @memberof Scenario
     */
    callType?: string | null;
    /**
     * The goals to be achieved for the scenario
     * @type {Array<Goal>}
     * @memberof Scenario
     */
    goals: Array<Goal>;
    /**
     * The playbook to be followed for the scenario
     * @type {Array<Step>}
     * @memberof Scenario
     */
    playbook: Array<Step>;
    /**
     * Whether the scenario is inherited from the parent scenario
     * @type {boolean}
     * @memberof Scenario
     */
    isInherited?: boolean;
    /**
     * The status of the scenario
     * @type {string}
     * @memberof Scenario
     */
    status?: string;
    /**
     * The unique identifier of the scenario
     * @type {string}
     * @memberof Scenario
     */
    id?: string;
    /**
     * The version of the scenario
     * @type {number}
     * @memberof Scenario
     */
    version?: number;
}
/**
 *
 * @export
 * @interface ScenarioCore
 */
export interface ScenarioCore {
    /**
     * The name of the scenario
     * @type {string}
     * @memberof ScenarioCore
     */
    name: string;
    /**
     * The description of the scenario
     * @type {string}
     * @memberof ScenarioCore
     */
    description: string;
    /**
     * The objections to be handled for the scenario
     * @type {Array<Objection>}
     * @memberof ScenarioCore
     */
    objections: Array<Objection>;
    /**
     * The type of call to be used for this scenario
     * @type {string}
     * @memberof ScenarioCore
     */
    callType?: string | null;
    /**
     * The goals to be achieved for the scenario
     * @type {Array<Goal>}
     * @memberof ScenarioCore
     */
    goals: Array<Goal>;
    /**
     * The playbook to be followed for the scenario
     * @type {Array<Step>}
     * @memberof ScenarioCore
     */
    playbook: Array<Step>;
    /**
     * Whether the scenario is inherited from the parent scenario
     * @type {boolean}
     * @memberof ScenarioCore
     */
    isInherited?: boolean;
    /**
     * The status of the scenario
     * @type {string}
     * @memberof ScenarioCore
     */
    status?: string;
}
/**
 *
 * @export
 * @interface ScenarioSearchResponse
 */
export interface ScenarioSearchResponse {
    /**
     *
     * @type {Array<Scenario>}
     * @memberof ScenarioSearchResponse
     */
    items: Array<Scenario>;
    /**
     *
     * @type {number}
     * @memberof ScenarioSearchResponse
     */
    total: number;
    /**
     *
     * @type {number}
     * @memberof ScenarioSearchResponse
     */
    pages: number;
    /**
     *
     * @type {number}
     * @memberof ScenarioSearchResponse
     */
    current_page: number;
    /**
     *
     * @type {number}
     * @memberof ScenarioSearchResponse
     */
    page_size: number;
}
/**
 *
 * @export
 * @interface Sequence
 */
export interface Sequence {
    /**
     * Name of the stage
     * @type {string}
     * @memberof Sequence
     */
    stageName: string;
    /**
     * Description of the stage
     * @type {string}
     * @memberof Sequence
     */
    description: string;
    /**
     * Other notes that AI agent should know in this stage of conversation
     * @type {string}
     * @memberof Sequence
     */
    otherNotes?: string | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum SortOrder {
    Asc = "asc",
    Desc = "desc"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum SparrAdaptability {
    OpenToChange = "open to change",
    Resistant = "resistant",
    Indifferent = "indifferent"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum SparrCommunicationStyle {
    Direct = "direct",
    Indirect = "indirect",
    Verbose = "verbose",
    Brief = "brief"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum SparrDecisionMakingStyle {
    Logical = "logical",
    Emotional = "emotional",
    Impulsive = "impulsive",
    Hesitant = "hesitant"
}
/**
 *
 * @export
 * @interface SparrDemeanorInput
 */
export interface SparrDemeanorInput {
    /**
     *
     * @type {SparrPersonaAttributesAndTraits}
     * @memberof SparrDemeanorInput
     */
    personaTraits?: SparrPersonaAttributesAndTraits | null;
    /**
     *
     * @type {SparrExcitementLevel | string}
     * @memberof SparrDemeanorInput
     */
    excitementLevel?: SparrExcitementLevel | string | null;
    /**
     *
     * @type {SparrRudenessLevel | string}
     * @memberof SparrDemeanorInput
     */
    rudenessLevel?: SparrRudenessLevel | string | null;
}
/**
 *
 * @export
 * @interface SparrDemeanorOutput
 */
export interface SparrDemeanorOutput {
    /**
     *
     * @type {SparrPersonaAttributesAndTraits}
     * @memberof SparrDemeanorOutput
     */
    personaTraits?: SparrPersonaAttributesAndTraits | null;
    /**
     *
     * @type {SparrExcitementLevel | string}
     * @memberof SparrDemeanorOutput
     */
    excitementLevel?: SparrExcitementLevel | string | null;
    /**
     *
     * @type {SparrRudenessLevel | string}
     * @memberof SparrDemeanorOutput
     */
    rudenessLevel?: SparrRudenessLevel | string | null;
}
/**
 *
 * @export
 * @interface SparrDialogLine
 */
export interface SparrDialogLine {
    /**
     *
     * @type {string}
     * @memberof SparrDialogLine
     */
    speaker: SparrDialogLineSpeakerEnum;
    /**
     *
     * @type {string}
     * @memberof SparrDialogLine
     */
    message: string;
    /**
     *
     * @type {string}
     * @memberof SparrDialogLine
     */
    timestamp: string;
    /**
     *
     * @type {string}
     * @memberof SparrDialogLine
     */
    message_id: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum SparrDialogLineSpeakerEnum {
    USER = "USER",
    AI = "AI",
    TOOL = "TOOL",
    AITOOLREQUEST = "AI - TOOL REQUEST"
}
/**
 *
 * @export
 * @interface SparrDialogLineWithSentiment
 */
export interface SparrDialogLineWithSentiment {
    /**
     *
     * @type {string}
     * @memberof SparrDialogLineWithSentiment
     */
    speaker: SparrDialogLineWithSentimentSpeakerEnum;
    /**
     *
     * @type {string}
     * @memberof SparrDialogLineWithSentiment
     */
    message: string;
    /**
     *
     * @type {number}
     * @memberof SparrDialogLineWithSentiment
     */
    start_at_seconds: number;
    /**
     *
     * @type {number}
     * @memberof SparrDialogLineWithSentiment
     */
    end_at_seconds: number;
    /**
     *
     * @type {string}
     * @memberof SparrDialogLineWithSentiment
     */
    sentiment: SparrDialogLineWithSentimentSentimentEnum;
    /**
     *
     * @type {number}
     * @memberof SparrDialogLineWithSentiment
     */
    sentiment_score: number;
    /**
     *
     * @type {string}
     * @memberof SparrDialogLineWithSentiment
     */
    id: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum SparrDialogLineWithSentimentSpeakerEnum {
    USER = "USER",
    AI = "AI",
    TOOL = "TOOL",
    AITOOLREQUEST = "AI - TOOL REQUEST"
}
/**
    * @export
    * @enum {string}
    */
export declare enum SparrDialogLineWithSentimentSentimentEnum {
    POSITIVE = "POSITIVE",
    NEGATIVE = "NEGATIVE",
    NEUTRAL = "NEUTRAL"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum SparrEngagementLevel {
    HighlyEngaged = "highly engaged",
    Distracted = "distracted",
    Uninterested = "uninterested"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum SparrExcitementLevel {
    Neutral = "neutral",
    Interested = "interested",
    Excited = "excited",
    Overjoyed = "overjoyed",
    Euphoric = "euphoric"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum SparrFrustrationTolerance {
    Neutral = "neutral",
    QuickToAnger = "quick to anger",
    Understanding = "understanding"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum SparrInteractionTone {
    Casual = "casual",
    Professional = "professional",
    Friendly = "friendly",
    Authoritative = "authoritative"
}
/**
 *
 * @export
 * @interface SparrLanguageAccentCombo
 */
export interface SparrLanguageAccentCombo {
    /**
     *
     * @type {SparrVoiceLanguage}
     * @memberof SparrLanguageAccentCombo
     */
    language: SparrVoiceLanguage;
    /**
     *
     * @type {SparrVoiceAccent}
     * @memberof SparrLanguageAccentCombo
     */
    accent: SparrVoiceAccent;
}
/**
 *
 * @export
 * @interface SparrModelsAnalyticsBatchMetricsRequests
 */
export interface SparrModelsAnalyticsBatchMetricsRequests {
    /**
     *
     * @type {Array<SparrModelsAnalyticsMetricsRequest>}
     * @memberof SparrModelsAnalyticsBatchMetricsRequests
     */
    requests: Array<SparrModelsAnalyticsMetricsRequest>;
}
/**
 *
 * @export
 * @interface SparrModelsAnalyticsBatchMetricsResponse
 */
export interface SparrModelsAnalyticsBatchMetricsResponse {
    /**
     *
     * @type {Array<SparrModelsAnalyticsMetricsResponse>}
     * @memberof SparrModelsAnalyticsBatchMetricsResponse
     */
    responses: Array<SparrModelsAnalyticsMetricsResponse>;
}
/**
 * Expected output of the post conversation task
 * @export
 * @interface SparrModelsAnalyticsConversationAnalyticsModel
 */
export interface SparrModelsAnalyticsConversationAnalyticsModel {
    /**
     * This is a sparring conversation. So you have to evaluate the role player\'s conversation skill and provide feedback summary on the same to role player when the role player is conversing in the sparring mode. You shouldn\'t evaluate the AI responses. Keep the feedback summary fun, quirky and engaging. Use American style of writing, use phrases where appropriate. Make it more subtle engaging and also more interesting. Dont be robotic or too formal.
     * @type {string}
     * @memberof SparrModelsAnalyticsConversationAnalyticsModel
     */
    evaluation_summary: string | null;
    /**
     * List of top insights from the role player\'s conversation details. This should be a list of 3-5 points based on the conversation details.
     * @type {Array<string>}
     * @memberof SparrModelsAnalyticsConversationAnalyticsModel
     */
    top_insights: Array<string> | null;
    /**
     * Provide a list of what went well in the conversation. Note that this is a sparring conversation. So you have to evaluate the sales representative\'s conversation skill and provide feedback on the same to sales representative when the sales representative is conversing in the sparring mode. You shouldn\'t evaluate the AI responses. Your evaluation should be based on the metrics provided in the model. This should be a list of 3-5 points based on the metrics name and description provided in the model. Give the list with 1-2 sentences for each point. Use American style of writing, use phrases where appropriate. Make it more subtle engaging and also more interesting. Dont be robotic or too formal.
     * @type {Array<string>}
     * @memberof SparrModelsAnalyticsConversationAnalyticsModel
     */
    what_went_well: Array<string> | null;
    /**
     * Provide a list of what can be improved in the conversation. Note that this is a sparring conversation. So you have to evaluate the sales representative\'s conversation skill and provide feedback on the same to sales representative when the sales representative is conversing in the sparring mode. You shouldn\'t evaluate the AI responses. Your evaluation should be based on the metrics provided in the model. This should be a list of 2-3 points based on the metrics name and description provided in the model. Give the list with 1-2 sentences for each point. Use American style of writing, use phrases where appropriate. Make it more subtle engaging and also more interesting. Dont be robotic or too formal.
     * @type {Array<string>}
     * @memberof SparrModelsAnalyticsConversationAnalyticsModel
     */
    what_can_be_improved: Array<string> | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum SparrModelsAnalyticsMetricName {
    CALLS = "CALLS",
    CALLDURATION = "CALL_DURATION",
    TALKRATIO = "TALK_RATIO"
}
/**
 *
 * @export
 * @interface SparrModelsAnalyticsMetricsRequest
 */
export interface SparrModelsAnalyticsMetricsRequest {
    /**
     * Unique identifier for the metric request. This can be helped to co-relate the request and response
     * @type {string}
     * @memberof SparrModelsAnalyticsMetricsRequest
     */
    id: string;
    /**
     * Name of the metric
     * @type {SparrModelsAnalyticsMetricName}
     * @memberof SparrModelsAnalyticsMetricsRequest
     */
    name: SparrModelsAnalyticsMetricName;
    /**
     * Start date to get metric request
     * @type {string}
     * @memberof SparrModelsAnalyticsMetricsRequest
     */
    fromDate: string;
    /**
     * End date until get metric request
     * @type {string}
     * @memberof SparrModelsAnalyticsMetricsRequest
     */
    toDate: string;
    /**
     * Aggregation period for the metric request
     * @type {AggregationPeriod}
     * @memberof SparrModelsAnalyticsMetricsRequest
     */
    aggregationPeriod: AggregationPeriod;
    /**
     * Aggregation formula for the metric request
     * @type {AggregationFormula}
     * @memberof SparrModelsAnalyticsMetricsRequest
     */
    aggregationFormula: AggregationFormula;
}
/**
 *
 * @export
 * @interface SparrModelsAnalyticsMetricsResponse
 */
export interface SparrModelsAnalyticsMetricsResponse {
    /**
     * Unique identifier for the metric response. This will help co-relate the request and response
     * @type {string}
     * @memberof SparrModelsAnalyticsMetricsResponse
     */
    id: string;
    /**
     * Name of the metric
     * @type {SparrModelsAnalyticsMetricName}
     * @memberof SparrModelsAnalyticsMetricsResponse
     */
    name: SparrModelsAnalyticsMetricName;
    /**
     * List of data points for the metric response
     * @type {Array<MetricResponseDataPoint>}
     * @memberof SparrModelsAnalyticsMetricsResponse
     */
    datapoints: Array<MetricResponseDataPoint>;
}
/**
 *
 * @export
 * @interface SparrModelsBaseBaseResponse
 */
export interface SparrModelsBaseBaseResponse {
    /**
     * The message of the response
     * @type {string}
     * @memberof SparrModelsBaseBaseResponse
     */
    message?: string;
    /**
     * The status of the response
     * @type {string}
     * @memberof SparrModelsBaseBaseResponse
     */
    status?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum SparrNegotiationStyle {
    HardBargainer = "hard bargainer",
    FriendlyNegotiator = "friendly negotiator",
    NonNegotiator = "non-negotiator"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum SparrPatienceLevel {
    Neutral = "neutral",
    VeryPatient = "very patient",
    Impatient = "impatient"
}
/**
 *
 * @export
 * @interface SparrPersonaAttributesAndTraits
 */
export interface SparrPersonaAttributesAndTraits {
    /**
     *
     * @type {SparrPatienceLevel | string}
     * @memberof SparrPersonaAttributesAndTraits
     */
    patience_level?: SparrPatienceLevel | string | null;
    /**
     *
     * @type {SparrDecisionMakingStyle | string}
     * @memberof SparrPersonaAttributesAndTraits
     */
    decision_making_style?: SparrDecisionMakingStyle | string | null;
    /**
     *
     * @type {SparrCommunicationStyle | string}
     * @memberof SparrPersonaAttributesAndTraits
     */
    communication_style?: SparrCommunicationStyle | string | null;
    /**
     *
     * @type {SparrAdaptability | string}
     * @memberof SparrPersonaAttributesAndTraits
     */
    adaptability?: SparrAdaptability | string | null;
    /**
     *
     * @type {SparrFrustrationTolerance | string}
     * @memberof SparrPersonaAttributesAndTraits
     */
    frustration_tolerance?: SparrFrustrationTolerance | string | null;
    /**
     *
     * @type {SparrEngagementLevel | string}
     * @memberof SparrPersonaAttributesAndTraits
     */
    engagement_level?: SparrEngagementLevel | string | null;
    /**
     *
     * @type {SparrInteractionTone | string}
     * @memberof SparrPersonaAttributesAndTraits
     */
    preferred_tone?: SparrInteractionTone | string | null;
    /**
     *
     * @type {SparrNegotiationStyle | string}
     * @memberof SparrPersonaAttributesAndTraits
     */
    negotiation_style?: SparrNegotiationStyle | string | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum SparrRudenessLevel {
    Courteous = "courteous",
    Direct = "direct",
    Irritable = "irritable",
    Aggressive = "aggressive",
    Toxic = "toxic"
}
/**
 *
 * @export
 * @interface SparrStatsData
 */
export interface SparrStatsData {
    /**
     *
     * @type {number}
     * @memberof SparrStatsData
     */
    no_of_calls: number;
    /**
     *
     * @type {number}
     * @memberof SparrStatsData
     */
    average_call_duration: number;
    /**
     *
     * @type {number}
     * @memberof SparrStatsData
     */
    average_dialogs: number;
    /**
     *
     * @type {number}
     * @memberof SparrStatsData
     */
    average_agent_dialog_ratio: number;
    /**
     *
     * @type {number}
     * @memberof SparrStatsData
     */
    average_user_dialog_ratio: number;
}
/**
 *
 * @export
 * @interface SparrStatsResponse
 */
export interface SparrStatsResponse {
    /**
     * Sparring stats of the organization
     * @type {SparrStatsData}
     * @memberof SparrStatsResponse
     */
    response: SparrStatsData;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum SparrVoiceAccent {
    American = "American",
    Indian = "Indian",
    Australian = "Australian",
    British = "British",
    Hindi = "Hindi",
    MiddleEastern = "Middle Eastern"
}
/**
 *
 * @export
 * @interface SparrVoiceInput
 */
export interface SparrVoiceInput {
    /**
     *
     * @type {SparrLanguageAccentCombo}
     * @memberof SparrVoiceInput
     */
    languageAccent: SparrLanguageAccentCombo;
    /**
     *
     * @type {string}
     * @memberof SparrVoiceInput
     */
    modelId: string;
    /**
     *
     * @type {string}
     * @memberof SparrVoiceInput
     */
    playbackSpeed?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof SparrVoiceInput
     */
    backgroundNoise?: boolean;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum SparrVoiceLanguage {
    English = "English",
    Spanish = "Spanish",
    Hindi = "Hindi"
}
/**
 *
 * @export
 * @interface SparrVoiceOutput
 */
export interface SparrVoiceOutput {
    /**
     *
     * @type {SparrLanguageAccentCombo}
     * @memberof SparrVoiceOutput
     */
    languageAccent: SparrLanguageAccentCombo;
    /**
     *
     * @type {string}
     * @memberof SparrVoiceOutput
     */
    modelId: string;
    /**
     *
     * @type {string}
     * @memberof SparrVoiceOutput
     */
    playbackSpeed?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof SparrVoiceOutput
     */
    backgroundNoise?: boolean;
}
/**
 *
 * @export
 * @interface SparrWorkDetails
 */
export interface SparrWorkDetails {
    /**
     * The company of the persona
     * @type {string}
     * @memberof SparrWorkDetails
     */
    companyName: string | null;
    /**
     * The title of the persona
     * @type {string}
     * @memberof SparrWorkDetails
     */
    jobTitle: string | null;
    /**
     * The description of the persona
     * @type {string}
     * @memberof SparrWorkDetails
     */
    description: string | null;
    /**
     * The start date of the persona
     * @type {string}
     * @memberof SparrWorkDetails
     */
    startDate: string | null;
    /**
     * The end date of the persona
     * @type {string}
     * @memberof SparrWorkDetails
     */
    endDate: string | null;
}
/**
 *
 * @export
 * @interface StatsData
 */
export interface StatsData {
    /**
     *
     * @type {number}
     * @memberof StatsData
     */
    no_of_prospects: number;
    /**
     *
     * @type {number}
     * @memberof StatsData
     */
    appointment_scheduled: number;
    /**
     *
     * @type {number}
     * @memberof StatsData
     */
    unqualified: number;
    /**
     *
     * @type {number}
     * @memberof StatsData
     */
    average_call_duration: number;
}
/**
 *
 * @export
 * @interface StatsResponse
 */
export interface StatsResponse {
    /**
     * Overall stats of prospects
     * @type {StatsData}
     * @memberof StatsResponse
     */
    response: StatsData;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum Status {
    Active = "active",
    Inactive = "inactive",
    Pending = "pending"
}
/**
 *
 * @export
 * @interface Step
 */
export interface Step {
    /**
     * The name of the step
     * @type {string}
     * @memberof Step
     */
    name: string;
    /**
     * The description of the step
     * @type {string}
     * @memberof Step
     */
    description: string;
}
/**
 * Subscription details of the business
 * @export
 * @interface Subscription
 */
export interface Subscription {
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    parentOrgId?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    subscriptionTypeName?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    planName?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    priceId?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    stripeSubscriptionId?: string;
    /**
     *
     * @type {number}
     * @memberof Subscription
     */
    billingCycleStartDate?: number;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    updatedAt?: string;
}
/**
 * Subscription details of the business
 * @export
 * @interface SubscriptionInfo
 */
export interface SubscriptionInfo {
    /**
     *
     * @type {Subscription}
     * @memberof SubscriptionInfo
     */
    subscription?: Subscription | null;
    /**
     *
     * @type {Array<Credit>}
     * @memberof SubscriptionInfo
     */
    credits?: Array<Credit> | null;
}
/**
 *
 * @export
 * @interface SystemMetrics
 */
export interface SystemMetrics {
    /**
     *
     * @type {string}
     * @memberof SystemMetrics
     */
    average_sentiment: string | null;
    /**
     *
     * @type {FillerWords}
     * @memberof SystemMetrics
     */
    filler_words: FillerWords | null;
    /**
     *
     * @type {LongestMonologue}
     * @memberof SystemMetrics
     */
    longest_monologue: LongestMonologue | null;
    /**
     *
     * @type {number}
     * @memberof SystemMetrics
     */
    speech_pace: number | null;
    /**
     *
     * @type {Array<SparrDialogLineWithSentiment>}
     * @memberof SystemMetrics
     */
    dialog_lines_sentiment: Array<SparrDialogLineWithSentiment> | null;
}
/**
 *
 * @export
 * @interface TaxDetailsInput
 */
export interface TaxDetailsInput {
    /**
     * Tax identifier
     * @type {string}
     * @memberof TaxDetailsInput
     */
    id: string;
    /**
     * Any extra info related to Tax
     * @type {object}
     * @memberof TaxDetailsInput
     */
    taxProps: object | null;
}
/**
 *
 * @export
 * @interface TaxDetailsOutput
 */
export interface TaxDetailsOutput {
    /**
     *
     * @type {string}
     * @memberof TaxDetailsOutput
     */
    id: string;
    /**
     *
     * @type {object}
     * @memberof TaxDetailsOutput
     */
    taxProps: object | null;
}
/**
 * Telephone number details of the business
 * @export
 * @interface TelephoneNumber
 */
export interface TelephoneNumber {
    /**
     *
     * @type {string}
     * @memberof TelephoneNumber
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof TelephoneNumber
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof TelephoneNumber
     */
    phoneNumber?: string;
    /**
     *
     * @type {string}
     * @memberof TelephoneNumber
     */
    countryCode?: string;
    /**
     *
     * @type {string}
     * @memberof TelephoneNumber
     */
    agentId?: string | null;
    /**
     *
     * @type {object}
     * @memberof TelephoneNumber
     */
    internalProps?: object | null;
    /**
     *
     * @type {string}
     * @memberof TelephoneNumber
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof TelephoneNumber
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof TelephoneNumber
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof TelephoneNumber
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @interface Transcriber
 */
export interface Transcriber {
    /**
     *
     * @type {string}
     * @memberof Transcriber
     */
    providerName?: string;
    /**
     *
     * @type {string}
     * @memberof Transcriber
     */
    transcriberModel?: string | null;
    /**
     *
     * @type {object}
     * @memberof Transcriber
     */
    providerProps?: object | null;
}
/**
 * Enum for UI node types
 * @export
 * @enum {string}
 */
export declare enum UiNodeType {
    ACTION = "ACTION",
    CONDITION = "CONDITION",
    LOOP = "LOOP",
    SUBFLOW = "SUBFLOW"
}
/**
 *
 * @export
 * @interface UpdateResellerOrganizationRequest
 */
export interface UpdateResellerOrganizationRequest {
    /**
     *
     * @type {string}
     * @memberof UpdateResellerOrganizationRequest
     */
    name?: string | null;
    /**
     *
     * @type {AddressInput}
     * @memberof UpdateResellerOrganizationRequest
     */
    address?: AddressInput | null;
    /**
     *
     * @type {TaxDetailsInput}
     * @memberof UpdateResellerOrganizationRequest
     */
    tax?: TaxDetailsInput | null;
}
/**
 *
 * @export
 * @interface UploadFileResponse
 */
export interface UploadFileResponse {
    /**
     *
     * @type {string}
     * @memberof UploadFileResponse
     */
    message: string;
    /**
     *
     * @type {string}
     * @memberof UploadFileResponse
     */
    fileUrl: string;
}
/**
 * Model representing the users under an organization
 * @export
 * @interface User
 */
export interface User {
    /**
     *
     * @type {string}
     * @memberof User
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    phoneNumber?: string | null;
    /**
     *
     * @type {string}
     * @memberof User
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    role?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    fullName?: string | null;
    /**
     *
     * @type {string}
     * @memberof User
     */
    status: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    updatedAt?: string;
}
/**
 * User id to api key mapping table
 * @export
 * @interface UserApiKeyLink
 */
export interface UserApiKeyLink {
    /**
     *
     * @type {string}
     * @memberof UserApiKeyLink
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof UserApiKeyLink
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof UserApiKeyLink
     */
    userId?: string;
    /**
     *
     * @type {string}
     * @memberof UserApiKeyLink
     */
    secretKey?: string;
    /**
     *
     * @type {string}
     * @memberof UserApiKeyLink
     */
    keyType?: string;
    /**
     *
     * @type {string}
     * @memberof UserApiKeyLink
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof UserApiKeyLink
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof UserApiKeyLink
     */
    expiresAt?: string;
    /**
     *
     * @type {boolean}
     * @memberof UserApiKeyLink
     */
    isActive?: boolean;
}
/**
 * Payload for creating a new user
 * @export
 * @interface UserPayload
 */
export interface UserPayload {
    /**
     *
     * @type {string}
     * @memberof UserPayload
     */
    email?: string | null;
    /**
     *
     * @type {Role}
     * @memberof UserPayload
     */
    role?: Role | null;
    /**
     *
     * @type {string}
     * @memberof UserPayload
     */
    fullName?: string | null;
    /**
     *
     * @type {string}
     * @memberof UserPayload
     */
    phoneNumber?: string | null;
}
/**
 *
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     *
     * @type {Array<string | number>}
     * @memberof ValidationError
     */
    loc: Array<string | number>;
    /**
     *
     * @type {string}
     * @memberof ValidationError
     */
    msg: string;
    /**
     *
     * @type {string}
     * @memberof ValidationError
     */
    type: string;
}
/**
 * Link table to store the list of ai agents accessible for each virtual prospect
 * @export
 * @interface VirtualProspectAIAgentLink
 */
export interface VirtualProspectAIAgentLink {
    /**
     *
     * @type {string}
     * @memberof VirtualProspectAIAgentLink
     */
    virtualProspectId?: string;
    /**
     *
     * @type {string}
     * @memberof VirtualProspectAIAgentLink
     */
    aiAgentId?: string;
}
/**
 *
 * @export
 * @interface VirtualProspectInput
 */
export interface VirtualProspectInput {
    /**
     * Name of the virtual prospect
     * @type {string}
     * @memberof VirtualProspectInput
     */
    name: string;
    /**
     * Description of the virtual prospect
     * @type {string}
     * @memberof VirtualProspectInput
     */
    description?: string | null;
    /**
     * Attributes of the virtual prospect
     * @type {PersonaAttributesAndTraits}
     * @memberof VirtualProspectInput
     */
    personaAttributes: PersonaAttributesAndTraits;
    /**
     * Additional information about the virtual prospect
     * @type {string}
     * @memberof VirtualProspectInput
     */
    additionalInfo?: string | null;
    /**
     * Voice of the virtual prospect
     * @type {VoiceInput}
     * @memberof VirtualProspectInput
     */
    voice?: VoiceInput | null;
    /**
     * Type of the virtual prospect
     * @type {VirtualProspectTypeEnum}
     * @memberof VirtualProspectInput
     */
    virtualProspectType?: VirtualProspectTypeEnum | null;
    /**
     * Context for the virtual prospect
     * @type {string}
     * @memberof VirtualProspectInput
     */
    context?: string | null;
}
/**
 * Virtual prospect details for sparring
 * @export
 * @interface VirtualProspectOutput
 */
export interface VirtualProspectOutput {
    /**
     *
     * @type {string}
     * @memberof VirtualProspectOutput
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof VirtualProspectOutput
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof VirtualProspectOutput
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof VirtualProspectOutput
     */
    description?: string | null;
    /**
     *
     * @type {PersonaAttributesAndTraits}
     * @memberof VirtualProspectOutput
     */
    personaAttributes: PersonaAttributesAndTraits | null;
    /**
     * Additional information about the virtual prospect
     * @type {string}
     * @memberof VirtualProspectOutput
     */
    additionalInfo?: string | null;
    /**
     *
     * @type {VoiceOutput}
     * @memberof VirtualProspectOutput
     */
    voice?: VoiceOutput | null;
    /**
     * Context for the virtual prospect
     * @type {string}
     * @memberof VirtualProspectOutput
     */
    context?: string | null;
    /**
     * Type of the virtual prospect
     * @type {VirtualProspectTypeEnum}
     * @memberof VirtualProspectOutput
     */
    virtualProspectType?: VirtualProspectTypeEnum;
    /**
     *
     * @type {string}
     * @memberof VirtualProspectOutput
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof VirtualProspectOutput
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof VirtualProspectOutput
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof VirtualProspectOutput
     */
    updatedAt?: string;
}
/**
 * Enum which stores the list of types of sparring calls
 * @export
 * @enum {string}
 */
export declare enum VirtualProspectTypeEnum {
    INBOUND = "INBOUND",
    OUTBOUND = "OUTBOUND"
}
/**
 *
 * @export
 * @interface VoiceInput
 */
export interface VoiceInput {
    /**
     *
     * @type {string}
     * @memberof VoiceInput
     */
    gender: VoiceInputGenderEnum;
    /**
     *
     * @type {LanguageAccentCombo}
     * @memberof VoiceInput
     */
    languageAccent: LanguageAccentCombo;
    /**
     *
     * @type {string}
     * @memberof VoiceInput
     */
    modelId: string;
    /**
     *
     * @type {string}
     * @memberof VoiceInput
     */
    playbackSpeed?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof VoiceInput
     */
    backgroundNoise?: boolean;
}
/**
    * @export
    * @enum {string}
    */
export declare enum VoiceInputGenderEnum {
    Male = "Male",
    Female = "Female",
    Neutral = "Neutral"
}
/**
 *
 * @export
 * @interface VoiceModel
 */
export interface VoiceModel {
    /**
     *
     * @type {VoiceOutput}
     * @memberof VoiceModel
     */
    voice: VoiceOutput;
    /**
     *
     * @type {string}
     * @memberof VoiceModel
     */
    previewUrl: string;
    /**
     *
     * @type {string}
     * @memberof VoiceModel
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof VoiceModel
     */
    voiceDescription: string;
}
/**
 *
 * @export
 * @interface VoiceOutput
 */
export interface VoiceOutput {
    /**
     *
     * @type {string}
     * @memberof VoiceOutput
     */
    gender: VoiceOutputGenderEnum;
    /**
     *
     * @type {LanguageAccentCombo}
     * @memberof VoiceOutput
     */
    languageAccent: LanguageAccentCombo;
    /**
     *
     * @type {string}
     * @memberof VoiceOutput
     */
    modelId: string;
    /**
     *
     * @type {string}
     * @memberof VoiceOutput
     */
    playbackSpeed?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof VoiceOutput
     */
    backgroundNoise?: boolean;
}
/**
    * @export
    * @enum {string}
    */
export declare enum VoiceOutputGenderEnum {
    Male = "Male",
    Female = "Female",
    Neutral = "Neutral"
}
/**
 * Workflow represents a sequence of steps that can be performed by an app
 * @export
 * @interface Workflow
 */
export interface Workflow {
    /**
     * The user who created.
     * @type {string}
     * @memberof Workflow
     */
    createdBy?: string;
    /**
     * The date and time it was created.
     * @type {string}
     * @memberof Workflow
     */
    createdAt?: string;
    /**
     * The user who last updated.
     * @type {string}
     * @memberof Workflow
     */
    updatedBy?: string;
    /**
     * The date and time when it was last updated.
     * @type {string}
     * @memberof Workflow
     */
    updatedAt?: string;
    /**
     * The workspace of the entity.
     * @type {string}
     * @memberof Workflow
     */
    orgId?: string;
    /**
     * The name of the workflow
     * @type {string}
     * @memberof Workflow
     */
    name?: string;
    /**
     * The description of the workflow
     * @type {string}
     * @memberof Workflow
     */
    description?: string | null;
    /**
     * The version of the workflow
     * @type {string}
     * @memberof Workflow
     */
    version?: string;
    /**
     * The steps of the workflow
     * @type {{ [key: string]: WorkflowStepOutput; }}
     * @memberof Workflow
     */
    steps: {
        [key: string]: WorkflowStepOutput;
    };
    /**
     * The id of the start step
     * @type {string}
     * @memberof Workflow
     */
    startStepId?: string;
    /**
     * The unique identifier of the workflow
     * @type {string}
     * @memberof Workflow
     */
    id?: string;
}
/**
 *
 * @export
 * @interface WorkflowActivityInfo
 */
export interface WorkflowActivityInfo {
    /**
     *
     * @type {string}
     * @memberof WorkflowActivityInfo
     */
    step_name: string;
    /**
     *
     * @type {string}
     * @memberof WorkflowActivityInfo
     */
    status: string;
    /**
     *
     * @type {object}
     * @memberof WorkflowActivityInfo
     */
    input: object;
    /**
     *
     * @type {object}
     * @memberof WorkflowActivityInfo
     */
    result: object;
    /**
     *
     * @type {string}
     * @memberof WorkflowActivityInfo
     */
    start_time?: string | null;
    /**
     *
     * @type {string}
     * @memberof WorkflowActivityInfo
     */
    end_time?: string | null;
}
/**
 * Workflow Context Model
 * @export
 * @interface WorkflowContext
 */
export interface WorkflowContext {
    /**
     * The ID of the organization
     * @type {string}
     * @memberof WorkflowContext
     */
    orgId: string;
    /**
     * The ID of the workflow
     * @type {string}
     * @memberof WorkflowContext
     */
    workflowId: string;
    /**
     * The ID of the run
     * @type {string}
     * @memberof WorkflowContext
     */
    runId: string;
    /**
     * The input of the step
     * @type {object}
     * @memberof WorkflowContext
     */
    stepInput: object;
    /**
     * The response of the step
     * @type {object}
     * @memberof WorkflowContext
     */
    stepResponse: object;
}
/**
 * Core Workflow Model
 * @export
 * @interface WorkflowCore
 */
export interface WorkflowCore {
    /**
     * The name of the workflow
     * @type {string}
     * @memberof WorkflowCore
     */
    name?: string;
    /**
     * The description of the workflow
     * @type {string}
     * @memberof WorkflowCore
     */
    description?: string | null;
    /**
     * The version of the workflow
     * @type {string}
     * @memberof WorkflowCore
     */
    version?: string;
    /**
     * The steps of the workflow
     * @type {{ [key: string]: WorkflowStepInput; }}
     * @memberof WorkflowCore
     */
    steps: {
        [key: string]: WorkflowStepInput;
    };
    /**
     * The id of the start step
     * @type {string}
     * @memberof WorkflowCore
     */
    startStepId?: string;
}
/**
 * Core Workflow Execution Model
 * @export
 * @interface WorkflowExecution
 */
export interface WorkflowExecution {
    /**
     * The name of the workflow
     * @type {string}
     * @memberof WorkflowExecution
     */
    workflowName: string;
    /**
     * The start timestamp of the workflow
     * @type {string}
     * @memberof WorkflowExecution
     */
    workflowStartTimestamp: string | null;
    /**
     * The end timestamp of the workflow
     * @type {string}
     * @memberof WorkflowExecution
     */
    workflowEndTimestamp: string | null;
    /**
     * The id of the workflow
     * @type {string}
     * @memberof WorkflowExecution
     */
    workflowId: string;
    /**
     * The run id of the workflow
     * @type {string}
     * @memberof WorkflowExecution
     */
    workflowRunId: string;
    /**
     * The status of the workflow execution
     * @type {string}
     * @memberof WorkflowExecution
     */
    status: string;
    /**
     * The activity info of the workflow execution
     * @type {Array<WorkflowActivityInfo>}
     * @memberof WorkflowExecution
     */
    activityInfo: Array<WorkflowActivityInfo>;
    /**
     * The final result of the workflow execution
     * @type {object}
     * @memberof WorkflowExecution
     */
    result: object;
}
/**
 * Flow Step Model
 * @export
 * @interface WorkflowStepInput
 */
export interface WorkflowStepInput {
    /**
     * The id of the step
     * @type {string}
     * @memberof WorkflowStepInput
     */
    stepId?: string;
    /**
     * The connection id of the app
     * @type {string}
     * @memberof WorkflowStepInput
     */
    appConnectionId?: string | null;
    /**
     * The app action id of the app
     * @type {string}
     * @memberof WorkflowStepInput
     */
    appActionId?: string;
    /**
     * The id of the app
     * @type {string}
     * @memberof WorkflowStepInput
     */
    appId?: string;
    /**
     * The name of the app. It must match the app name in AppDefinition implementation
     * @type {string}
     * @memberof WorkflowStepInput
     */
    appName?: string;
    /**
     * The version of the app. It must match the app version in AppDefinition implementation
     * @type {string}
     * @memberof WorkflowStepInput
     */
    appVersion?: string;
    /**
     * The data resolver on how to resolve the data for the step
     * @type {string}
     * @memberof WorkflowStepInput
     */
    dataResolver?: string | null;
    /**
     * Resolver for determining the next step
     * @type {NextStepResolver}
     * @memberof WorkflowStepInput
     */
    nextStepResolver: NextStepResolver;
}
/**
 * Flow Step Model
 * @export
 * @interface WorkflowStepOutput
 */
export interface WorkflowStepOutput {
    /**
     * The id of the step
     * @type {string}
     * @memberof WorkflowStepOutput
     */
    stepId?: string;
    /**
     * The connection id of the app
     * @type {string}
     * @memberof WorkflowStepOutput
     */
    appConnectionId?: string | null;
    /**
     * The app action id of the app
     * @type {string}
     * @memberof WorkflowStepOutput
     */
    appActionId?: string;
    /**
     * The id of the app
     * @type {string}
     * @memberof WorkflowStepOutput
     */
    appId?: string;
    /**
     * The name of the app. It must match the app name in AppDefinition implementation
     * @type {string}
     * @memberof WorkflowStepOutput
     */
    appName?: string;
    /**
     * The version of the app. It must match the app version in AppDefinition implementation
     * @type {string}
     * @memberof WorkflowStepOutput
     */
    appVersion?: string;
    /**
     * The data resolver on how to resolve the data for the step
     * @type {string}
     * @memberof WorkflowStepOutput
     */
    dataResolver?: string | null;
    /**
     * Resolver for determining the next step
     * @type {NextStepResolver}
     * @memberof WorkflowStepOutput
     */
    nextStepResolver: NextStepResolver;
}
/**
 *
 * @export
 * @interface WorkflowStepTriggerRequest
 */
export interface WorkflowStepTriggerRequest {
    /**
     *
     * @type {WorkflowContext}
     * @memberof WorkflowStepTriggerRequest
     */
    workflowContext: WorkflowContext;
    /**
     *
     * @type {WorkflowStepInput}
     * @memberof WorkflowStepTriggerRequest
     */
    workflowStep: WorkflowStepInput;
}
/**
 *
 * @export
 * @interface WorkflowStepTriggerResponse
 */
export interface WorkflowStepTriggerResponse {
    /**
     *
     * @type {object}
     * @memberof WorkflowStepTriggerResponse
     */
    input: object;
    /**
     *
     * @type {object}
     * @memberof WorkflowStepTriggerResponse
     */
    response: object;
}
/**
 * ActionAgentLinkApi - axios parameter creator
 * @export
 */
export declare const ActionAgentLinkApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a Link Between an Action and an Agent
     * @summary Create a Link Between an Action and an Agent
     * @param {string} actionId ID of the action
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createActionAgentLinkV1: (actionId: string, agentId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a Link Between an Action and an Agent
     * @summary Delete a Link Between an Action and an Agent
     * @param {string} actionId ID of the action
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteActionAgentLinkV1: (actionId: string, agentId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List All Actions Linked to a Specific Agent
     * @summary List All Actions Linked to a Specific Agent
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActionsOfAgentV1: (agentId: string, options?: any) => Promise<RequestArgs>;
};
/**
 * ActionAgentLinkApi - functional programming interface
 * @export
 */
export declare const ActionAgentLinkApiFp: (configuration?: Configuration) => {
    /**
     * Create a Link Between an Action and an Agent
     * @summary Create a Link Between an Action and an Agent
     * @param {string} actionId ID of the action
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createActionAgentLinkV1(actionId: string, agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * Delete a Link Between an Action and an Agent
     * @summary Delete a Link Between an Action and an Agent
     * @param {string} actionId ID of the action
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteActionAgentLinkV1(actionId: string, agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * List All Actions Linked to a Specific Agent
     * @summary List All Actions Linked to a Specific Agent
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActionsOfAgentV1(agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ActionOutput>>>;
};
/**
 * ActionAgentLinkApi - factory interface
 * @export
 */
export declare const ActionAgentLinkApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a Link Between an Action and an Agent
     * @summary Create a Link Between an Action and an Agent
     * @param {string} actionId ID of the action
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createActionAgentLinkV1(actionId: string, agentId: string, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * Delete a Link Between an Action and an Agent
     * @summary Delete a Link Between an Action and an Agent
     * @param {string} actionId ID of the action
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteActionAgentLinkV1(actionId: string, agentId: string, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * List All Actions Linked to a Specific Agent
     * @summary List All Actions Linked to a Specific Agent
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActionsOfAgentV1(agentId: string, options?: any): AxiosPromise<Array<ActionOutput>>;
};
/**
 * ActionAgentLinkApi - object-oriented interface
 * @export
 * @class ActionAgentLinkApi
 * @extends {BaseAPI}
 */
export declare class ActionAgentLinkApi extends BaseAPI {
    /**
     * Create a Link Between an Action and an Agent
     * @summary Create a Link Between an Action and an Agent
     * @param {string} actionId ID of the action
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionAgentLinkApi
     */
    createActionAgentLinkV1(actionId: string, agentId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * Delete a Link Between an Action and an Agent
     * @summary Delete a Link Between an Action and an Agent
     * @param {string} actionId ID of the action
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionAgentLinkApi
     */
    deleteActionAgentLinkV1(actionId: string, agentId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * List All Actions Linked to a Specific Agent
     * @summary List All Actions Linked to a Specific Agent
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionAgentLinkApi
     */
    listActionsOfAgentV1(agentId: string, options?: any): Promise<import("axios").AxiosResponse<ActionOutput[]>>;
}
/**
 * ActionsApi - axios parameter creator
 * @export
 */
export declare const ActionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a New Action
     * @summary Create a New Action
     * @param {ActionInput} actionInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createActionV1: (actionInput: ActionInput, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a Specific Action by ID
     * @summary Delete a Specific Action by ID
     * @param {string} actionId ID of the action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteActionV1: (actionId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a Specific Action by ID
     * @summary Get a Specific Action by ID
     * @param {string} actionId ID of the action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActionV1: (actionId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List All Actions
     * @summary List All Actions
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActionsV1: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Update a Specific Action by ID
     * @summary Update a Specific Action by ID
     * @param {string} actionId ID of the action
     * @param {ActionInput} actionInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateActionV1: (actionId: string, actionInput: ActionInput, options?: any) => Promise<RequestArgs>;
};
/**
 * ActionsApi - functional programming interface
 * @export
 */
export declare const ActionsApiFp: (configuration?: Configuration) => {
    /**
     * Create a New Action
     * @summary Create a New Action
     * @param {ActionInput} actionInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createActionV1(actionInput: ActionInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActionOutput>>;
    /**
     * Delete a Specific Action by ID
     * @summary Delete a Specific Action by ID
     * @param {string} actionId ID of the action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteActionV1(actionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * Get a Specific Action by ID
     * @summary Get a Specific Action by ID
     * @param {string} actionId ID of the action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActionV1(actionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActionOutput>>;
    /**
     * List All Actions
     * @summary List All Actions
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActionsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ActionOutput>>>;
    /**
     * Update a Specific Action by ID
     * @summary Update a Specific Action by ID
     * @param {string} actionId ID of the action
     * @param {ActionInput} actionInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateActionV1(actionId: string, actionInput: ActionInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActionOutput>>;
};
/**
 * ActionsApi - factory interface
 * @export
 */
export declare const ActionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a New Action
     * @summary Create a New Action
     * @param {ActionInput} actionInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createActionV1(actionInput: ActionInput, options?: any): AxiosPromise<ActionOutput>;
    /**
     * Delete a Specific Action by ID
     * @summary Delete a Specific Action by ID
     * @param {string} actionId ID of the action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteActionV1(actionId: string, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * Get a Specific Action by ID
     * @summary Get a Specific Action by ID
     * @param {string} actionId ID of the action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActionV1(actionId: string, options?: any): AxiosPromise<ActionOutput>;
    /**
     * List All Actions
     * @summary List All Actions
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActionsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): AxiosPromise<Array<ActionOutput>>;
    /**
     * Update a Specific Action by ID
     * @summary Update a Specific Action by ID
     * @param {string} actionId ID of the action
     * @param {ActionInput} actionInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateActionV1(actionId: string, actionInput: ActionInput, options?: any): AxiosPromise<ActionOutput>;
};
/**
 * ActionsApi - object-oriented interface
 * @export
 * @class ActionsApi
 * @extends {BaseAPI}
 */
export declare class ActionsApi extends BaseAPI {
    /**
     * Create a New Action
     * @summary Create a New Action
     * @param {ActionInput} actionInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    createActionV1(actionInput: ActionInput, options?: any): Promise<import("axios").AxiosResponse<ActionOutput>>;
    /**
     * Delete a Specific Action by ID
     * @summary Delete a Specific Action by ID
     * @param {string} actionId ID of the action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    deleteActionV1(actionId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * Get a Specific Action by ID
     * @summary Get a Specific Action by ID
     * @param {string} actionId ID of the action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    getActionV1(actionId: string, options?: any): Promise<import("axios").AxiosResponse<ActionOutput>>;
    /**
     * List All Actions
     * @summary List All Actions
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    listActionsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<import("axios").AxiosResponse<ActionOutput[]>>;
    /**
     * Update a Specific Action by ID
     * @summary Update a Specific Action by ID
     * @param {string} actionId ID of the action
     * @param {ActionInput} actionInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    updateActionV1(actionId: string, actionInput: ActionInput, options?: any): Promise<import("axios").AxiosResponse<ActionOutput>>;
}
/**
 * AgentsApi - axios parameter creator
 * @export
 */
export declare const AgentsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a New AI Agent
     * @summary Create a New AI Agent
     * @param {AIAgentInput} aIAgentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAIAgentV1: (aIAgentInput: AIAgentInput, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a Specific AI Agent by ID
     * @summary Delete a Specific AI Agent by ID
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAIAgentV1: (agentId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a Specific AI Agent by ID
     * @summary Get a Specific AI Agent by ID
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAIAgentV1: (agentId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List All AI Agents
     * @summary List All AI Agents
     * @param {AppEnumInput} [app]
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAIAgentsV1: (app?: AppEnumInput, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Update a Specific AI Agent by ID
     * @summary Update a Specific AI Agent by ID
     * @param {string} agentId ID of the agent
     * @param {AIAgentInput} aIAgentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAIAgentV1: (agentId: string, aIAgentInput: AIAgentInput, options?: any) => Promise<RequestArgs>;
};
/**
 * AgentsApi - functional programming interface
 * @export
 */
export declare const AgentsApiFp: (configuration?: Configuration) => {
    /**
     * Create a New AI Agent
     * @summary Create a New AI Agent
     * @param {AIAgentInput} aIAgentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAIAgentV1(aIAgentInput: AIAgentInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AIAgentOutput>>;
    /**
     * Delete a Specific AI Agent by ID
     * @summary Delete a Specific AI Agent by ID
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAIAgentV1(agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * Get a Specific AI Agent by ID
     * @summary Get a Specific AI Agent by ID
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAIAgentV1(agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AIAgentOutput>>;
    /**
     * List All AI Agents
     * @summary List All AI Agents
     * @param {AppEnumInput} [app]
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAIAgentsV1(app?: AppEnumInput, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AIAgentOutput>>>;
    /**
     * Update a Specific AI Agent by ID
     * @summary Update a Specific AI Agent by ID
     * @param {string} agentId ID of the agent
     * @param {AIAgentInput} aIAgentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAIAgentV1(agentId: string, aIAgentInput: AIAgentInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AIAgentOutput>>;
};
/**
 * AgentsApi - factory interface
 * @export
 */
export declare const AgentsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a New AI Agent
     * @summary Create a New AI Agent
     * @param {AIAgentInput} aIAgentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAIAgentV1(aIAgentInput: AIAgentInput, options?: any): AxiosPromise<AIAgentOutput>;
    /**
     * Delete a Specific AI Agent by ID
     * @summary Delete a Specific AI Agent by ID
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAIAgentV1(agentId: string, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * Get a Specific AI Agent by ID
     * @summary Get a Specific AI Agent by ID
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAIAgentV1(agentId: string, options?: any): AxiosPromise<AIAgentOutput>;
    /**
     * List All AI Agents
     * @summary List All AI Agents
     * @param {AppEnumInput} [app]
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAIAgentsV1(app?: AppEnumInput, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): AxiosPromise<Array<AIAgentOutput>>;
    /**
     * Update a Specific AI Agent by ID
     * @summary Update a Specific AI Agent by ID
     * @param {string} agentId ID of the agent
     * @param {AIAgentInput} aIAgentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAIAgentV1(agentId: string, aIAgentInput: AIAgentInput, options?: any): AxiosPromise<AIAgentOutput>;
};
/**
 * AgentsApi - object-oriented interface
 * @export
 * @class AgentsApi
 * @extends {BaseAPI}
 */
export declare class AgentsApi extends BaseAPI {
    /**
     * Create a New AI Agent
     * @summary Create a New AI Agent
     * @param {AIAgentInput} aIAgentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    createAIAgentV1(aIAgentInput: AIAgentInput, options?: any): Promise<import("axios").AxiosResponse<AIAgentOutput>>;
    /**
     * Delete a Specific AI Agent by ID
     * @summary Delete a Specific AI Agent by ID
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    deleteAIAgentV1(agentId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * Get a Specific AI Agent by ID
     * @summary Get a Specific AI Agent by ID
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    getAIAgentV1(agentId: string, options?: any): Promise<import("axios").AxiosResponse<AIAgentOutput>>;
    /**
     * List All AI Agents
     * @summary List All AI Agents
     * @param {AppEnumInput} [app]
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    listAIAgentsV1(app?: AppEnumInput, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<import("axios").AxiosResponse<AIAgentOutput[]>>;
    /**
     * Update a Specific AI Agent by ID
     * @summary Update a Specific AI Agent by ID
     * @param {string} agentId ID of the agent
     * @param {AIAgentInput} aIAgentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    updateAIAgentV1(agentId: string, aIAgentInput: AIAgentInput, options?: any): Promise<import("axios").AxiosResponse<AIAgentOutput>>;
}
/**
 * AnalyticsApi - axios parameter creator
 * @export
 */
export declare const AnalyticsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get fine grained analytics data from Trata AI like call, duration stats, etc.
     * @summary Get Metrics
     * @param {BatchMetricsRequestsInput} batchMetricsRequestsInput
     * @param {string} [app]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetricsV1MetricsPost: (batchMetricsRequestsInput: BatchMetricsRequestsInput, app?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get aggregated stats from Trata AI like call count, prospect count, etc.
     * @summary Get Aggregated Stats
     * @param {AppEnumInput} [app]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOverallStatsV1StatsGet: (app?: AppEnumInput, options?: any) => Promise<RequestArgs>;
};
/**
 * AnalyticsApi - functional programming interface
 * @export
 */
export declare const AnalyticsApiFp: (configuration?: Configuration) => {
    /**
     * Get fine grained analytics data from Trata AI like call, duration stats, etc.
     * @summary Get Metrics
     * @param {BatchMetricsRequestsInput} batchMetricsRequestsInput
     * @param {string} [app]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetricsV1MetricsPost(batchMetricsRequestsInput: BatchMetricsRequestsInput, app?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchMetricsResponseInput>>;
    /**
     * Get aggregated stats from Trata AI like call count, prospect count, etc.
     * @summary Get Aggregated Stats
     * @param {AppEnumInput} [app]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOverallStatsV1StatsGet(app?: AppEnumInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatsResponse>>;
};
/**
 * AnalyticsApi - factory interface
 * @export
 */
export declare const AnalyticsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get fine grained analytics data from Trata AI like call, duration stats, etc.
     * @summary Get Metrics
     * @param {BatchMetricsRequestsInput} batchMetricsRequestsInput
     * @param {string} [app]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetricsV1MetricsPost(batchMetricsRequestsInput: BatchMetricsRequestsInput, app?: string, options?: any): AxiosPromise<BatchMetricsResponseInput>;
    /**
     * Get aggregated stats from Trata AI like call count, prospect count, etc.
     * @summary Get Aggregated Stats
     * @param {AppEnumInput} [app]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOverallStatsV1StatsGet(app?: AppEnumInput, options?: any): AxiosPromise<StatsResponse>;
};
/**
 * AnalyticsApi - object-oriented interface
 * @export
 * @class AnalyticsApi
 * @extends {BaseAPI}
 */
export declare class AnalyticsApi extends BaseAPI {
    /**
     * Get fine grained analytics data from Trata AI like call, duration stats, etc.
     * @summary Get Metrics
     * @param {BatchMetricsRequestsInput} batchMetricsRequestsInput
     * @param {string} [app]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    getMetricsV1MetricsPost(batchMetricsRequestsInput: BatchMetricsRequestsInput, app?: string, options?: any): Promise<import("axios").AxiosResponse<BatchMetricsResponseInput>>;
    /**
     * Get aggregated stats from Trata AI like call count, prospect count, etc.
     * @summary Get Aggregated Stats
     * @param {AppEnumInput} [app]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    getOverallStatsV1StatsGet(app?: AppEnumInput, options?: any): Promise<import("axios").AxiosResponse<StatsResponse>>;
}
/**
 * ApiKeyApi - axios parameter creator
 * @export
 */
export declare const ApiKeyApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create Api Key
     * @param {ApiKeyRequest} apiKeyRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createApiKeyV1: (apiKeyRequest: ApiKeyRequest, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete Api Key
     * @param {string} keyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApiKeyV1: (keyId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Call Key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCallKeyV1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary List Api Keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApiKeysV1: (options?: any) => Promise<RequestArgs>;
};
/**
 * ApiKeyApi - functional programming interface
 * @export
 */
export declare const ApiKeyApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create Api Key
     * @param {ApiKeyRequest} apiKeyRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createApiKeyV1(apiKeyRequest: ApiKeyRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserApiKeyLink>>;
    /**
     *
     * @summary Delete Api Key
     * @param {string} keyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApiKeyV1(keyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     *
     * @summary Get Call Key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCallKeyV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserApiKeyLink>>;
    /**
     *
     * @summary List Api Keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApiKeysV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserApiKeyLink>>>;
};
/**
 * ApiKeyApi - factory interface
 * @export
 */
export declare const ApiKeyApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create Api Key
     * @param {ApiKeyRequest} apiKeyRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createApiKeyV1(apiKeyRequest: ApiKeyRequest, options?: any): AxiosPromise<UserApiKeyLink>;
    /**
     *
     * @summary Delete Api Key
     * @param {string} keyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApiKeyV1(keyId: string, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     *
     * @summary Get Call Key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCallKeyV1(options?: any): AxiosPromise<UserApiKeyLink>;
    /**
     *
     * @summary List Api Keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApiKeysV1(options?: any): AxiosPromise<Array<UserApiKeyLink>>;
};
/**
 * ApiKeyApi - object-oriented interface
 * @export
 * @class ApiKeyApi
 * @extends {BaseAPI}
 */
export declare class ApiKeyApi extends BaseAPI {
    /**
     *
     * @summary Create Api Key
     * @param {ApiKeyRequest} apiKeyRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeyApi
     */
    createApiKeyV1(apiKeyRequest: ApiKeyRequest, options?: any): Promise<import("axios").AxiosResponse<UserApiKeyLink>>;
    /**
     *
     * @summary Delete Api Key
     * @param {string} keyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeyApi
     */
    deleteApiKeyV1(keyId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     *
     * @summary Get Call Key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeyApi
     */
    getCallKeyV1(options?: any): Promise<import("axios").AxiosResponse<UserApiKeyLink>>;
    /**
     *
     * @summary List Api Keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeyApi
     */
    listApiKeysV1(options?: any): Promise<import("axios").AxiosResponse<UserApiKeyLink[]>>;
}
/**
 * BillingApi - axios parameter creator
 * @export
 */
export declare const BillingApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create Checkout Session For Billable Product
     * @param {string} billableProductId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCheckoutSessionForBillableProductV1: (billableProductId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Customer Session Secret
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerSessionSecretV1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Subscription Billable Products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionBillableProductsV1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Subscription Portal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionPortalV1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Subscription
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionV1: (options?: any) => Promise<RequestArgs>;
};
/**
 * BillingApi - functional programming interface
 * @export
 */
export declare const BillingApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create Checkout Session For Billable Product
     * @param {string} billableProductId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCheckoutSessionForBillableProductV1(billableProductId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary Get Customer Session Secret
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerSessionSecretV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary Get Subscription Billable Products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionBillableProductsV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Price>>>;
    /**
     *
     * @summary Get Subscription Portal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionPortalV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary Get Subscription
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionInfo>>;
};
/**
 * BillingApi - factory interface
 * @export
 */
export declare const BillingApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create Checkout Session For Billable Product
     * @param {string} billableProductId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCheckoutSessionForBillableProductV1(billableProductId: string, options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Get Customer Session Secret
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerSessionSecretV1(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Get Subscription Billable Products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionBillableProductsV1(options?: any): AxiosPromise<Array<Price>>;
    /**
     *
     * @summary Get Subscription Portal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionPortalV1(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Get Subscription
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionV1(options?: any): AxiosPromise<SubscriptionInfo>;
};
/**
 * BillingApi - object-oriented interface
 * @export
 * @class BillingApi
 * @extends {BaseAPI}
 */
export declare class BillingApi extends BaseAPI {
    /**
     *
     * @summary Create Checkout Session For Billable Product
     * @param {string} billableProductId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    createCheckoutSessionForBillableProductV1(billableProductId: string, options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     *
     * @summary Get Customer Session Secret
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    getCustomerSessionSecretV1(options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     *
     * @summary Get Subscription Billable Products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    getSubscriptionBillableProductsV1(options?: any): Promise<import("axios").AxiosResponse<Price[]>>;
    /**
     *
     * @summary Get Subscription Portal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    getSubscriptionPortalV1(options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     *
     * @summary Get Subscription
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    getSubscriptionV1(options?: any): Promise<import("axios").AxiosResponse<SubscriptionInfo>>;
}
/**
 * ConversationProspectLinkApi - axios parameter creator
 * @export
 */
export declare const ConversationProspectLinkApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a link between a conversation and a prospect
     * @summary Create a link between a conversation and a prospect
     * @param {string} conversationId ID of the conversation
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConversationProspectLinkV1: (conversationId: string, prospectId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a link between a conversation and a prospect
     * @summary Delete a link between a conversation and a prospect
     * @param {string} conversationId ID of the conversation
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConversationProspectLinkV1: (conversationId: string, prospectId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List all conversations linked to a specific prospect
     * @summary List all conversations linked to a specific prospect
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConversationsOfProspectsV1: (prospectId: string, options?: any) => Promise<RequestArgs>;
};
/**
 * ConversationProspectLinkApi - functional programming interface
 * @export
 */
export declare const ConversationProspectLinkApiFp: (configuration?: Configuration) => {
    /**
     * Create a link between a conversation and a prospect
     * @summary Create a link between a conversation and a prospect
     * @param {string} conversationId ID of the conversation
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConversationProspectLinkV1(conversationId: string, prospectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * Delete a link between a conversation and a prospect
     * @summary Delete a link between a conversation and a prospect
     * @param {string} conversationId ID of the conversation
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConversationProspectLinkV1(conversationId: string, prospectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * List all conversations linked to a specific prospect
     * @summary List all conversations linked to a specific prospect
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConversationsOfProspectsV1(prospectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConversationOutput>>>;
};
/**
 * ConversationProspectLinkApi - factory interface
 * @export
 */
export declare const ConversationProspectLinkApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a link between a conversation and a prospect
     * @summary Create a link between a conversation and a prospect
     * @param {string} conversationId ID of the conversation
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConversationProspectLinkV1(conversationId: string, prospectId: string, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * Delete a link between a conversation and a prospect
     * @summary Delete a link between a conversation and a prospect
     * @param {string} conversationId ID of the conversation
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConversationProspectLinkV1(conversationId: string, prospectId: string, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * List all conversations linked to a specific prospect
     * @summary List all conversations linked to a specific prospect
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConversationsOfProspectsV1(prospectId: string, options?: any): AxiosPromise<Array<ConversationOutput>>;
};
/**
 * ConversationProspectLinkApi - object-oriented interface
 * @export
 * @class ConversationProspectLinkApi
 * @extends {BaseAPI}
 */
export declare class ConversationProspectLinkApi extends BaseAPI {
    /**
     * Create a link between a conversation and a prospect
     * @summary Create a link between a conversation and a prospect
     * @param {string} conversationId ID of the conversation
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationProspectLinkApi
     */
    createConversationProspectLinkV1(conversationId: string, prospectId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * Delete a link between a conversation and a prospect
     * @summary Delete a link between a conversation and a prospect
     * @param {string} conversationId ID of the conversation
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationProspectLinkApi
     */
    deleteConversationProspectLinkV1(conversationId: string, prospectId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * List all conversations linked to a specific prospect
     * @summary List all conversations linked to a specific prospect
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationProspectLinkApi
     */
    listConversationsOfProspectsV1(prospectId: string, options?: any): Promise<import("axios").AxiosResponse<ConversationOutput[]>>;
}
/**
 * ConversationsApi - axios parameter creator
 * @export
 */
export declare const ConversationsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Add Feedback to a Specific Conversation
     * @summary Add Feedback to a Specific Conversation
     * @param {string} conversationId ID of the conversation
     * @param {Comment} comment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addFeedbackV1: (conversationId: string, comment: Comment, options?: any) => Promise<RequestArgs>;
    /**
     * Create a New Conversation
     * @summary Create a New Conversation
     * @param {ConversationInput} conversationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConversationV1: (conversationInput: ConversationInput, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a Specific Conversation by ID
     * @summary Delete a Specific Conversation by ID
     * @param {string} conversationId ID of the conversation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConversationV1: (conversationId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a Specific Conversation by ID
     * @summary Get a Specific Conversation by ID
     * @param {string} conversationId ID of the conversation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConversationV1: (conversationId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List All Conversations
     * @summary List All Conversations
     * @param {AppEnumInput} [app]
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConversationsV1: (app?: AppEnumInput, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Update a Specific Conversation by ID
     * @summary Update a Specific Conversation by ID
     * @param {string} conversationId ID of the conversation
     * @param {ConversationInput} conversationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConversationV1: (conversationId: string, conversationInput: ConversationInput, options?: any) => Promise<RequestArgs>;
};
/**
 * ConversationsApi - functional programming interface
 * @export
 */
export declare const ConversationsApiFp: (configuration?: Configuration) => {
    /**
     * Add Feedback to a Specific Conversation
     * @summary Add Feedback to a Specific Conversation
     * @param {string} conversationId ID of the conversation
     * @param {Comment} comment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addFeedbackV1(conversationId: string, comment: Comment, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationFeedback>>;
    /**
     * Create a New Conversation
     * @summary Create a New Conversation
     * @param {ConversationInput} conversationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConversationV1(conversationInput: ConversationInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationOutput>>;
    /**
     * Delete a Specific Conversation by ID
     * @summary Delete a Specific Conversation by ID
     * @param {string} conversationId ID of the conversation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConversationV1(conversationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * Get a Specific Conversation by ID
     * @summary Get a Specific Conversation by ID
     * @param {string} conversationId ID of the conversation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConversationV1(conversationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationOutput>>;
    /**
     * List All Conversations
     * @summary List All Conversations
     * @param {AppEnumInput} [app]
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConversationsV1(app?: AppEnumInput, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConversationOutput>>>;
    /**
     * Update a Specific Conversation by ID
     * @summary Update a Specific Conversation by ID
     * @param {string} conversationId ID of the conversation
     * @param {ConversationInput} conversationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConversationV1(conversationId: string, conversationInput: ConversationInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationOutput>>;
};
/**
 * ConversationsApi - factory interface
 * @export
 */
export declare const ConversationsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Add Feedback to a Specific Conversation
     * @summary Add Feedback to a Specific Conversation
     * @param {string} conversationId ID of the conversation
     * @param {Comment} comment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addFeedbackV1(conversationId: string, comment: Comment, options?: any): AxiosPromise<ConversationFeedback>;
    /**
     * Create a New Conversation
     * @summary Create a New Conversation
     * @param {ConversationInput} conversationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConversationV1(conversationInput: ConversationInput, options?: any): AxiosPromise<ConversationOutput>;
    /**
     * Delete a Specific Conversation by ID
     * @summary Delete a Specific Conversation by ID
     * @param {string} conversationId ID of the conversation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConversationV1(conversationId: string, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * Get a Specific Conversation by ID
     * @summary Get a Specific Conversation by ID
     * @param {string} conversationId ID of the conversation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConversationV1(conversationId: string, options?: any): AxiosPromise<ConversationOutput>;
    /**
     * List All Conversations
     * @summary List All Conversations
     * @param {AppEnumInput} [app]
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConversationsV1(app?: AppEnumInput, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): AxiosPromise<Array<ConversationOutput>>;
    /**
     * Update a Specific Conversation by ID
     * @summary Update a Specific Conversation by ID
     * @param {string} conversationId ID of the conversation
     * @param {ConversationInput} conversationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConversationV1(conversationId: string, conversationInput: ConversationInput, options?: any): AxiosPromise<ConversationOutput>;
};
/**
 * ConversationsApi - object-oriented interface
 * @export
 * @class ConversationsApi
 * @extends {BaseAPI}
 */
export declare class ConversationsApi extends BaseAPI {
    /**
     * Add Feedback to a Specific Conversation
     * @summary Add Feedback to a Specific Conversation
     * @param {string} conversationId ID of the conversation
     * @param {Comment} comment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    addFeedbackV1(conversationId: string, comment: Comment, options?: any): Promise<import("axios").AxiosResponse<ConversationFeedback>>;
    /**
     * Create a New Conversation
     * @summary Create a New Conversation
     * @param {ConversationInput} conversationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    createConversationV1(conversationInput: ConversationInput, options?: any): Promise<import("axios").AxiosResponse<ConversationOutput>>;
    /**
     * Delete a Specific Conversation by ID
     * @summary Delete a Specific Conversation by ID
     * @param {string} conversationId ID of the conversation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    deleteConversationV1(conversationId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * Get a Specific Conversation by ID
     * @summary Get a Specific Conversation by ID
     * @param {string} conversationId ID of the conversation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    getConversationV1(conversationId: string, options?: any): Promise<import("axios").AxiosResponse<ConversationOutput>>;
    /**
     * List All Conversations
     * @summary List All Conversations
     * @param {AppEnumInput} [app]
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    listConversationsV1(app?: AppEnumInput, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<import("axios").AxiosResponse<ConversationOutput[]>>;
    /**
     * Update a Specific Conversation by ID
     * @summary Update a Specific Conversation by ID
     * @param {string} conversationId ID of the conversation
     * @param {ConversationInput} conversationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    updateConversationV1(conversationId: string, conversationInput: ConversationInput, options?: any): Promise<import("axios").AxiosResponse<ConversationOutput>>;
}
/**
 * DataPlaneApi - axios parameter creator
 * @export
 */
export declare const DataPlaneApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a new connection for an AI Agent to start a voice conversation
     * @summary Create Connection
     * @param {string} agentId
     * @param {ConnectionSource} connectionSource
     * @param {string} [prospectId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConnection: (agentId: string, connectionSource: ConnectionSource, prospectId?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get the audio stream xml for Plivo to start a voice conversation
     * @summary Get Audio Stream XML For Plivo
     * @param {string} connectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlivoAudioStreamXml: (connectionId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List connections
     * @summary Listconnections
     * @param {string} [sourceName]
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConnections: (sourceName?: string, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any) => Promise<RequestArgs>;
};
/**
 * DataPlaneApi - functional programming interface
 * @export
 */
export declare const DataPlaneApiFp: (configuration?: Configuration) => {
    /**
     * Create a new connection for an AI Agent to start a voice conversation
     * @summary Create Connection
     * @param {string} agentId
     * @param {ConnectionSource} connectionSource
     * @param {string} [prospectId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConnection(agentId: string, connectionSource: ConnectionSource, prospectId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectionOutput>>;
    /**
     * Get the audio stream xml for Plivo to start a voice conversation
     * @summary Get Audio Stream XML For Plivo
     * @param {string} connectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlivoAudioStreamXml(connectionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * List connections
     * @summary Listconnections
     * @param {string} [sourceName]
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConnections(sourceName?: string, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConnectionOutput>>>;
};
/**
 * DataPlaneApi - factory interface
 * @export
 */
export declare const DataPlaneApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a new connection for an AI Agent to start a voice conversation
     * @summary Create Connection
     * @param {string} agentId
     * @param {ConnectionSource} connectionSource
     * @param {string} [prospectId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConnection(agentId: string, connectionSource: ConnectionSource, prospectId?: string, options?: any): AxiosPromise<ConnectionOutput>;
    /**
     * Get the audio stream xml for Plivo to start a voice conversation
     * @summary Get Audio Stream XML For Plivo
     * @param {string} connectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlivoAudioStreamXml(connectionId: string, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * List connections
     * @summary Listconnections
     * @param {string} [sourceName]
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConnections(sourceName?: string, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): AxiosPromise<Array<ConnectionOutput>>;
};
/**
 * DataPlaneApi - object-oriented interface
 * @export
 * @class DataPlaneApi
 * @extends {BaseAPI}
 */
export declare class DataPlaneApi extends BaseAPI {
    /**
     * Create a new connection for an AI Agent to start a voice conversation
     * @summary Create Connection
     * @param {string} agentId
     * @param {ConnectionSource} connectionSource
     * @param {string} [prospectId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataPlaneApi
     */
    createConnection(agentId: string, connectionSource: ConnectionSource, prospectId?: string, options?: any): Promise<import("axios").AxiosResponse<ConnectionOutput>>;
    /**
     * Get the audio stream xml for Plivo to start a voice conversation
     * @summary Get Audio Stream XML For Plivo
     * @param {string} connectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataPlaneApi
     */
    getPlivoAudioStreamXml(connectionId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * List connections
     * @summary Listconnections
     * @param {string} [sourceName]
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataPlaneApi
     */
    listConnections(sourceName?: string, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<import("axios").AxiosResponse<ConnectionOutput[]>>;
}
/**
 * FilesApi - axios parameter creator
 * @export
 */
export declare const FilesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete files from Trata account
     * @summary Delete Files
     * @param {string} fileIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFileV1: (fileIds: string, options?: any) => Promise<RequestArgs>;
    /**
     * Delete files from Trata reseller account
     * @summary Delete Files
     * @param {string} fileIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResellerFilesV1: (fileIds: string, options?: any) => Promise<RequestArgs>;
    /**
     * Upload file to Trata account to use in AI Agents
     * @summary Upload Files
     * @param {Array<any>} files
     * @param {string} [validator] Validator type to use for file validation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFileV1: (files: Array<any>, validator?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Upload file to Trata account to use in AI Agents
     * @summary Upload Files
     * @param {Array<any>} files
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadResellerFilesV1: (files: Array<any>, options?: any) => Promise<RequestArgs>;
};
/**
 * FilesApi - functional programming interface
 * @export
 */
export declare const FilesApiFp: (configuration?: Configuration) => {
    /**
     * Delete files from Trata account
     * @summary Delete Files
     * @param {string} fileIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFileV1(fileIds: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>>;
    /**
     * Delete files from Trata reseller account
     * @summary Delete Files
     * @param {string} fileIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResellerFilesV1(fileIds: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>>;
    /**
     * Upload file to Trata account to use in AI Agents
     * @summary Upload Files
     * @param {Array<any>} files
     * @param {string} [validator] Validator type to use for file validation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFileV1(files: Array<any>, validator?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Files>>>;
    /**
     * Upload file to Trata account to use in AI Agents
     * @summary Upload Files
     * @param {Array<any>} files
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadResellerFilesV1(files: Array<any>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Files>>>;
};
/**
 * FilesApi - factory interface
 * @export
 */
export declare const FilesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete files from Trata account
     * @summary Delete Files
     * @param {string} fileIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFileV1(fileIds: string, options?: any): AxiosPromise<boolean>;
    /**
     * Delete files from Trata reseller account
     * @summary Delete Files
     * @param {string} fileIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResellerFilesV1(fileIds: string, options?: any): AxiosPromise<boolean>;
    /**
     * Upload file to Trata account to use in AI Agents
     * @summary Upload Files
     * @param {Array<any>} files
     * @param {string} [validator] Validator type to use for file validation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFileV1(files: Array<any>, validator?: string, options?: any): AxiosPromise<Array<Files>>;
    /**
     * Upload file to Trata account to use in AI Agents
     * @summary Upload Files
     * @param {Array<any>} files
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadResellerFilesV1(files: Array<any>, options?: any): AxiosPromise<Array<Files>>;
};
/**
 * FilesApi - object-oriented interface
 * @export
 * @class FilesApi
 * @extends {BaseAPI}
 */
export declare class FilesApi extends BaseAPI {
    /**
     * Delete files from Trata account
     * @summary Delete Files
     * @param {string} fileIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    deleteFileV1(fileIds: string, options?: any): Promise<import("axios").AxiosResponse<boolean>>;
    /**
     * Delete files from Trata reseller account
     * @summary Delete Files
     * @param {string} fileIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    deleteResellerFilesV1(fileIds: string, options?: any): Promise<import("axios").AxiosResponse<boolean>>;
    /**
     * Upload file to Trata account to use in AI Agents
     * @summary Upload Files
     * @param {Array<any>} files
     * @param {string} [validator] Validator type to use for file validation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    uploadFileV1(files: Array<any>, validator?: string, options?: any): Promise<import("axios").AxiosResponse<Files[]>>;
    /**
     * Upload file to Trata account to use in AI Agents
     * @summary Upload Files
     * @param {Array<any>} files
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    uploadResellerFilesV1(files: Array<any>, options?: any): Promise<import("axios").AxiosResponse<Files[]>>;
}
/**
 * HealthApi - axios parameter creator
 * @export
 */
export declare const HealthApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Heart Beat check to check the health of Trata Backend
     * @summary Heart Beat Status Of Trata Backend
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusStatusGet: (options?: any) => Promise<RequestArgs>;
    /**
     * Heart Beat check to check the health of Workflow Service
     * @summary Heart Beat Status Of Workflow Service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusWorkflowsStatusGet: (options?: any) => Promise<RequestArgs>;
};
/**
 * HealthApi - functional programming interface
 * @export
 */
export declare const HealthApiFp: (configuration?: Configuration) => {
    /**
     * Heart Beat check to check the health of Trata Backend
     * @summary Heart Beat Status Of Trata Backend
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusStatusGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Heart Beat check to check the health of Workflow Service
     * @summary Heart Beat Status Of Workflow Service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusWorkflowsStatusGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
};
/**
 * HealthApi - factory interface
 * @export
 */
export declare const HealthApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Heart Beat check to check the health of Trata Backend
     * @summary Heart Beat Status Of Trata Backend
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusStatusGet(options?: any): AxiosPromise<object>;
    /**
     * Heart Beat check to check the health of Workflow Service
     * @summary Heart Beat Status Of Workflow Service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusWorkflowsStatusGet(options?: any): AxiosPromise<object>;
};
/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export declare class HealthApi extends BaseAPI {
    /**
     * Heart Beat check to check the health of Trata Backend
     * @summary Heart Beat Status Of Trata Backend
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    statusStatusGet(options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     * Heart Beat check to check the health of Workflow Service
     * @summary Heart Beat Status Of Workflow Service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    statusWorkflowsStatusGet(options?: any): Promise<import("axios").AxiosResponse<object>>;
}
/**
 * HiveApi - axios parameter creator
 * @export
 */
export declare const HiveApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Hive is a collection of documents that are used to train the Agent. Hive can be a PDF, DOCX, TXT or a website URL
     * @summary Create a New Hive
     * @param {HiveContentInput} hiveContentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createHiveV1: (hiveContentInput: HiveContentInput, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a Specific Hive by ID
     * @summary Delete a Specific Hive by ID
     * @param {string} hiveId ID of the hive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteHiveV1: (hiveId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a Specific Hive by ID
     * @summary Get a Specific Hive by ID
     * @param {string} hiveId ID of the hive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHiveV1: (hiveId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List All Hives
     * @summary List All Hives
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listHivesV1: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Update a Specific Hive by ID
     * @summary Update a Specific Hive by ID
     * @param {string} hiveId ID of the hive
     * @param {HiveContentOutput} hiveContentOutput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateHiveV1: (hiveId: string, hiveContentOutput: HiveContentOutput, options?: any) => Promise<RequestArgs>;
};
/**
 * HiveApi - functional programming interface
 * @export
 */
export declare const HiveApiFp: (configuration?: Configuration) => {
    /**
     * Hive is a collection of documents that are used to train the Agent. Hive can be a PDF, DOCX, TXT or a website URL
     * @summary Create a New Hive
     * @param {HiveContentInput} hiveContentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createHiveV1(hiveContentInput: HiveContentInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Hive>>;
    /**
     * Delete a Specific Hive by ID
     * @summary Delete a Specific Hive by ID
     * @param {string} hiveId ID of the hive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteHiveV1(hiveId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * Get a Specific Hive by ID
     * @summary Get a Specific Hive by ID
     * @param {string} hiveId ID of the hive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHiveV1(hiveId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Hive>>;
    /**
     * List All Hives
     * @summary List All Hives
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listHivesV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Hive>>>;
    /**
     * Update a Specific Hive by ID
     * @summary Update a Specific Hive by ID
     * @param {string} hiveId ID of the hive
     * @param {HiveContentOutput} hiveContentOutput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateHiveV1(hiveId: string, hiveContentOutput: HiveContentOutput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Hive>>;
};
/**
 * HiveApi - factory interface
 * @export
 */
export declare const HiveApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Hive is a collection of documents that are used to train the Agent. Hive can be a PDF, DOCX, TXT or a website URL
     * @summary Create a New Hive
     * @param {HiveContentInput} hiveContentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createHiveV1(hiveContentInput: HiveContentInput, options?: any): AxiosPromise<Hive>;
    /**
     * Delete a Specific Hive by ID
     * @summary Delete a Specific Hive by ID
     * @param {string} hiveId ID of the hive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteHiveV1(hiveId: string, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * Get a Specific Hive by ID
     * @summary Get a Specific Hive by ID
     * @param {string} hiveId ID of the hive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHiveV1(hiveId: string, options?: any): AxiosPromise<Hive>;
    /**
     * List All Hives
     * @summary List All Hives
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listHivesV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): AxiosPromise<Array<Hive>>;
    /**
     * Update a Specific Hive by ID
     * @summary Update a Specific Hive by ID
     * @param {string} hiveId ID of the hive
     * @param {HiveContentOutput} hiveContentOutput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateHiveV1(hiveId: string, hiveContentOutput: HiveContentOutput, options?: any): AxiosPromise<Hive>;
};
/**
 * HiveApi - object-oriented interface
 * @export
 * @class HiveApi
 * @extends {BaseAPI}
 */
export declare class HiveApi extends BaseAPI {
    /**
     * Hive is a collection of documents that are used to train the Agent. Hive can be a PDF, DOCX, TXT or a website URL
     * @summary Create a New Hive
     * @param {HiveContentInput} hiveContentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HiveApi
     */
    createHiveV1(hiveContentInput: HiveContentInput, options?: any): Promise<import("axios").AxiosResponse<Hive>>;
    /**
     * Delete a Specific Hive by ID
     * @summary Delete a Specific Hive by ID
     * @param {string} hiveId ID of the hive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HiveApi
     */
    deleteHiveV1(hiveId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * Get a Specific Hive by ID
     * @summary Get a Specific Hive by ID
     * @param {string} hiveId ID of the hive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HiveApi
     */
    getHiveV1(hiveId: string, options?: any): Promise<import("axios").AxiosResponse<Hive>>;
    /**
     * List All Hives
     * @summary List All Hives
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HiveApi
     */
    listHivesV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<import("axios").AxiosResponse<Hive[]>>;
    /**
     * Update a Specific Hive by ID
     * @summary Update a Specific Hive by ID
     * @param {string} hiveId ID of the hive
     * @param {HiveContentOutput} hiveContentOutput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HiveApi
     */
    updateHiveV1(hiveId: string, hiveContentOutput: HiveContentOutput, options?: any): Promise<import("axios").AxiosResponse<Hive>>;
}
/**
 * HiveAgentLinkApi - axios parameter creator
 * @export
 */
export declare const HiveAgentLinkApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a Link Between a Hive and an Agent
     * @summary Create a Link Between a Hive and an Agent
     * @param {string} hiveId ID of the hive
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createHiveAgentLinkV1: (hiveId: string, agentId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a Link Between a Hive and an Agent
     * @summary Delete a Link Between a Hive and an Agent
     * @param {string} hiveId ID of the hive
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteHiveAgentLinkV1: (hiveId: string, agentId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List All Agents Linked to a Specific Hive
     * @summary List All Agents Linked to a Specific Hive
     * @param {string} hiveId ID of the hive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAgentsOfHiveV1: (hiveId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List All Hives Linked to a Specific Agent
     * @summary List All Hives Linked to a Specific Agent
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listHivesOfAgentV1: (agentId: string, options?: any) => Promise<RequestArgs>;
};
/**
 * HiveAgentLinkApi - functional programming interface
 * @export
 */
export declare const HiveAgentLinkApiFp: (configuration?: Configuration) => {
    /**
     * Create a Link Between a Hive and an Agent
     * @summary Create a Link Between a Hive and an Agent
     * @param {string} hiveId ID of the hive
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createHiveAgentLinkV1(hiveId: string, agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * Delete a Link Between a Hive and an Agent
     * @summary Delete a Link Between a Hive and an Agent
     * @param {string} hiveId ID of the hive
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteHiveAgentLinkV1(hiveId: string, agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * List All Agents Linked to a Specific Hive
     * @summary List All Agents Linked to a Specific Hive
     * @param {string} hiveId ID of the hive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAgentsOfHiveV1(hiveId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AIAgentOutput>>>;
    /**
     * List All Hives Linked to a Specific Agent
     * @summary List All Hives Linked to a Specific Agent
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listHivesOfAgentV1(agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Hive>>>;
};
/**
 * HiveAgentLinkApi - factory interface
 * @export
 */
export declare const HiveAgentLinkApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a Link Between a Hive and an Agent
     * @summary Create a Link Between a Hive and an Agent
     * @param {string} hiveId ID of the hive
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createHiveAgentLinkV1(hiveId: string, agentId: string, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * Delete a Link Between a Hive and an Agent
     * @summary Delete a Link Between a Hive and an Agent
     * @param {string} hiveId ID of the hive
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteHiveAgentLinkV1(hiveId: string, agentId: string, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * List All Agents Linked to a Specific Hive
     * @summary List All Agents Linked to a Specific Hive
     * @param {string} hiveId ID of the hive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAgentsOfHiveV1(hiveId: string, options?: any): AxiosPromise<Array<AIAgentOutput>>;
    /**
     * List All Hives Linked to a Specific Agent
     * @summary List All Hives Linked to a Specific Agent
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listHivesOfAgentV1(agentId: string, options?: any): AxiosPromise<Array<Hive>>;
};
/**
 * HiveAgentLinkApi - object-oriented interface
 * @export
 * @class HiveAgentLinkApi
 * @extends {BaseAPI}
 */
export declare class HiveAgentLinkApi extends BaseAPI {
    /**
     * Create a Link Between a Hive and an Agent
     * @summary Create a Link Between a Hive and an Agent
     * @param {string} hiveId ID of the hive
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HiveAgentLinkApi
     */
    createHiveAgentLinkV1(hiveId: string, agentId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * Delete a Link Between a Hive and an Agent
     * @summary Delete a Link Between a Hive and an Agent
     * @param {string} hiveId ID of the hive
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HiveAgentLinkApi
     */
    deleteHiveAgentLinkV1(hiveId: string, agentId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * List All Agents Linked to a Specific Hive
     * @summary List All Agents Linked to a Specific Hive
     * @param {string} hiveId ID of the hive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HiveAgentLinkApi
     */
    listAgentsOfHiveV1(hiveId: string, options?: any): Promise<import("axios").AxiosResponse<AIAgentOutput[]>>;
    /**
     * List All Hives Linked to a Specific Agent
     * @summary List All Hives Linked to a Specific Agent
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HiveAgentLinkApi
     */
    listHivesOfAgentV1(agentId: string, options?: any): Promise<import("axios").AxiosResponse<Hive[]>>;
}
/**
 * InternalApi - axios parameter creator
 * @export
 */
export declare const InternalApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Accept invite and add new user to organization
     * @summary Acceptinvite
     * @param {AcceptInviteRequest} acceptInviteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptInviteV1: (acceptInviteRequest: AcceptInviteRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a new organization and adds the user as the \"ADMIN\" user for the org
     * @summary Createorganization
     * @param {BodyCreateOrganizationV1} bodyCreateOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganizationV1: (bodyCreateOrganizationV1: BodyCreateOrganizationV1, options?: any) => Promise<RequestArgs>;
    /**
     * Create a new user
     * @summary Createuser
     * @param {UserPayload} userPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserV1: (userPayload: UserPayload, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Deleteorganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganizationV1: (options?: any) => Promise<RequestArgs>;
    /**
     * Delete a user
     * @summary Deleteuser
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserV1: (userId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get customer credits
     * @summary Get Customer Credits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerCreditsV1: (options?: any) => Promise<RequestArgs>;
    /**
     * Get customer pricing
     * @summary Get Customer Pricing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerPricingV1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Getorganizationbranding
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationBrandingV1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Getorganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationV1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Getuserbyid
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserByIdV1: (userId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List of all open invites from the organization
     * @summary Listinvites
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listInvitesV1: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Lists all users under the user\'s organization
     * @summary Listusers
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsersV1: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Invite a new user to an organization or resend invite to the user if the user is already invited
     * @summary Inviteusers
     * @param {GuestInput} guestInput
     * @param {string} [app] The app to use for the invite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendInviteV1: (guestInput: GuestInput, app?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Updateorganization
     * @param {string} orgId ID of the organization
     * @param {OrganizationInput} organizationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationV1: (orgId: string, organizationInput: OrganizationInput, options?: any) => Promise<RequestArgs>;
    /**
     * Update user details
     * @summary Updateuser
     * @param {string} userId
     * @param {UserPayload} userPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserV1: (userId: string, userPayload: UserPayload, options?: any) => Promise<RequestArgs>;
};
/**
 * InternalApi - functional programming interface
 * @export
 */
export declare const InternalApiFp: (configuration?: Configuration) => {
    /**
     * Accept invite and add new user to organization
     * @summary Acceptinvite
     * @param {AcceptInviteRequest} acceptInviteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptInviteV1(acceptInviteRequest: AcceptInviteRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     * Creates a new organization and adds the user as the \"ADMIN\" user for the org
     * @summary Createorganization
     * @param {BodyCreateOrganizationV1} bodyCreateOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganizationV1(bodyCreateOrganizationV1: BodyCreateOrganizationV1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     * Create a new user
     * @summary Createuser
     * @param {UserPayload} userPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserV1(userPayload: UserPayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     *
     * @summary Deleteorganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganizationV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * Delete a user
     * @summary Deleteuser
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserV1(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     * Get customer credits
     * @summary Get Customer Credits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerCreditsV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Credit>>>;
    /**
     * Get customer pricing
     * @summary Get Customer Pricing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerPricingV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Price>>>;
    /**
     *
     * @summary Getorganizationbranding
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationBrandingV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerBranding | object>>;
    /**
     *
     * @summary Getorganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationOutput>>;
    /**
     *
     * @summary Getuserbyid
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserByIdV1(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     * List of all open invites from the organization
     * @summary Listinvites
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listInvitesV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GuestOutput>>>;
    /**
     * Lists all users under the user\'s organization
     * @summary Listusers
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsersV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>>;
    /**
     * Invite a new user to an organization or resend invite to the user if the user is already invited
     * @summary Inviteusers
     * @param {GuestInput} guestInput
     * @param {string} [app] The app to use for the invite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendInviteV1(guestInput: GuestInput, app?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GuestOutput>>;
    /**
     *
     * @summary Updateorganization
     * @param {string} orgId ID of the organization
     * @param {OrganizationInput} organizationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationV1(orgId: string, organizationInput: OrganizationInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationOutput>>;
    /**
     * Update user details
     * @summary Updateuser
     * @param {string} userId
     * @param {UserPayload} userPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserV1(userId: string, userPayload: UserPayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
};
/**
 * InternalApi - factory interface
 * @export
 */
export declare const InternalApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Accept invite and add new user to organization
     * @summary Acceptinvite
     * @param {AcceptInviteRequest} acceptInviteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptInviteV1(acceptInviteRequest: AcceptInviteRequest, options?: any): AxiosPromise<User>;
    /**
     * Creates a new organization and adds the user as the \"ADMIN\" user for the org
     * @summary Createorganization
     * @param {BodyCreateOrganizationV1} bodyCreateOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganizationV1(bodyCreateOrganizationV1: BodyCreateOrganizationV1, options?: any): AxiosPromise<User>;
    /**
     * Create a new user
     * @summary Createuser
     * @param {UserPayload} userPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserV1(userPayload: UserPayload, options?: any): AxiosPromise<User>;
    /**
     *
     * @summary Deleteorganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganizationV1(options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * Delete a user
     * @summary Deleteuser
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserV1(userId: string, options?: any): AxiosPromise<User>;
    /**
     * Get customer credits
     * @summary Get Customer Credits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerCreditsV1(options?: any): AxiosPromise<Array<Credit>>;
    /**
     * Get customer pricing
     * @summary Get Customer Pricing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerPricingV1(options?: any): AxiosPromise<Array<Price>>;
    /**
     *
     * @summary Getorganizationbranding
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationBrandingV1(options?: any): AxiosPromise<CustomerBranding | object>;
    /**
     *
     * @summary Getorganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationV1(options?: any): AxiosPromise<OrganizationOutput>;
    /**
     *
     * @summary Getuserbyid
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserByIdV1(userId: string, options?: any): AxiosPromise<User>;
    /**
     * List of all open invites from the organization
     * @summary Listinvites
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listInvitesV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): AxiosPromise<Array<GuestOutput>>;
    /**
     * Lists all users under the user\'s organization
     * @summary Listusers
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsersV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): AxiosPromise<Array<User>>;
    /**
     * Invite a new user to an organization or resend invite to the user if the user is already invited
     * @summary Inviteusers
     * @param {GuestInput} guestInput
     * @param {string} [app] The app to use for the invite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendInviteV1(guestInput: GuestInput, app?: string, options?: any): AxiosPromise<GuestOutput>;
    /**
     *
     * @summary Updateorganization
     * @param {string} orgId ID of the organization
     * @param {OrganizationInput} organizationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationV1(orgId: string, organizationInput: OrganizationInput, options?: any): AxiosPromise<OrganizationOutput>;
    /**
     * Update user details
     * @summary Updateuser
     * @param {string} userId
     * @param {UserPayload} userPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserV1(userId: string, userPayload: UserPayload, options?: any): AxiosPromise<User>;
};
/**
 * InternalApi - object-oriented interface
 * @export
 * @class InternalApi
 * @extends {BaseAPI}
 */
export declare class InternalApi extends BaseAPI {
    /**
     * Accept invite and add new user to organization
     * @summary Acceptinvite
     * @param {AcceptInviteRequest} acceptInviteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    acceptInviteV1(acceptInviteRequest: AcceptInviteRequest, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     * Creates a new organization and adds the user as the \"ADMIN\" user for the org
     * @summary Createorganization
     * @param {BodyCreateOrganizationV1} bodyCreateOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    createOrganizationV1(bodyCreateOrganizationV1: BodyCreateOrganizationV1, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     * Create a new user
     * @summary Createuser
     * @param {UserPayload} userPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    createUserV1(userPayload: UserPayload, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     *
     * @summary Deleteorganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    deleteOrganizationV1(options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * Delete a user
     * @summary Deleteuser
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    deleteUserV1(userId: string, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     * Get customer credits
     * @summary Get Customer Credits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    getCustomerCreditsV1(options?: any): Promise<import("axios").AxiosResponse<Credit[]>>;
    /**
     * Get customer pricing
     * @summary Get Customer Pricing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    getCustomerPricingV1(options?: any): Promise<import("axios").AxiosResponse<Price[]>>;
    /**
     *
     * @summary Getorganizationbranding
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    getOrganizationBrandingV1(options?: any): Promise<import("axios").AxiosResponse<object | CustomerBranding>>;
    /**
     *
     * @summary Getorganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    getOrganizationV1(options?: any): Promise<import("axios").AxiosResponse<OrganizationOutput>>;
    /**
     *
     * @summary Getuserbyid
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    getUserByIdV1(userId: string, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     * List of all open invites from the organization
     * @summary Listinvites
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    listInvitesV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<import("axios").AxiosResponse<GuestOutput[]>>;
    /**
     * Lists all users under the user\'s organization
     * @summary Listusers
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    listUsersV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<import("axios").AxiosResponse<User[]>>;
    /**
     * Invite a new user to an organization or resend invite to the user if the user is already invited
     * @summary Inviteusers
     * @param {GuestInput} guestInput
     * @param {string} [app] The app to use for the invite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    sendInviteV1(guestInput: GuestInput, app?: string, options?: any): Promise<import("axios").AxiosResponse<GuestOutput>>;
    /**
     *
     * @summary Updateorganization
     * @param {string} orgId ID of the organization
     * @param {OrganizationInput} organizationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    updateOrganizationV1(orgId: string, organizationInput: OrganizationInput, options?: any): Promise<import("axios").AxiosResponse<OrganizationOutput>>;
    /**
     * Update user details
     * @summary Updateuser
     * @param {string} userId
     * @param {UserPayload} userPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    updateUserV1(userId: string, userPayload: UserPayload, options?: any): Promise<import("axios").AxiosResponse<User>>;
}
/**
 * ProductsApi - axios parameter creator
 * @export
 */
export declare const ProductsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a New Product
     * @summary Create a New Product
     * @param {ProductInput} productInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProductV1: (productInput: ProductInput, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a Specific Product by ID
     * @summary Delete a Specific Product by ID
     * @param {string} productId ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductV1: (productId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a Specific Product by ID
     * @summary Get a Specific Product by ID
     * @param {string} productId ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductV1: (productId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List All Agents Linked to a Specific Product
     * @summary List All Agents Linked to a Specific Product
     * @param {string} productId ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAgentsOfProductV1: (productId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List All Products
     * @summary List All Products
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {string} [tags]
     * @param {string} [productIds]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProductsV1: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, tags?: string, productIds?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Update a Specific Product by ID
     * @summary Update a Specific Product by ID
     * @param {string} productId ID of the product
     * @param {ProductInput} productInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProductV1: (productId: string, productInput: ProductInput, options?: any) => Promise<RequestArgs>;
};
/**
 * ProductsApi - functional programming interface
 * @export
 */
export declare const ProductsApiFp: (configuration?: Configuration) => {
    /**
     * Create a New Product
     * @summary Create a New Product
     * @param {ProductInput} productInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProductV1(productInput: ProductInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductOutput>>;
    /**
     * Delete a Specific Product by ID
     * @summary Delete a Specific Product by ID
     * @param {string} productId ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductV1(productId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * Get a Specific Product by ID
     * @summary Get a Specific Product by ID
     * @param {string} productId ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductV1(productId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductOutput>>;
    /**
     * List All Agents Linked to a Specific Product
     * @summary List All Agents Linked to a Specific Product
     * @param {string} productId ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAgentsOfProductV1(productId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AIAgentOutput>>>;
    /**
     * List All Products
     * @summary List All Products
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {string} [tags]
     * @param {string} [productIds]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProductsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, tags?: string, productIds?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductOutput>>>;
    /**
     * Update a Specific Product by ID
     * @summary Update a Specific Product by ID
     * @param {string} productId ID of the product
     * @param {ProductInput} productInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProductV1(productId: string, productInput: ProductInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductOutput>>;
};
/**
 * ProductsApi - factory interface
 * @export
 */
export declare const ProductsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a New Product
     * @summary Create a New Product
     * @param {ProductInput} productInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProductV1(productInput: ProductInput, options?: any): AxiosPromise<ProductOutput>;
    /**
     * Delete a Specific Product by ID
     * @summary Delete a Specific Product by ID
     * @param {string} productId ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductV1(productId: string, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * Get a Specific Product by ID
     * @summary Get a Specific Product by ID
     * @param {string} productId ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductV1(productId: string, options?: any): AxiosPromise<ProductOutput>;
    /**
     * List All Agents Linked to a Specific Product
     * @summary List All Agents Linked to a Specific Product
     * @param {string} productId ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAgentsOfProductV1(productId: string, options?: any): AxiosPromise<Array<AIAgentOutput>>;
    /**
     * List All Products
     * @summary List All Products
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {string} [tags]
     * @param {string} [productIds]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProductsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, tags?: string, productIds?: string, options?: any): AxiosPromise<Array<ProductOutput>>;
    /**
     * Update a Specific Product by ID
     * @summary Update a Specific Product by ID
     * @param {string} productId ID of the product
     * @param {ProductInput} productInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProductV1(productId: string, productInput: ProductInput, options?: any): AxiosPromise<ProductOutput>;
};
/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export declare class ProductsApi extends BaseAPI {
    /**
     * Create a New Product
     * @summary Create a New Product
     * @param {ProductInput} productInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    createProductV1(productInput: ProductInput, options?: any): Promise<import("axios").AxiosResponse<ProductOutput>>;
    /**
     * Delete a Specific Product by ID
     * @summary Delete a Specific Product by ID
     * @param {string} productId ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    deleteProductV1(productId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * Get a Specific Product by ID
     * @summary Get a Specific Product by ID
     * @param {string} productId ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    getProductV1(productId: string, options?: any): Promise<import("axios").AxiosResponse<ProductOutput>>;
    /**
     * List All Agents Linked to a Specific Product
     * @summary List All Agents Linked to a Specific Product
     * @param {string} productId ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    listAgentsOfProductV1(productId: string, options?: any): Promise<import("axios").AxiosResponse<AIAgentOutput[]>>;
    /**
     * List All Products
     * @summary List All Products
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {string} [tags]
     * @param {string} [productIds]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    listProductsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, tags?: string, productIds?: string, options?: any): Promise<import("axios").AxiosResponse<ProductOutput[]>>;
    /**
     * Update a Specific Product by ID
     * @summary Update a Specific Product by ID
     * @param {string} productId ID of the product
     * @param {ProductInput} productInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    updateProductV1(productId: string, productInput: ProductInput, options?: any): Promise<import("axios").AxiosResponse<ProductOutput>>;
}
/**
 * ProspectsApi - axios parameter creator
 * @export
 */
export declare const ProspectsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a New Prospect
     * @summary Create a New Prospect
     * @param {ProspectInput} prospectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProspectV1: (prospectInput: ProspectInput, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a Specific Prospect by ID
     * @summary Delete a Specific Prospect by ID
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProspectV1: (prospectId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a Specific Prospect by ID
     * @summary Get a Specific Prospect by ID
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProspectV1: (prospectId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List All Prospects
     * @summary List All Prospects
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProspectsV1: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Update a Specific Prospect by ID
     * @summary Update a Specific Prospect by ID
     * @param {string} prospectId ID of the prospect
     * @param {ProspectInput} prospectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProspectV1: (prospectId: string, prospectInput: ProspectInput, options?: any) => Promise<RequestArgs>;
};
/**
 * ProspectsApi - functional programming interface
 * @export
 */
export declare const ProspectsApiFp: (configuration?: Configuration) => {
    /**
     * Create a New Prospect
     * @summary Create a New Prospect
     * @param {ProspectInput} prospectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProspectV1(prospectInput: ProspectInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProspectOutput>>;
    /**
     * Delete a Specific Prospect by ID
     * @summary Delete a Specific Prospect by ID
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProspectV1(prospectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * Get a Specific Prospect by ID
     * @summary Get a Specific Prospect by ID
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProspectV1(prospectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProspectOutput>>;
    /**
     * List All Prospects
     * @summary List All Prospects
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProspectsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProspectOutput>>>;
    /**
     * Update a Specific Prospect by ID
     * @summary Update a Specific Prospect by ID
     * @param {string} prospectId ID of the prospect
     * @param {ProspectInput} prospectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProspectV1(prospectId: string, prospectInput: ProspectInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProspectOutput>>;
};
/**
 * ProspectsApi - factory interface
 * @export
 */
export declare const ProspectsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a New Prospect
     * @summary Create a New Prospect
     * @param {ProspectInput} prospectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProspectV1(prospectInput: ProspectInput, options?: any): AxiosPromise<ProspectOutput>;
    /**
     * Delete a Specific Prospect by ID
     * @summary Delete a Specific Prospect by ID
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProspectV1(prospectId: string, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * Get a Specific Prospect by ID
     * @summary Get a Specific Prospect by ID
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProspectV1(prospectId: string, options?: any): AxiosPromise<ProspectOutput>;
    /**
     * List All Prospects
     * @summary List All Prospects
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProspectsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): AxiosPromise<Array<ProspectOutput>>;
    /**
     * Update a Specific Prospect by ID
     * @summary Update a Specific Prospect by ID
     * @param {string} prospectId ID of the prospect
     * @param {ProspectInput} prospectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProspectV1(prospectId: string, prospectInput: ProspectInput, options?: any): AxiosPromise<ProspectOutput>;
};
/**
 * ProspectsApi - object-oriented interface
 * @export
 * @class ProspectsApi
 * @extends {BaseAPI}
 */
export declare class ProspectsApi extends BaseAPI {
    /**
     * Create a New Prospect
     * @summary Create a New Prospect
     * @param {ProspectInput} prospectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProspectsApi
     */
    createProspectV1(prospectInput: ProspectInput, options?: any): Promise<import("axios").AxiosResponse<ProspectOutput>>;
    /**
     * Delete a Specific Prospect by ID
     * @summary Delete a Specific Prospect by ID
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProspectsApi
     */
    deleteProspectV1(prospectId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * Get a Specific Prospect by ID
     * @summary Get a Specific Prospect by ID
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProspectsApi
     */
    getProspectV1(prospectId: string, options?: any): Promise<import("axios").AxiosResponse<ProspectOutput>>;
    /**
     * List All Prospects
     * @summary List All Prospects
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProspectsApi
     */
    listProspectsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<import("axios").AxiosResponse<ProspectOutput[]>>;
    /**
     * Update a Specific Prospect by ID
     * @summary Update a Specific Prospect by ID
     * @param {string} prospectId ID of the prospect
     * @param {ProspectInput} prospectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProspectsApi
     */
    updateProspectV1(prospectId: string, prospectInput: ProspectInput, options?: any): Promise<import("axios").AxiosResponse<ProspectOutput>>;
}
/**
 * ResellerApi - axios parameter creator
 * @export
 */
export declare const ResellerApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Accept invite and add new user to organization
     * @summary Accept Invite
     * @param {AcceptInviteRequest} acceptInviteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptResellerUserInviteV1: (acceptInviteRequest: AcceptInviteRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Add credits to customer
     * @summary Add Reseller Customer Credits
     * @param {string} customerOrgId
     * @param {Array<CreditRequest>} creditRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addResellerCustomerCreditsV1: (customerOrgId: string, creditRequest: Array<CreditRequest>, options?: any) => Promise<RequestArgs>;
    /**
     * Add Reseller settings
     * @summary Organization Settings
     * @param {OrganizationSettings} organizationSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addResellerSettingsV1: (organizationSettings: OrganizationSettings, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a new customer organization under a reseller organization
     * @summary Create Customer
     * @param {BodyCreateCustomerOrganizationV1} bodyCreateCustomerOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerOrganizationV1: (bodyCreateCustomerOrganizationV1: BodyCreateCustomerOrganizationV1, options?: any) => Promise<RequestArgs>;
    /**
     * Override pricing for customer
     * @summary Create Customer Pricing
     * @param {string} customerOrgId
     * @param {PricingRequest} pricingRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerPricingV1: (customerOrgId: string, pricingRequest: PricingRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a new reseller organization and adds the created user as the \'ADMIN\' user for the org
     * @summary Create Reseller Organization
     * @param {BodyCreateResellerOrganizationV1} bodyCreateResellerOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResellerOrganizationV1: (bodyCreateResellerOrganizationV1: BodyCreateResellerOrganizationV1, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a user
     * @summary Delete Reseller User
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResellerUserV1: (userId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get the customer org credentials for a customer organization under a reseller organization. NOTE: This will only return the custom token of the reseller admin user present in the customer org. Exchange this token with the id token to use it as a firebase credential in the client side.
     * @summary Get Customer Credentials
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerCredentialsV1: (customerOrgId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get customer default pricing
     * @summary Get Customer Default Pricing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerDefaultPricingV1: (options?: any) => Promise<RequestArgs>;
    /**
     * Get all invites for a customer organization
     * @summary Get Customer Invites
     * @param {string} customerOrgId
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerInvitesV1: (customerOrgId: string, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get organization settings
     * @summary Get Organization Settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationSettingsV1: (options?: any) => Promise<RequestArgs>;
    /**
     * Get the reseller admin user basic auth credentials
     * @summary Get Reseller Admin User Credentials
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerAdminUserCredentialsV1: (customerOrgId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get reseller credits
     * @summary Get Reseller Credits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerCreditsV1: (options?: any) => Promise<RequestArgs>;
    /**
     * Get reseller customer by id
     * @summary Get Reseller Customer By Id
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerCustomerByIdV1: (customerOrgId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get resellers customer credits
     * @summary Get Reseller Customer Credits
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerCustomerCreditsV1: (customerOrgId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get resellers customer pricing
     * @summary Get Reseller Customer Pricing
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerCustomerPricingV1: (customerOrgId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get reseller customers
     * @summary Get Reseller Customers
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerCustomersV1: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get analytics data for Reseller
     * @summary Get Reseller Metrics
     * @param {ResellerBatchMetricsRequests} resellerBatchMetricsRequests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerMetricsV1: (resellerBatchMetricsRequests: ResellerBatchMetricsRequests, options?: any) => Promise<RequestArgs>;
    /**
     * Get a reseller organization by id
     * @summary Get Reseller Organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerOrganizationV1: (options?: any) => Promise<RequestArgs>;
    /**
     * Get pricing details for a reseller
     * @summary Get Reseller Pricing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerPricingV1: (options?: any) => Promise<RequestArgs>;
    /**
     * List of all open invites from the organization
     * @summary List Reseller User Invites
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResellerUserInvitesV1: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Lists all users under the user\'s organization
     * @summary List Reseller Users
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResellerUsersV1: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Send invite to a user on behalf of a customer organization
     * @summary Invite Customer Users
     * @param {string} customerOrgId
     * @param {GuestInput} guestInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendCustomerUserInviteV1: (customerOrgId: string, guestInput: GuestInput, options?: any) => Promise<RequestArgs>;
    /**
     * Invite a new user to an organization or resend invite to the user if the user is already invited
     * @summary Invite Users
     * @param {GuestInput} guestInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendResellerUserInviteV1: (guestInput: GuestInput, options?: any) => Promise<RequestArgs>;
    /**
     * Sync reseller stripe customer
     * @summary Stripe Sync
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stripeSyncV1: (options?: any) => Promise<RequestArgs>;
    /**
     * Update customer default pricing
     * @summary Update Customer Default Pricing
     * @param {string} priceId
     * @param {PricingRequest} pricingRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerDefaultPricingV1: (priceId: string, pricingRequest: PricingRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Update a customer organization under a reseller organization
     * @summary Update Customer
     * @param {string} customerOrgId
     * @param {OrganizationInput} organizationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerOrganizationV1: (customerOrgId: string, organizationInput: OrganizationInput, options?: any) => Promise<RequestArgs>;
    /**
     * Update customer pricing
     * @summary Update Customer Pricing
     * @param {string} customerOrgId
     * @param {string} priceId
     * @param {PricingRequest} pricingRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerPricingV1: (customerOrgId: string, priceId: string, pricingRequest: PricingRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Update a reseller organization
     * @summary Update Reseller Organization
     * @param {UpdateResellerOrganizationRequest} updateResellerOrganizationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResellerOrganizationV1: (updateResellerOrganizationRequest: UpdateResellerOrganizationRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Update organization settings
     * @summary Organization Settings Update
     * @param {OrganizationSettings} organizationSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResellerSettingsV1: (organizationSettings: OrganizationSettings, options?: any) => Promise<RequestArgs>;
    /**
     * Update user details
     * @summary Update Reseller User
     * @param {string} userId
     * @param {UserPayload} userPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResellerUserV1: (userId: string, userPayload: UserPayload, options?: any) => Promise<RequestArgs>;
};
/**
 * ResellerApi - functional programming interface
 * @export
 */
export declare const ResellerApiFp: (configuration?: Configuration) => {
    /**
     * Accept invite and add new user to organization
     * @summary Accept Invite
     * @param {AcceptInviteRequest} acceptInviteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptResellerUserInviteV1(acceptInviteRequest: AcceptInviteRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     * Add credits to customer
     * @summary Add Reseller Customer Credits
     * @param {string} customerOrgId
     * @param {Array<CreditRequest>} creditRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addResellerCustomerCreditsV1(customerOrgId: string, creditRequest: Array<CreditRequest>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Credit>>>;
    /**
     * Add Reseller settings
     * @summary Organization Settings
     * @param {OrganizationSettings} organizationSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addResellerSettingsV1(organizationSettings: OrganizationSettings, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationSettings>>;
    /**
     * Creates a new customer organization under a reseller organization
     * @summary Create Customer
     * @param {BodyCreateCustomerOrganizationV1} bodyCreateCustomerOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerOrganizationV1(bodyCreateCustomerOrganizationV1: BodyCreateCustomerOrganizationV1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     * Override pricing for customer
     * @summary Create Customer Pricing
     * @param {string} customerOrgId
     * @param {PricingRequest} pricingRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerPricingV1(customerOrgId: string, pricingRequest: PricingRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Price>>;
    /**
     * Creates a new reseller organization and adds the created user as the \'ADMIN\' user for the org
     * @summary Create Reseller Organization
     * @param {BodyCreateResellerOrganizationV1} bodyCreateResellerOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResellerOrganizationV1(bodyCreateResellerOrganizationV1: BodyCreateResellerOrganizationV1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     * Delete a user
     * @summary Delete Reseller User
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResellerUserV1(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     * Get the customer org credentials for a customer organization under a reseller organization. NOTE: This will only return the custom token of the reseller admin user present in the customer org. Exchange this token with the id token to use it as a firebase credential in the client side.
     * @summary Get Customer Credentials
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerCredentialsV1(customerOrgId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     * Get customer default pricing
     * @summary Get Customer Default Pricing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerDefaultPricingV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Price>>>;
    /**
     * Get all invites for a customer organization
     * @summary Get Customer Invites
     * @param {string} customerOrgId
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerInvitesV1(customerOrgId: string, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GuestOutput>>>;
    /**
     * Get organization settings
     * @summary Get Organization Settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationSettingsV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationSettings>>;
    /**
     * Get the reseller admin user basic auth credentials
     * @summary Get Reseller Admin User Credentials
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerAdminUserCredentialsV1(customerOrgId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResellerAdminUserCredentials>>;
    /**
     * Get reseller credits
     * @summary Get Reseller Credits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerCreditsV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Credit>>>;
    /**
     * Get reseller customer by id
     * @summary Get Reseller Customer By Id
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerCustomerByIdV1(customerOrgId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgUsersPriceCredits>>;
    /**
     * Get resellers customer credits
     * @summary Get Reseller Customer Credits
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerCustomerCreditsV1(customerOrgId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Credit>>>;
    /**
     * Get resellers customer pricing
     * @summary Get Reseller Customer Pricing
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerCustomerPricingV1(customerOrgId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Price>>>;
    /**
     * Get reseller customers
     * @summary Get Reseller Customers
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerCustomersV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrgUsersPriceCredits>>>;
    /**
     * Get analytics data for Reseller
     * @summary Get Reseller Metrics
     * @param {ResellerBatchMetricsRequests} resellerBatchMetricsRequests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerMetricsV1(resellerBatchMetricsRequests: ResellerBatchMetricsRequests, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchMetricsResponseInput>>;
    /**
     * Get a reseller organization by id
     * @summary Get Reseller Organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerOrganizationV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgWithUsers>>;
    /**
     * Get pricing details for a reseller
     * @summary Get Reseller Pricing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerPricingV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Price>>>;
    /**
     * List of all open invites from the organization
     * @summary List Reseller User Invites
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResellerUserInvitesV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GuestOutput>>>;
    /**
     * Lists all users under the user\'s organization
     * @summary List Reseller Users
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResellerUsersV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>>;
    /**
     * Send invite to a user on behalf of a customer organization
     * @summary Invite Customer Users
     * @param {string} customerOrgId
     * @param {GuestInput} guestInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendCustomerUserInviteV1(customerOrgId: string, guestInput: GuestInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GuestOutput>>;
    /**
     * Invite a new user to an organization or resend invite to the user if the user is already invited
     * @summary Invite Users
     * @param {GuestInput} guestInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendResellerUserInviteV1(guestInput: GuestInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GuestOutput>>;
    /**
     * Sync reseller stripe customer
     * @summary Stripe Sync
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stripeSyncV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * Update customer default pricing
     * @summary Update Customer Default Pricing
     * @param {string} priceId
     * @param {PricingRequest} pricingRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerDefaultPricingV1(priceId: string, pricingRequest: PricingRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Price>>;
    /**
     * Update a customer organization under a reseller organization
     * @summary Update Customer
     * @param {string} customerOrgId
     * @param {OrganizationInput} organizationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerOrganizationV1(customerOrgId: string, organizationInput: OrganizationInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationOutput>>;
    /**
     * Update customer pricing
     * @summary Update Customer Pricing
     * @param {string} customerOrgId
     * @param {string} priceId
     * @param {PricingRequest} pricingRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerPricingV1(customerOrgId: string, priceId: string, pricingRequest: PricingRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Price>>;
    /**
     * Update a reseller organization
     * @summary Update Reseller Organization
     * @param {UpdateResellerOrganizationRequest} updateResellerOrganizationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResellerOrganizationV1(updateResellerOrganizationRequest: UpdateResellerOrganizationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationOutput>>;
    /**
     * Update organization settings
     * @summary Organization Settings Update
     * @param {OrganizationSettings} organizationSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResellerSettingsV1(organizationSettings: OrganizationSettings, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationSettings>>;
    /**
     * Update user details
     * @summary Update Reseller User
     * @param {string} userId
     * @param {UserPayload} userPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResellerUserV1(userId: string, userPayload: UserPayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
};
/**
 * ResellerApi - factory interface
 * @export
 */
export declare const ResellerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Accept invite and add new user to organization
     * @summary Accept Invite
     * @param {AcceptInviteRequest} acceptInviteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptResellerUserInviteV1(acceptInviteRequest: AcceptInviteRequest, options?: any): AxiosPromise<User>;
    /**
     * Add credits to customer
     * @summary Add Reseller Customer Credits
     * @param {string} customerOrgId
     * @param {Array<CreditRequest>} creditRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addResellerCustomerCreditsV1(customerOrgId: string, creditRequest: Array<CreditRequest>, options?: any): AxiosPromise<Array<Credit>>;
    /**
     * Add Reseller settings
     * @summary Organization Settings
     * @param {OrganizationSettings} organizationSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addResellerSettingsV1(organizationSettings: OrganizationSettings, options?: any): AxiosPromise<OrganizationSettings>;
    /**
     * Creates a new customer organization under a reseller organization
     * @summary Create Customer
     * @param {BodyCreateCustomerOrganizationV1} bodyCreateCustomerOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerOrganizationV1(bodyCreateCustomerOrganizationV1: BodyCreateCustomerOrganizationV1, options?: any): AxiosPromise<User>;
    /**
     * Override pricing for customer
     * @summary Create Customer Pricing
     * @param {string} customerOrgId
     * @param {PricingRequest} pricingRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerPricingV1(customerOrgId: string, pricingRequest: PricingRequest, options?: any): AxiosPromise<Price>;
    /**
     * Creates a new reseller organization and adds the created user as the \'ADMIN\' user for the org
     * @summary Create Reseller Organization
     * @param {BodyCreateResellerOrganizationV1} bodyCreateResellerOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResellerOrganizationV1(bodyCreateResellerOrganizationV1: BodyCreateResellerOrganizationV1, options?: any): AxiosPromise<User>;
    /**
     * Delete a user
     * @summary Delete Reseller User
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResellerUserV1(userId: string, options?: any): AxiosPromise<User>;
    /**
     * Get the customer org credentials for a customer organization under a reseller organization. NOTE: This will only return the custom token of the reseller admin user present in the customer org. Exchange this token with the id token to use it as a firebase credential in the client side.
     * @summary Get Customer Credentials
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerCredentialsV1(customerOrgId: string, options?: any): AxiosPromise<string>;
    /**
     * Get customer default pricing
     * @summary Get Customer Default Pricing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerDefaultPricingV1(options?: any): AxiosPromise<Array<Price>>;
    /**
     * Get all invites for a customer organization
     * @summary Get Customer Invites
     * @param {string} customerOrgId
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerInvitesV1(customerOrgId: string, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): AxiosPromise<Array<GuestOutput>>;
    /**
     * Get organization settings
     * @summary Get Organization Settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationSettingsV1(options?: any): AxiosPromise<OrganizationSettings>;
    /**
     * Get the reseller admin user basic auth credentials
     * @summary Get Reseller Admin User Credentials
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerAdminUserCredentialsV1(customerOrgId: string, options?: any): AxiosPromise<ResellerAdminUserCredentials>;
    /**
     * Get reseller credits
     * @summary Get Reseller Credits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerCreditsV1(options?: any): AxiosPromise<Array<Credit>>;
    /**
     * Get reseller customer by id
     * @summary Get Reseller Customer By Id
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerCustomerByIdV1(customerOrgId: string, options?: any): AxiosPromise<OrgUsersPriceCredits>;
    /**
     * Get resellers customer credits
     * @summary Get Reseller Customer Credits
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerCustomerCreditsV1(customerOrgId: string, options?: any): AxiosPromise<Array<Credit>>;
    /**
     * Get resellers customer pricing
     * @summary Get Reseller Customer Pricing
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerCustomerPricingV1(customerOrgId: string, options?: any): AxiosPromise<Array<Price>>;
    /**
     * Get reseller customers
     * @summary Get Reseller Customers
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerCustomersV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): AxiosPromise<Array<OrgUsersPriceCredits>>;
    /**
     * Get analytics data for Reseller
     * @summary Get Reseller Metrics
     * @param {ResellerBatchMetricsRequests} resellerBatchMetricsRequests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerMetricsV1(resellerBatchMetricsRequests: ResellerBatchMetricsRequests, options?: any): AxiosPromise<BatchMetricsResponseInput>;
    /**
     * Get a reseller organization by id
     * @summary Get Reseller Organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerOrganizationV1(options?: any): AxiosPromise<OrgWithUsers>;
    /**
     * Get pricing details for a reseller
     * @summary Get Reseller Pricing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerPricingV1(options?: any): AxiosPromise<Array<Price>>;
    /**
     * List of all open invites from the organization
     * @summary List Reseller User Invites
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResellerUserInvitesV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): AxiosPromise<Array<GuestOutput>>;
    /**
     * Lists all users under the user\'s organization
     * @summary List Reseller Users
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResellerUsersV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): AxiosPromise<Array<User>>;
    /**
     * Send invite to a user on behalf of a customer organization
     * @summary Invite Customer Users
     * @param {string} customerOrgId
     * @param {GuestInput} guestInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendCustomerUserInviteV1(customerOrgId: string, guestInput: GuestInput, options?: any): AxiosPromise<GuestOutput>;
    /**
     * Invite a new user to an organization or resend invite to the user if the user is already invited
     * @summary Invite Users
     * @param {GuestInput} guestInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendResellerUserInviteV1(guestInput: GuestInput, options?: any): AxiosPromise<GuestOutput>;
    /**
     * Sync reseller stripe customer
     * @summary Stripe Sync
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stripeSyncV1(options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * Update customer default pricing
     * @summary Update Customer Default Pricing
     * @param {string} priceId
     * @param {PricingRequest} pricingRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerDefaultPricingV1(priceId: string, pricingRequest: PricingRequest, options?: any): AxiosPromise<Price>;
    /**
     * Update a customer organization under a reseller organization
     * @summary Update Customer
     * @param {string} customerOrgId
     * @param {OrganizationInput} organizationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerOrganizationV1(customerOrgId: string, organizationInput: OrganizationInput, options?: any): AxiosPromise<OrganizationOutput>;
    /**
     * Update customer pricing
     * @summary Update Customer Pricing
     * @param {string} customerOrgId
     * @param {string} priceId
     * @param {PricingRequest} pricingRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerPricingV1(customerOrgId: string, priceId: string, pricingRequest: PricingRequest, options?: any): AxiosPromise<Price>;
    /**
     * Update a reseller organization
     * @summary Update Reseller Organization
     * @param {UpdateResellerOrganizationRequest} updateResellerOrganizationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResellerOrganizationV1(updateResellerOrganizationRequest: UpdateResellerOrganizationRequest, options?: any): AxiosPromise<OrganizationOutput>;
    /**
     * Update organization settings
     * @summary Organization Settings Update
     * @param {OrganizationSettings} organizationSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResellerSettingsV1(organizationSettings: OrganizationSettings, options?: any): AxiosPromise<OrganizationSettings>;
    /**
     * Update user details
     * @summary Update Reseller User
     * @param {string} userId
     * @param {UserPayload} userPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResellerUserV1(userId: string, userPayload: UserPayload, options?: any): AxiosPromise<User>;
};
/**
 * ResellerApi - object-oriented interface
 * @export
 * @class ResellerApi
 * @extends {BaseAPI}
 */
export declare class ResellerApi extends BaseAPI {
    /**
     * Accept invite and add new user to organization
     * @summary Accept Invite
     * @param {AcceptInviteRequest} acceptInviteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    acceptResellerUserInviteV1(acceptInviteRequest: AcceptInviteRequest, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     * Add credits to customer
     * @summary Add Reseller Customer Credits
     * @param {string} customerOrgId
     * @param {Array<CreditRequest>} creditRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    addResellerCustomerCreditsV1(customerOrgId: string, creditRequest: Array<CreditRequest>, options?: any): Promise<import("axios").AxiosResponse<Credit[]>>;
    /**
     * Add Reseller settings
     * @summary Organization Settings
     * @param {OrganizationSettings} organizationSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    addResellerSettingsV1(organizationSettings: OrganizationSettings, options?: any): Promise<import("axios").AxiosResponse<OrganizationSettings>>;
    /**
     * Creates a new customer organization under a reseller organization
     * @summary Create Customer
     * @param {BodyCreateCustomerOrganizationV1} bodyCreateCustomerOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    createCustomerOrganizationV1(bodyCreateCustomerOrganizationV1: BodyCreateCustomerOrganizationV1, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     * Override pricing for customer
     * @summary Create Customer Pricing
     * @param {string} customerOrgId
     * @param {PricingRequest} pricingRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    createCustomerPricingV1(customerOrgId: string, pricingRequest: PricingRequest, options?: any): Promise<import("axios").AxiosResponse<Price>>;
    /**
     * Creates a new reseller organization and adds the created user as the \'ADMIN\' user for the org
     * @summary Create Reseller Organization
     * @param {BodyCreateResellerOrganizationV1} bodyCreateResellerOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    createResellerOrganizationV1(bodyCreateResellerOrganizationV1: BodyCreateResellerOrganizationV1, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     * Delete a user
     * @summary Delete Reseller User
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    deleteResellerUserV1(userId: string, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     * Get the customer org credentials for a customer organization under a reseller organization. NOTE: This will only return the custom token of the reseller admin user present in the customer org. Exchange this token with the id token to use it as a firebase credential in the client side.
     * @summary Get Customer Credentials
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    getCustomerCredentialsV1(customerOrgId: string, options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     * Get customer default pricing
     * @summary Get Customer Default Pricing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    getCustomerDefaultPricingV1(options?: any): Promise<import("axios").AxiosResponse<Price[]>>;
    /**
     * Get all invites for a customer organization
     * @summary Get Customer Invites
     * @param {string} customerOrgId
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    getCustomerInvitesV1(customerOrgId: string, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<import("axios").AxiosResponse<GuestOutput[]>>;
    /**
     * Get organization settings
     * @summary Get Organization Settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    getOrganizationSettingsV1(options?: any): Promise<import("axios").AxiosResponse<OrganizationSettings>>;
    /**
     * Get the reseller admin user basic auth credentials
     * @summary Get Reseller Admin User Credentials
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    getResellerAdminUserCredentialsV1(customerOrgId: string, options?: any): Promise<import("axios").AxiosResponse<ResellerAdminUserCredentials>>;
    /**
     * Get reseller credits
     * @summary Get Reseller Credits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    getResellerCreditsV1(options?: any): Promise<import("axios").AxiosResponse<Credit[]>>;
    /**
     * Get reseller customer by id
     * @summary Get Reseller Customer By Id
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    getResellerCustomerByIdV1(customerOrgId: string, options?: any): Promise<import("axios").AxiosResponse<OrgUsersPriceCredits>>;
    /**
     * Get resellers customer credits
     * @summary Get Reseller Customer Credits
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    getResellerCustomerCreditsV1(customerOrgId: string, options?: any): Promise<import("axios").AxiosResponse<Credit[]>>;
    /**
     * Get resellers customer pricing
     * @summary Get Reseller Customer Pricing
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    getResellerCustomerPricingV1(customerOrgId: string, options?: any): Promise<import("axios").AxiosResponse<Price[]>>;
    /**
     * Get reseller customers
     * @summary Get Reseller Customers
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    getResellerCustomersV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<import("axios").AxiosResponse<OrgUsersPriceCredits[]>>;
    /**
     * Get analytics data for Reseller
     * @summary Get Reseller Metrics
     * @param {ResellerBatchMetricsRequests} resellerBatchMetricsRequests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    getResellerMetricsV1(resellerBatchMetricsRequests: ResellerBatchMetricsRequests, options?: any): Promise<import("axios").AxiosResponse<BatchMetricsResponseInput>>;
    /**
     * Get a reseller organization by id
     * @summary Get Reseller Organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    getResellerOrganizationV1(options?: any): Promise<import("axios").AxiosResponse<OrgWithUsers>>;
    /**
     * Get pricing details for a reseller
     * @summary Get Reseller Pricing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    getResellerPricingV1(options?: any): Promise<import("axios").AxiosResponse<Price[]>>;
    /**
     * List of all open invites from the organization
     * @summary List Reseller User Invites
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    listResellerUserInvitesV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<import("axios").AxiosResponse<GuestOutput[]>>;
    /**
     * Lists all users under the user\'s organization
     * @summary List Reseller Users
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    listResellerUsersV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<import("axios").AxiosResponse<User[]>>;
    /**
     * Send invite to a user on behalf of a customer organization
     * @summary Invite Customer Users
     * @param {string} customerOrgId
     * @param {GuestInput} guestInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    sendCustomerUserInviteV1(customerOrgId: string, guestInput: GuestInput, options?: any): Promise<import("axios").AxiosResponse<GuestOutput>>;
    /**
     * Invite a new user to an organization or resend invite to the user if the user is already invited
     * @summary Invite Users
     * @param {GuestInput} guestInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    sendResellerUserInviteV1(guestInput: GuestInput, options?: any): Promise<import("axios").AxiosResponse<GuestOutput>>;
    /**
     * Sync reseller stripe customer
     * @summary Stripe Sync
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    stripeSyncV1(options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * Update customer default pricing
     * @summary Update Customer Default Pricing
     * @param {string} priceId
     * @param {PricingRequest} pricingRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    updateCustomerDefaultPricingV1(priceId: string, pricingRequest: PricingRequest, options?: any): Promise<import("axios").AxiosResponse<Price>>;
    /**
     * Update a customer organization under a reseller organization
     * @summary Update Customer
     * @param {string} customerOrgId
     * @param {OrganizationInput} organizationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    updateCustomerOrganizationV1(customerOrgId: string, organizationInput: OrganizationInput, options?: any): Promise<import("axios").AxiosResponse<OrganizationOutput>>;
    /**
     * Update customer pricing
     * @summary Update Customer Pricing
     * @param {string} customerOrgId
     * @param {string} priceId
     * @param {PricingRequest} pricingRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    updateCustomerPricingV1(customerOrgId: string, priceId: string, pricingRequest: PricingRequest, options?: any): Promise<import("axios").AxiosResponse<Price>>;
    /**
     * Update a reseller organization
     * @summary Update Reseller Organization
     * @param {UpdateResellerOrganizationRequest} updateResellerOrganizationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    updateResellerOrganizationV1(updateResellerOrganizationRequest: UpdateResellerOrganizationRequest, options?: any): Promise<import("axios").AxiosResponse<OrganizationOutput>>;
    /**
     * Update organization settings
     * @summary Organization Settings Update
     * @param {OrganizationSettings} organizationSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    updateResellerSettingsV1(organizationSettings: OrganizationSettings, options?: any): Promise<import("axios").AxiosResponse<OrganizationSettings>>;
    /**
     * Update user details
     * @summary Update Reseller User
     * @param {string} userId
     * @param {UserPayload} userPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerApi
     */
    updateResellerUserV1(userId: string, userPayload: UserPayload, options?: any): Promise<import("axios").AxiosResponse<User>>;
}
/**
 * SparrApi - axios parameter creator
 * @export
 */
export declare const SparrApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a new feedback
     * @summary Create Feedback
     * @param {FeedbackCore} feedbackCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFeedbackV1: (feedbackCore: FeedbackCore, options?: any) => Promise<RequestArgs>;
    /**
     * Create a new persona
     * @summary Create Persona
     * @param {PersonaCore} personaCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPersonaV1: (personaCore: PersonaCore, options?: any) => Promise<RequestArgs>;
    /**
     * Create a new scenario
     * @summary Create Scenario
     * @param {ScenarioCore} scenarioCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createScenarioV1: (scenarioCore: ScenarioCore, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a feedback
     * @summary Delete Feedback
     * @param {string} feedbackId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFeedbackV1: (feedbackId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a persona
     * @summary Delete Persona
     * @param {string} personaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePersonaV1: (personaId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a scenario
     * @summary Delete Scenario
     * @param {string} scenarioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteScenarioV1: (scenarioId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a specific feedback by ID
     * @summary Get Feedback
     * @param {string} feedbackId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeedbackV1: (feedbackId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get metrics for a given batch of metrics requests
     * @summary Get Metrics
     * @param {SparrModelsAnalyticsBatchMetricsRequests} sparrModelsAnalyticsBatchMetricsRequests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetricsV1: (sparrModelsAnalyticsBatchMetricsRequests: SparrModelsAnalyticsBatchMetricsRequests, options?: any) => Promise<RequestArgs>;
    /**
     * Get a specific persona by ID
     * @summary Get Persona
     * @param {string} personaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPersonaV1: (personaId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieve a specific scenario by ID
     * @summary Get Scenario
     * @param {string} scenarioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScenarioV1: (scenarioId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Import a persona from LinkedIn URL
     * @summary Import Linkedin Persona
     * @param {string} linkedinUrl
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    importLinkedinPersonaV1: (linkedinUrl: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get all feedbacks
     * @summary Get Feedbacks
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFeedbacksV1: (skip?: number, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Get all personas
     * @summary Get Personas
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPersonasV1: (skip?: number, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Retrieve all scenarios
     * @summary Get Scenarios
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listScenariosV1: (skip?: number, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Search personas by name, title and company
     * @summary Search Personas
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchPersonasV1: (query: string, page?: number, size?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Search scenarios by name and description
     * @summary Search Scenarios
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchScenariosV1: (query: string, page?: number, size?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Heart Beat check to check the health of Sparr Service
     * @summary Heart Beat Status Of Sparr Service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusSparrStatusGet: (options?: any) => Promise<RequestArgs>;
    /**
     * Update a feedback
     * @summary Update Feedback
     * @param {string} feedbackId
     * @param {FeedbackCore} feedbackCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFeedbackV1: (feedbackId: string, feedbackCore: FeedbackCore, options?: any) => Promise<RequestArgs>;
    /**
     * Update a persona
     * @summary Update Persona
     * @param {string} personaId
     * @param {PersonaCore} personaCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePersonaV1: (personaId: string, personaCore: PersonaCore, options?: any) => Promise<RequestArgs>;
    /**
     * Update a scenario
     * @summary Update Scenario
     * @param {string} scenarioId
     * @param {ScenarioCore} scenarioCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateScenarioV1: (scenarioId: string, scenarioCore: ScenarioCore, options?: any) => Promise<RequestArgs>;
};
/**
 * SparrApi - functional programming interface
 * @export
 */
export declare const SparrApiFp: (configuration?: Configuration) => {
    /**
     * Create a new feedback
     * @summary Create Feedback
     * @param {FeedbackCore} feedbackCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFeedbackV1(feedbackCore: FeedbackCore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feedback>>;
    /**
     * Create a new persona
     * @summary Create Persona
     * @param {PersonaCore} personaCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPersonaV1(personaCore: PersonaCore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Persona>>;
    /**
     * Create a new scenario
     * @summary Create Scenario
     * @param {ScenarioCore} scenarioCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createScenarioV1(scenarioCore: ScenarioCore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Scenario>>;
    /**
     * Delete a feedback
     * @summary Delete Feedback
     * @param {string} feedbackId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFeedbackV1(feedbackId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SparrModelsBaseBaseResponse>>;
    /**
     * Delete a persona
     * @summary Delete Persona
     * @param {string} personaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePersonaV1(personaId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SparrModelsBaseBaseResponse>>;
    /**
     * Delete a scenario
     * @summary Delete Scenario
     * @param {string} scenarioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteScenarioV1(scenarioId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SparrModelsBaseBaseResponse>>;
    /**
     * Get a specific feedback by ID
     * @summary Get Feedback
     * @param {string} feedbackId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeedbackV1(feedbackId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feedback>>;
    /**
     * Get metrics for a given batch of metrics requests
     * @summary Get Metrics
     * @param {SparrModelsAnalyticsBatchMetricsRequests} sparrModelsAnalyticsBatchMetricsRequests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetricsV1(sparrModelsAnalyticsBatchMetricsRequests: SparrModelsAnalyticsBatchMetricsRequests, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SparrModelsAnalyticsBatchMetricsResponse>>;
    /**
     * Get a specific persona by ID
     * @summary Get Persona
     * @param {string} personaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPersonaV1(personaId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Persona>>;
    /**
     * Retrieve a specific scenario by ID
     * @summary Get Scenario
     * @param {string} scenarioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScenarioV1(scenarioId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Scenario>>;
    /**
     * Import a persona from LinkedIn URL
     * @summary Import Linkedin Persona
     * @param {string} linkedinUrl
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    importLinkedinPersonaV1(linkedinUrl: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Persona>>;
    /**
     * Get all feedbacks
     * @summary Get Feedbacks
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFeedbacksV1(skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Feedback>>>;
    /**
     * Get all personas
     * @summary Get Personas
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPersonasV1(skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Persona>>>;
    /**
     * Retrieve all scenarios
     * @summary Get Scenarios
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listScenariosV1(skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Scenario>>>;
    /**
     * Search personas by name, title and company
     * @summary Search Personas
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchPersonasV1(query: string, page?: number, size?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonaSearchResponse>>;
    /**
     * Search scenarios by name and description
     * @summary Search Scenarios
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchScenariosV1(query: string, page?: number, size?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScenarioSearchResponse>>;
    /**
     * Heart Beat check to check the health of Sparr Service
     * @summary Heart Beat Status Of Sparr Service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusSparrStatusGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Update a feedback
     * @summary Update Feedback
     * @param {string} feedbackId
     * @param {FeedbackCore} feedbackCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFeedbackV1(feedbackId: string, feedbackCore: FeedbackCore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feedback>>;
    /**
     * Update a persona
     * @summary Update Persona
     * @param {string} personaId
     * @param {PersonaCore} personaCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePersonaV1(personaId: string, personaCore: PersonaCore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Persona>>;
    /**
     * Update a scenario
     * @summary Update Scenario
     * @param {string} scenarioId
     * @param {ScenarioCore} scenarioCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateScenarioV1(scenarioId: string, scenarioCore: ScenarioCore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Scenario>>;
};
/**
 * SparrApi - factory interface
 * @export
 */
export declare const SparrApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a new feedback
     * @summary Create Feedback
     * @param {FeedbackCore} feedbackCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFeedbackV1(feedbackCore: FeedbackCore, options?: any): AxiosPromise<Feedback>;
    /**
     * Create a new persona
     * @summary Create Persona
     * @param {PersonaCore} personaCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPersonaV1(personaCore: PersonaCore, options?: any): AxiosPromise<Persona>;
    /**
     * Create a new scenario
     * @summary Create Scenario
     * @param {ScenarioCore} scenarioCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createScenarioV1(scenarioCore: ScenarioCore, options?: any): AxiosPromise<Scenario>;
    /**
     * Delete a feedback
     * @summary Delete Feedback
     * @param {string} feedbackId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFeedbackV1(feedbackId: string, options?: any): AxiosPromise<SparrModelsBaseBaseResponse>;
    /**
     * Delete a persona
     * @summary Delete Persona
     * @param {string} personaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePersonaV1(personaId: string, options?: any): AxiosPromise<SparrModelsBaseBaseResponse>;
    /**
     * Delete a scenario
     * @summary Delete Scenario
     * @param {string} scenarioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteScenarioV1(scenarioId: string, options?: any): AxiosPromise<SparrModelsBaseBaseResponse>;
    /**
     * Get a specific feedback by ID
     * @summary Get Feedback
     * @param {string} feedbackId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeedbackV1(feedbackId: string, options?: any): AxiosPromise<Feedback>;
    /**
     * Get metrics for a given batch of metrics requests
     * @summary Get Metrics
     * @param {SparrModelsAnalyticsBatchMetricsRequests} sparrModelsAnalyticsBatchMetricsRequests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetricsV1(sparrModelsAnalyticsBatchMetricsRequests: SparrModelsAnalyticsBatchMetricsRequests, options?: any): AxiosPromise<SparrModelsAnalyticsBatchMetricsResponse>;
    /**
     * Get a specific persona by ID
     * @summary Get Persona
     * @param {string} personaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPersonaV1(personaId: string, options?: any): AxiosPromise<Persona>;
    /**
     * Retrieve a specific scenario by ID
     * @summary Get Scenario
     * @param {string} scenarioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScenarioV1(scenarioId: string, options?: any): AxiosPromise<Scenario>;
    /**
     * Import a persona from LinkedIn URL
     * @summary Import Linkedin Persona
     * @param {string} linkedinUrl
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    importLinkedinPersonaV1(linkedinUrl: string, options?: any): AxiosPromise<Persona>;
    /**
     * Get all feedbacks
     * @summary Get Feedbacks
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFeedbacksV1(skip?: number, limit?: number, options?: any): AxiosPromise<Array<Feedback>>;
    /**
     * Get all personas
     * @summary Get Personas
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPersonasV1(skip?: number, limit?: number, options?: any): AxiosPromise<Array<Persona>>;
    /**
     * Retrieve all scenarios
     * @summary Get Scenarios
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listScenariosV1(skip?: number, limit?: number, options?: any): AxiosPromise<Array<Scenario>>;
    /**
     * Search personas by name, title and company
     * @summary Search Personas
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchPersonasV1(query: string, page?: number, size?: number, options?: any): AxiosPromise<PersonaSearchResponse>;
    /**
     * Search scenarios by name and description
     * @summary Search Scenarios
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchScenariosV1(query: string, page?: number, size?: number, options?: any): AxiosPromise<ScenarioSearchResponse>;
    /**
     * Heart Beat check to check the health of Sparr Service
     * @summary Heart Beat Status Of Sparr Service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusSparrStatusGet(options?: any): AxiosPromise<object>;
    /**
     * Update a feedback
     * @summary Update Feedback
     * @param {string} feedbackId
     * @param {FeedbackCore} feedbackCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFeedbackV1(feedbackId: string, feedbackCore: FeedbackCore, options?: any): AxiosPromise<Feedback>;
    /**
     * Update a persona
     * @summary Update Persona
     * @param {string} personaId
     * @param {PersonaCore} personaCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePersonaV1(personaId: string, personaCore: PersonaCore, options?: any): AxiosPromise<Persona>;
    /**
     * Update a scenario
     * @summary Update Scenario
     * @param {string} scenarioId
     * @param {ScenarioCore} scenarioCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateScenarioV1(scenarioId: string, scenarioCore: ScenarioCore, options?: any): AxiosPromise<Scenario>;
};
/**
 * SparrApi - object-oriented interface
 * @export
 * @class SparrApi
 * @extends {BaseAPI}
 */
export declare class SparrApi extends BaseAPI {
    /**
     * Create a new feedback
     * @summary Create Feedback
     * @param {FeedbackCore} feedbackCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    createFeedbackV1(feedbackCore: FeedbackCore, options?: any): Promise<import("axios").AxiosResponse<Feedback>>;
    /**
     * Create a new persona
     * @summary Create Persona
     * @param {PersonaCore} personaCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    createPersonaV1(personaCore: PersonaCore, options?: any): Promise<import("axios").AxiosResponse<Persona>>;
    /**
     * Create a new scenario
     * @summary Create Scenario
     * @param {ScenarioCore} scenarioCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    createScenarioV1(scenarioCore: ScenarioCore, options?: any): Promise<import("axios").AxiosResponse<Scenario>>;
    /**
     * Delete a feedback
     * @summary Delete Feedback
     * @param {string} feedbackId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    deleteFeedbackV1(feedbackId: string, options?: any): Promise<import("axios").AxiosResponse<SparrModelsBaseBaseResponse>>;
    /**
     * Delete a persona
     * @summary Delete Persona
     * @param {string} personaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    deletePersonaV1(personaId: string, options?: any): Promise<import("axios").AxiosResponse<SparrModelsBaseBaseResponse>>;
    /**
     * Delete a scenario
     * @summary Delete Scenario
     * @param {string} scenarioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    deleteScenarioV1(scenarioId: string, options?: any): Promise<import("axios").AxiosResponse<SparrModelsBaseBaseResponse>>;
    /**
     * Get a specific feedback by ID
     * @summary Get Feedback
     * @param {string} feedbackId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    getFeedbackV1(feedbackId: string, options?: any): Promise<import("axios").AxiosResponse<Feedback>>;
    /**
     * Get metrics for a given batch of metrics requests
     * @summary Get Metrics
     * @param {SparrModelsAnalyticsBatchMetricsRequests} sparrModelsAnalyticsBatchMetricsRequests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    getMetricsV1(sparrModelsAnalyticsBatchMetricsRequests: SparrModelsAnalyticsBatchMetricsRequests, options?: any): Promise<import("axios").AxiosResponse<SparrModelsAnalyticsBatchMetricsResponse>>;
    /**
     * Get a specific persona by ID
     * @summary Get Persona
     * @param {string} personaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    getPersonaV1(personaId: string, options?: any): Promise<import("axios").AxiosResponse<Persona>>;
    /**
     * Retrieve a specific scenario by ID
     * @summary Get Scenario
     * @param {string} scenarioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    getScenarioV1(scenarioId: string, options?: any): Promise<import("axios").AxiosResponse<Scenario>>;
    /**
     * Import a persona from LinkedIn URL
     * @summary Import Linkedin Persona
     * @param {string} linkedinUrl
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    importLinkedinPersonaV1(linkedinUrl: string, options?: any): Promise<import("axios").AxiosResponse<Persona>>;
    /**
     * Get all feedbacks
     * @summary Get Feedbacks
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    listFeedbacksV1(skip?: number, limit?: number, options?: any): Promise<import("axios").AxiosResponse<Feedback[]>>;
    /**
     * Get all personas
     * @summary Get Personas
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    listPersonasV1(skip?: number, limit?: number, options?: any): Promise<import("axios").AxiosResponse<Persona[]>>;
    /**
     * Retrieve all scenarios
     * @summary Get Scenarios
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    listScenariosV1(skip?: number, limit?: number, options?: any): Promise<import("axios").AxiosResponse<Scenario[]>>;
    /**
     * Search personas by name, title and company
     * @summary Search Personas
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    searchPersonasV1(query: string, page?: number, size?: number, options?: any): Promise<import("axios").AxiosResponse<PersonaSearchResponse>>;
    /**
     * Search scenarios by name and description
     * @summary Search Scenarios
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    searchScenariosV1(query: string, page?: number, size?: number, options?: any): Promise<import("axios").AxiosResponse<ScenarioSearchResponse>>;
    /**
     * Heart Beat check to check the health of Sparr Service
     * @summary Heart Beat Status Of Sparr Service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    statusSparrStatusGet(options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     * Update a feedback
     * @summary Update Feedback
     * @param {string} feedbackId
     * @param {FeedbackCore} feedbackCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    updateFeedbackV1(feedbackId: string, feedbackCore: FeedbackCore, options?: any): Promise<import("axios").AxiosResponse<Feedback>>;
    /**
     * Update a persona
     * @summary Update Persona
     * @param {string} personaId
     * @param {PersonaCore} personaCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    updatePersonaV1(personaId: string, personaCore: PersonaCore, options?: any): Promise<import("axios").AxiosResponse<Persona>>;
    /**
     * Update a scenario
     * @summary Update Scenario
     * @param {string} scenarioId
     * @param {ScenarioCore} scenarioCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    updateScenarioV1(scenarioId: string, scenarioCore: ScenarioCore, options?: any): Promise<import("axios").AxiosResponse<Scenario>>;
}
/**
 * SparringApi - axios parameter creator
 * @export
 */
export declare const SparringApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a virtual prospect
     * @summary Create Virtual Prospect
     * @param {VirtualProspectInput} virtualProspectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createVirtualProspectV1SparrVirtualProspectsPost: (virtualProspectInput: VirtualProspectInput, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a virtual prospect
     * @summary Delete Virtual Prospect
     * @param {string} prospectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVirtualProspectV1SparrVirtualProspectsProspectIdDelete: (prospectId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get sparring stats from Trata AI like call count, prospect count, etc.
     * @summary Get Sparring Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSparringStatsV1SparrSparringStatsGet: (options?: any) => Promise<RequestArgs>;
    /**
     * Get virtual prospect associated with an agent
     * @summary Get Virtual Prospect by Agent ID
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVirtualProspectByAgentIdV1SparrAgentAgentIdVirtualProspectGet: (agentId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a virtual prospect
     * @summary Get Virtual Prospect
     * @param {string} prospectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVirtualProspectV1SparrVirtualProspectsProspectIdGet: (prospectId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Link a virtual prospect to an agent
     * @summary Link Virtual Prospect to Agent
     * @param {string} prospectId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkVirtualProspectToAgentV1SparrVirtualProspectsProspectIdAgentAgentIdLinkPost: (prospectId: string, agentId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List all virtual prospects
     * @summary List Virtual Prospects
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVirtualProspectsV1SparrVirtualProspectsGet: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Update a virtual prospect
     * @summary Update Virtual Prospect
     * @param {string} prospectId
     * @param {VirtualProspectInput} virtualProspectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVirtualProspectV1SparrVirtualProspectsProspectIdPut: (prospectId: string, virtualProspectInput: VirtualProspectInput, options?: any) => Promise<RequestArgs>;
};
/**
 * SparringApi - functional programming interface
 * @export
 */
export declare const SparringApiFp: (configuration?: Configuration) => {
    /**
     * Create a virtual prospect
     * @summary Create Virtual Prospect
     * @param {VirtualProspectInput} virtualProspectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createVirtualProspectV1SparrVirtualProspectsPost(virtualProspectInput: VirtualProspectInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VirtualProspectOutput>>;
    /**
     * Delete a virtual prospect
     * @summary Delete Virtual Prospect
     * @param {string} prospectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVirtualProspectV1SparrVirtualProspectsProspectIdDelete(prospectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * Get sparring stats from Trata AI like call count, prospect count, etc.
     * @summary Get Sparring Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSparringStatsV1SparrSparringStatsGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SparrStatsResponse>>;
    /**
     * Get virtual prospect associated with an agent
     * @summary Get Virtual Prospect by Agent ID
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVirtualProspectByAgentIdV1SparrAgentAgentIdVirtualProspectGet(agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VirtualProspectOutput>>>;
    /**
     * Get a virtual prospect
     * @summary Get Virtual Prospect
     * @param {string} prospectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVirtualProspectV1SparrVirtualProspectsProspectIdGet(prospectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VirtualProspectOutput>>;
    /**
     * Link a virtual prospect to an agent
     * @summary Link Virtual Prospect to Agent
     * @param {string} prospectId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkVirtualProspectToAgentV1SparrVirtualProspectsProspectIdAgentAgentIdLinkPost(prospectId: string, agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VirtualProspectAIAgentLink>>;
    /**
     * List all virtual prospects
     * @summary List Virtual Prospects
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVirtualProspectsV1SparrVirtualProspectsGet(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VirtualProspectOutput>>>;
    /**
     * Update a virtual prospect
     * @summary Update Virtual Prospect
     * @param {string} prospectId
     * @param {VirtualProspectInput} virtualProspectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVirtualProspectV1SparrVirtualProspectsProspectIdPut(prospectId: string, virtualProspectInput: VirtualProspectInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VirtualProspectOutput>>;
};
/**
 * SparringApi - factory interface
 * @export
 */
export declare const SparringApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a virtual prospect
     * @summary Create Virtual Prospect
     * @param {VirtualProspectInput} virtualProspectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createVirtualProspectV1SparrVirtualProspectsPost(virtualProspectInput: VirtualProspectInput, options?: any): AxiosPromise<VirtualProspectOutput>;
    /**
     * Delete a virtual prospect
     * @summary Delete Virtual Prospect
     * @param {string} prospectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVirtualProspectV1SparrVirtualProspectsProspectIdDelete(prospectId: string, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * Get sparring stats from Trata AI like call count, prospect count, etc.
     * @summary Get Sparring Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSparringStatsV1SparrSparringStatsGet(options?: any): AxiosPromise<SparrStatsResponse>;
    /**
     * Get virtual prospect associated with an agent
     * @summary Get Virtual Prospect by Agent ID
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVirtualProspectByAgentIdV1SparrAgentAgentIdVirtualProspectGet(agentId: string, options?: any): AxiosPromise<Array<VirtualProspectOutput>>;
    /**
     * Get a virtual prospect
     * @summary Get Virtual Prospect
     * @param {string} prospectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVirtualProspectV1SparrVirtualProspectsProspectIdGet(prospectId: string, options?: any): AxiosPromise<VirtualProspectOutput>;
    /**
     * Link a virtual prospect to an agent
     * @summary Link Virtual Prospect to Agent
     * @param {string} prospectId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkVirtualProspectToAgentV1SparrVirtualProspectsProspectIdAgentAgentIdLinkPost(prospectId: string, agentId: string, options?: any): AxiosPromise<VirtualProspectAIAgentLink>;
    /**
     * List all virtual prospects
     * @summary List Virtual Prospects
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVirtualProspectsV1SparrVirtualProspectsGet(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): AxiosPromise<Array<VirtualProspectOutput>>;
    /**
     * Update a virtual prospect
     * @summary Update Virtual Prospect
     * @param {string} prospectId
     * @param {VirtualProspectInput} virtualProspectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVirtualProspectV1SparrVirtualProspectsProspectIdPut(prospectId: string, virtualProspectInput: VirtualProspectInput, options?: any): AxiosPromise<VirtualProspectOutput>;
};
/**
 * SparringApi - object-oriented interface
 * @export
 * @class SparringApi
 * @extends {BaseAPI}
 */
export declare class SparringApi extends BaseAPI {
    /**
     * Create a virtual prospect
     * @summary Create Virtual Prospect
     * @param {VirtualProspectInput} virtualProspectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparringApi
     */
    createVirtualProspectV1SparrVirtualProspectsPost(virtualProspectInput: VirtualProspectInput, options?: any): Promise<import("axios").AxiosResponse<VirtualProspectOutput>>;
    /**
     * Delete a virtual prospect
     * @summary Delete Virtual Prospect
     * @param {string} prospectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparringApi
     */
    deleteVirtualProspectV1SparrVirtualProspectsProspectIdDelete(prospectId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * Get sparring stats from Trata AI like call count, prospect count, etc.
     * @summary Get Sparring Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparringApi
     */
    getSparringStatsV1SparrSparringStatsGet(options?: any): Promise<import("axios").AxiosResponse<SparrStatsResponse>>;
    /**
     * Get virtual prospect associated with an agent
     * @summary Get Virtual Prospect by Agent ID
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparringApi
     */
    getVirtualProspectByAgentIdV1SparrAgentAgentIdVirtualProspectGet(agentId: string, options?: any): Promise<import("axios").AxiosResponse<VirtualProspectOutput[]>>;
    /**
     * Get a virtual prospect
     * @summary Get Virtual Prospect
     * @param {string} prospectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparringApi
     */
    getVirtualProspectV1SparrVirtualProspectsProspectIdGet(prospectId: string, options?: any): Promise<import("axios").AxiosResponse<VirtualProspectOutput>>;
    /**
     * Link a virtual prospect to an agent
     * @summary Link Virtual Prospect to Agent
     * @param {string} prospectId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparringApi
     */
    linkVirtualProspectToAgentV1SparrVirtualProspectsProspectIdAgentAgentIdLinkPost(prospectId: string, agentId: string, options?: any): Promise<import("axios").AxiosResponse<VirtualProspectAIAgentLink>>;
    /**
     * List all virtual prospects
     * @summary List Virtual Prospects
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparringApi
     */
    listVirtualProspectsV1SparrVirtualProspectsGet(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<import("axios").AxiosResponse<VirtualProspectOutput[]>>;
    /**
     * Update a virtual prospect
     * @summary Update Virtual Prospect
     * @param {string} prospectId
     * @param {VirtualProspectInput} virtualProspectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparringApi
     */
    updateVirtualProspectV1SparrVirtualProspectsProspectIdPut(prospectId: string, virtualProspectInput: VirtualProspectInput, options?: any): Promise<import("axios").AxiosResponse<VirtualProspectOutput>>;
}
/**
 * TelephonyApi - axios parameter creator
 * @export
 */
export declare const TelephonyApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get Agent Phones
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAgentPhonesV1: (agentId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Link Phone To Agent
     * @param {string} phoneId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkPhoneToAgentV1: (phoneId: string, agentId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary List Available Phones
     * @param {string} countryCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAvailablePhonesV1: (countryCode: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary List Purchased Phones
     * @param {string} [countryCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPurchasedPhonesV1: (countryCode?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary List Supported Countries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSupportedCountriesV1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Purchase Phone
     * @param {NumberPurchaseRequest} numberPurchaseRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purchasePhoneV1: (numberPurchaseRequest: NumberPurchaseRequest, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Release Phone
     * @param {string} phoneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    releasePhoneV1: (phoneId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Unlink Phone From Agent
     * @param {string} phoneId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlinkPhoneFromAgentV1: (phoneId: string, agentId: string, options?: any) => Promise<RequestArgs>;
};
/**
 * TelephonyApi - functional programming interface
 * @export
 */
export declare const TelephonyApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get Agent Phones
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAgentPhonesV1(agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TelephoneNumber>>>;
    /**
     *
     * @summary Link Phone To Agent
     * @param {string} phoneId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkPhoneToAgentV1(phoneId: string, agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     *
     * @summary List Available Phones
     * @param {string} countryCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAvailablePhonesV1(countryCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AvailablePhoneNumber>>>;
    /**
     *
     * @summary List Purchased Phones
     * @param {string} [countryCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPurchasedPhonesV1(countryCode?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TelephoneNumber>>>;
    /**
     *
     * @summary List Supported Countries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSupportedCountriesV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CountryInfo>>>;
    /**
     *
     * @summary Purchase Phone
     * @param {NumberPurchaseRequest} numberPurchaseRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purchasePhoneV1(numberPurchaseRequest: NumberPurchaseRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TelephoneNumber>>;
    /**
     *
     * @summary Release Phone
     * @param {string} phoneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    releasePhoneV1(phoneId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     *
     * @summary Unlink Phone From Agent
     * @param {string} phoneId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlinkPhoneFromAgentV1(phoneId: string, agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
};
/**
 * TelephonyApi - factory interface
 * @export
 */
export declare const TelephonyApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get Agent Phones
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAgentPhonesV1(agentId: string, options?: any): AxiosPromise<Array<TelephoneNumber>>;
    /**
     *
     * @summary Link Phone To Agent
     * @param {string} phoneId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkPhoneToAgentV1(phoneId: string, agentId: string, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     *
     * @summary List Available Phones
     * @param {string} countryCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAvailablePhonesV1(countryCode: string, options?: any): AxiosPromise<Array<AvailablePhoneNumber>>;
    /**
     *
     * @summary List Purchased Phones
     * @param {string} [countryCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPurchasedPhonesV1(countryCode?: string, options?: any): AxiosPromise<Array<TelephoneNumber>>;
    /**
     *
     * @summary List Supported Countries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSupportedCountriesV1(options?: any): AxiosPromise<Array<CountryInfo>>;
    /**
     *
     * @summary Purchase Phone
     * @param {NumberPurchaseRequest} numberPurchaseRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purchasePhoneV1(numberPurchaseRequest: NumberPurchaseRequest, options?: any): AxiosPromise<TelephoneNumber>;
    /**
     *
     * @summary Release Phone
     * @param {string} phoneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    releasePhoneV1(phoneId: string, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     *
     * @summary Unlink Phone From Agent
     * @param {string} phoneId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlinkPhoneFromAgentV1(phoneId: string, agentId: string, options?: any): AxiosPromise<BaseResponseInput>;
};
/**
 * TelephonyApi - object-oriented interface
 * @export
 * @class TelephonyApi
 * @extends {BaseAPI}
 */
export declare class TelephonyApi extends BaseAPI {
    /**
     *
     * @summary Get Agent Phones
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TelephonyApi
     */
    getAgentPhonesV1(agentId: string, options?: any): Promise<import("axios").AxiosResponse<TelephoneNumber[]>>;
    /**
     *
     * @summary Link Phone To Agent
     * @param {string} phoneId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TelephonyApi
     */
    linkPhoneToAgentV1(phoneId: string, agentId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     *
     * @summary List Available Phones
     * @param {string} countryCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TelephonyApi
     */
    listAvailablePhonesV1(countryCode: string, options?: any): Promise<import("axios").AxiosResponse<AvailablePhoneNumber[]>>;
    /**
     *
     * @summary List Purchased Phones
     * @param {string} [countryCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TelephonyApi
     */
    listPurchasedPhonesV1(countryCode?: string, options?: any): Promise<import("axios").AxiosResponse<TelephoneNumber[]>>;
    /**
     *
     * @summary List Supported Countries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TelephonyApi
     */
    listSupportedCountriesV1(options?: any): Promise<import("axios").AxiosResponse<CountryInfo[]>>;
    /**
     *
     * @summary Purchase Phone
     * @param {NumberPurchaseRequest} numberPurchaseRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TelephonyApi
     */
    purchasePhoneV1(numberPurchaseRequest: NumberPurchaseRequest, options?: any): Promise<import("axios").AxiosResponse<TelephoneNumber>>;
    /**
     *
     * @summary Release Phone
     * @param {string} phoneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TelephonyApi
     */
    releasePhoneV1(phoneId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     *
     * @summary Unlink Phone From Agent
     * @param {string} phoneId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TelephonyApi
     */
    unlinkPhoneFromAgentV1(phoneId: string, agentId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
}
/**
 * UIApi - axios parameter creator
 * @export
 */
export declare const UIApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary List Action Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActionTemplatesV1: (language?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary List Products
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {string} [tags]
     * @param {string} [productIds]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProductsDetailedV1: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, tags?: string, productIds?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary List Prompt Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPromptTemplatesV1: (language?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary List Role Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRoleTemplatesV1: (language?: string, options?: any) => Promise<RequestArgs>;
};
/**
 * UIApi - functional programming interface
 * @export
 */
export declare const UIApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary List Action Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActionTemplatesV1(language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ActionInput>>>;
    /**
     *
     * @summary List Products
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {string} [tags]
     * @param {string} [productIds]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProductsDetailedV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, tags?: string, productIds?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductWithAgents>>>;
    /**
     *
     * @summary List Prompt Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPromptTemplatesV1(language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{
        [key: string]: PromptTemplate;
    }>>;
    /**
     *
     * @summary List Role Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRoleTemplatesV1(language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleTemplate>>>;
};
/**
 * UIApi - factory interface
 * @export
 */
export declare const UIApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary List Action Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActionTemplatesV1(language?: string, options?: any): AxiosPromise<Array<ActionInput>>;
    /**
     *
     * @summary List Products
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {string} [tags]
     * @param {string} [productIds]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProductsDetailedV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, tags?: string, productIds?: string, options?: any): AxiosPromise<Array<ProductWithAgents>>;
    /**
     *
     * @summary List Prompt Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPromptTemplatesV1(language?: string, options?: any): AxiosPromise<{
        [key: string]: PromptTemplate;
    }>;
    /**
     *
     * @summary List Role Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRoleTemplatesV1(language?: string, options?: any): AxiosPromise<Array<RoleTemplate>>;
};
/**
 * UIApi - object-oriented interface
 * @export
 * @class UIApi
 * @extends {BaseAPI}
 */
export declare class UIApi extends BaseAPI {
    /**
     *
     * @summary List Action Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UIApi
     */
    listActionTemplatesV1(language?: string, options?: any): Promise<import("axios").AxiosResponse<ActionInput[]>>;
    /**
     *
     * @summary List Products
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {string} [tags]
     * @param {string} [productIds]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UIApi
     */
    listProductsDetailedV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, tags?: string, productIds?: string, options?: any): Promise<import("axios").AxiosResponse<ProductWithAgents[]>>;
    /**
     *
     * @summary List Prompt Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UIApi
     */
    listPromptTemplatesV1(language?: string, options?: any): Promise<import("axios").AxiosResponse<{
        [key: string]: PromptTemplate;
    }>>;
    /**
     *
     * @summary List Role Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UIApi
     */
    listRoleTemplatesV1(language?: string, options?: any): Promise<import("axios").AxiosResponse<RoleTemplate[]>>;
}
/**
 * VoiceModelsApi - axios parameter creator
 * @export
 */
export declare const VoiceModelsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get List Of Voices Available For Conversations
     * @summary Get List Of Voices Available For Conversations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVoiceModelsV1: (options?: any) => Promise<RequestArgs>;
};
/**
 * VoiceModelsApi - functional programming interface
 * @export
 */
export declare const VoiceModelsApiFp: (configuration?: Configuration) => {
    /**
     * Get List Of Voices Available For Conversations
     * @summary Get List Of Voices Available For Conversations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVoiceModelsV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VoiceModel>>>;
};
/**
 * VoiceModelsApi - factory interface
 * @export
 */
export declare const VoiceModelsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get List Of Voices Available For Conversations
     * @summary Get List Of Voices Available For Conversations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVoiceModelsV1(options?: any): AxiosPromise<Array<VoiceModel>>;
};
/**
 * VoiceModelsApi - object-oriented interface
 * @export
 * @class VoiceModelsApi
 * @extends {BaseAPI}
 */
export declare class VoiceModelsApi extends BaseAPI {
    /**
     * Get List Of Voices Available For Conversations
     * @summary Get List Of Voices Available For Conversations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoiceModelsApi
     */
    listVoiceModelsV1(options?: any): Promise<import("axios").AxiosResponse<VoiceModel[]>>;
}
/**
 * WorkflowsApi - axios parameter creator
 * @export
 */
export declare const WorkflowsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create Workflow
     * @param {WorkflowCore} workflowCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkflowV1WorkflowsPost: (workflowCore: WorkflowCore, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete Workflow
     * @param {string} workflowId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkflowV1WorkflowsWorkflowIdDelete: (workflowId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Read Workflow
     * @param {string} workflowId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readWorkflowV1WorkflowsWorkflowIdGet: (workflowId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Read Workflows
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {AgenticWorkflowAdkModelsWorkflowAppEnum} [app]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readWorkflowsV1WorkflowsGet: (skip?: number, limit?: number, app?: AgenticWorkflowAdkModelsWorkflowAppEnum, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Trigger Workflow Step
     * @param {string} workflowId
     * @param {string} stepId
     * @param {WorkflowStepTriggerRequest} workflowStepTriggerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    triggerWorkflowStepV1WorkflowsWorkflowIdStepStepIdTriggerPost: (workflowId: string, stepId: string, workflowStepTriggerRequest: WorkflowStepTriggerRequest, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Update Workflow
     * @param {string} workflowId
     * @param {WorkflowCore} workflowCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkflowV1WorkflowsWorkflowIdPut: (workflowId: string, workflowCore: WorkflowCore, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Upload File
     * @param {string} workflowId
     * @param {any} file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFileV1WorkflowsWorkflowIdFilePost: (workflowId: string, file: any, options?: any) => Promise<RequestArgs>;
};
/**
 * WorkflowsApi - functional programming interface
 * @export
 */
export declare const WorkflowsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create Workflow
     * @param {WorkflowCore} workflowCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkflowV1WorkflowsPost(workflowCore: WorkflowCore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workflow>>;
    /**
     *
     * @summary Delete Workflow
     * @param {string} workflowId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkflowV1WorkflowsWorkflowIdDelete(workflowId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgenticWorkflowModelsBaseBaseResponse>>;
    /**
     *
     * @summary Read Workflow
     * @param {string} workflowId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readWorkflowV1WorkflowsWorkflowIdGet(workflowId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workflow>>;
    /**
     *
     * @summary Read Workflows
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {AgenticWorkflowAdkModelsWorkflowAppEnum} [app]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readWorkflowsV1WorkflowsGet(skip?: number, limit?: number, app?: AgenticWorkflowAdkModelsWorkflowAppEnum, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Workflow>>>;
    /**
     *
     * @summary Trigger Workflow Step
     * @param {string} workflowId
     * @param {string} stepId
     * @param {WorkflowStepTriggerRequest} workflowStepTriggerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    triggerWorkflowStepV1WorkflowsWorkflowIdStepStepIdTriggerPost(workflowId: string, stepId: string, workflowStepTriggerRequest: WorkflowStepTriggerRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowStepTriggerResponse>>;
    /**
     *
     * @summary Update Workflow
     * @param {string} workflowId
     * @param {WorkflowCore} workflowCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkflowV1WorkflowsWorkflowIdPut(workflowId: string, workflowCore: WorkflowCore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workflow>>;
    /**
     *
     * @summary Upload File
     * @param {string} workflowId
     * @param {any} file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFileV1WorkflowsWorkflowIdFilePost(workflowId: string, file: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadFileResponse>>;
};
/**
 * WorkflowsApi - factory interface
 * @export
 */
export declare const WorkflowsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create Workflow
     * @param {WorkflowCore} workflowCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkflowV1WorkflowsPost(workflowCore: WorkflowCore, options?: any): AxiosPromise<Workflow>;
    /**
     *
     * @summary Delete Workflow
     * @param {string} workflowId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkflowV1WorkflowsWorkflowIdDelete(workflowId: string, options?: any): AxiosPromise<AgenticWorkflowModelsBaseBaseResponse>;
    /**
     *
     * @summary Read Workflow
     * @param {string} workflowId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readWorkflowV1WorkflowsWorkflowIdGet(workflowId: string, options?: any): AxiosPromise<Workflow>;
    /**
     *
     * @summary Read Workflows
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {AgenticWorkflowAdkModelsWorkflowAppEnum} [app]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readWorkflowsV1WorkflowsGet(skip?: number, limit?: number, app?: AgenticWorkflowAdkModelsWorkflowAppEnum, options?: any): AxiosPromise<Array<Workflow>>;
    /**
     *
     * @summary Trigger Workflow Step
     * @param {string} workflowId
     * @param {string} stepId
     * @param {WorkflowStepTriggerRequest} workflowStepTriggerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    triggerWorkflowStepV1WorkflowsWorkflowIdStepStepIdTriggerPost(workflowId: string, stepId: string, workflowStepTriggerRequest: WorkflowStepTriggerRequest, options?: any): AxiosPromise<WorkflowStepTriggerResponse>;
    /**
     *
     * @summary Update Workflow
     * @param {string} workflowId
     * @param {WorkflowCore} workflowCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkflowV1WorkflowsWorkflowIdPut(workflowId: string, workflowCore: WorkflowCore, options?: any): AxiosPromise<Workflow>;
    /**
     *
     * @summary Upload File
     * @param {string} workflowId
     * @param {any} file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFileV1WorkflowsWorkflowIdFilePost(workflowId: string, file: any, options?: any): AxiosPromise<UploadFileResponse>;
};
/**
 * WorkflowsApi - object-oriented interface
 * @export
 * @class WorkflowsApi
 * @extends {BaseAPI}
 */
export declare class WorkflowsApi extends BaseAPI {
    /**
     *
     * @summary Create Workflow
     * @param {WorkflowCore} workflowCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    createWorkflowV1WorkflowsPost(workflowCore: WorkflowCore, options?: any): Promise<import("axios").AxiosResponse<Workflow>>;
    /**
     *
     * @summary Delete Workflow
     * @param {string} workflowId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    deleteWorkflowV1WorkflowsWorkflowIdDelete(workflowId: string, options?: any): Promise<import("axios").AxiosResponse<AgenticWorkflowModelsBaseBaseResponse>>;
    /**
     *
     * @summary Read Workflow
     * @param {string} workflowId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    readWorkflowV1WorkflowsWorkflowIdGet(workflowId: string, options?: any): Promise<import("axios").AxiosResponse<Workflow>>;
    /**
     *
     * @summary Read Workflows
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {AgenticWorkflowAdkModelsWorkflowAppEnum} [app]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    readWorkflowsV1WorkflowsGet(skip?: number, limit?: number, app?: AgenticWorkflowAdkModelsWorkflowAppEnum, options?: any): Promise<import("axios").AxiosResponse<Workflow[]>>;
    /**
     *
     * @summary Trigger Workflow Step
     * @param {string} workflowId
     * @param {string} stepId
     * @param {WorkflowStepTriggerRequest} workflowStepTriggerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    triggerWorkflowStepV1WorkflowsWorkflowIdStepStepIdTriggerPost(workflowId: string, stepId: string, workflowStepTriggerRequest: WorkflowStepTriggerRequest, options?: any): Promise<import("axios").AxiosResponse<WorkflowStepTriggerResponse>>;
    /**
     *
     * @summary Update Workflow
     * @param {string} workflowId
     * @param {WorkflowCore} workflowCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    updateWorkflowV1WorkflowsWorkflowIdPut(workflowId: string, workflowCore: WorkflowCore, options?: any): Promise<import("axios").AxiosResponse<Workflow>>;
    /**
     *
     * @summary Upload File
     * @param {string} workflowId
     * @param {any} file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    uploadFileV1WorkflowsWorkflowIdFilePost(workflowId: string, file: any, options?: any): Promise<import("axios").AxiosResponse<UploadFileResponse>>;
}
/**
 * WorkflowsApiHubspotApi - axios parameter creator
 * @export
 */
export declare const WorkflowsApiHubspotApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Handle Hubspot Webhook
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    handleHubspotWebhookV1WorkflowsApiHubspotWebhookPost: (options?: any) => Promise<RequestArgs>;
};
/**
 * WorkflowsApiHubspotApi - functional programming interface
 * @export
 */
export declare const WorkflowsApiHubspotApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Handle Hubspot Webhook
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    handleHubspotWebhookV1WorkflowsApiHubspotWebhookPost(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgenticWorkflowModelsBaseBaseResponse>>;
};
/**
 * WorkflowsApiHubspotApi - factory interface
 * @export
 */
export declare const WorkflowsApiHubspotApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Handle Hubspot Webhook
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    handleHubspotWebhookV1WorkflowsApiHubspotWebhookPost(options?: any): AxiosPromise<AgenticWorkflowModelsBaseBaseResponse>;
};
/**
 * WorkflowsApiHubspotApi - object-oriented interface
 * @export
 * @class WorkflowsApiHubspotApi
 * @extends {BaseAPI}
 */
export declare class WorkflowsApiHubspotApi extends BaseAPI {
    /**
     *
     * @summary Handle Hubspot Webhook
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiHubspotApi
     */
    handleHubspotWebhookV1WorkflowsApiHubspotWebhookPost(options?: any): Promise<import("axios").AxiosResponse<AgenticWorkflowModelsBaseBaseResponse>>;
}
/**
 * WorkflowsAppsApi - axios parameter creator
 * @export
 */
export declare const WorkflowsAppsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create App
     * @param {AppEntity} appEntity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAppV1WorkflowsAppsPost: (appEntity: AppEntity, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete App
     * @param {string} appId
     * @param {string} [version]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAppV1WorkflowsAppsAppIdDelete: (appId: string, version?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Connections By App Id
     * @param {string} appId
     * @param {string} version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnectionsByAppIdV1WorkflowsAppsAppIdVersionsVersionConnectionsGet: (appId: string, version: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Read App
     * @param {string} appId
     * @param {string} [version]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAppV1WorkflowsAppsAppIdGet: (appId: string, version?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Read Apps
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAppsV1WorkflowsAppsGet: (skip?: number, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Update App
     * @param {string} appId
     * @param {AppEntity} appEntity
     * @param {string} [version]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAppV1WorkflowsAppsAppIdPut: (appId: string, appEntity: AppEntity, version?: string, options?: any) => Promise<RequestArgs>;
};
/**
 * WorkflowsAppsApi - functional programming interface
 * @export
 */
export declare const WorkflowsAppsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create App
     * @param {AppEntity} appEntity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAppV1WorkflowsAppsPost(appEntity: AppEntity, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponse>>;
    /**
     *
     * @summary Delete App
     * @param {string} appId
     * @param {string} [version]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAppV1WorkflowsAppsAppIdDelete(appId: string, version?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgenticWorkflowModelsBaseBaseResponse>>;
    /**
     *
     * @summary Get Connections By App Id
     * @param {string} appId
     * @param {string} version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnectionsByAppIdV1WorkflowsAppsAppIdVersionsVersionConnectionsGet(appId: string, version: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConnectionCore>>>;
    /**
     *
     * @summary Read App
     * @param {string} appId
     * @param {string} [version]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAppV1WorkflowsAppsAppIdGet(appId: string, version?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponse>>;
    /**
     *
     * @summary Read Apps
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAppsV1WorkflowsAppsGet(skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AppResponse>>>;
    /**
     *
     * @summary Update App
     * @param {string} appId
     * @param {AppEntity} appEntity
     * @param {string} [version]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAppV1WorkflowsAppsAppIdPut(appId: string, appEntity: AppEntity, version?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponse>>;
};
/**
 * WorkflowsAppsApi - factory interface
 * @export
 */
export declare const WorkflowsAppsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create App
     * @param {AppEntity} appEntity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAppV1WorkflowsAppsPost(appEntity: AppEntity, options?: any): AxiosPromise<AppResponse>;
    /**
     *
     * @summary Delete App
     * @param {string} appId
     * @param {string} [version]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAppV1WorkflowsAppsAppIdDelete(appId: string, version?: string, options?: any): AxiosPromise<AgenticWorkflowModelsBaseBaseResponse>;
    /**
     *
     * @summary Get Connections By App Id
     * @param {string} appId
     * @param {string} version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnectionsByAppIdV1WorkflowsAppsAppIdVersionsVersionConnectionsGet(appId: string, version: string, options?: any): AxiosPromise<Array<ConnectionCore>>;
    /**
     *
     * @summary Read App
     * @param {string} appId
     * @param {string} [version]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAppV1WorkflowsAppsAppIdGet(appId: string, version?: string, options?: any): AxiosPromise<AppResponse>;
    /**
     *
     * @summary Read Apps
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAppsV1WorkflowsAppsGet(skip?: number, limit?: number, options?: any): AxiosPromise<Array<AppResponse>>;
    /**
     *
     * @summary Update App
     * @param {string} appId
     * @param {AppEntity} appEntity
     * @param {string} [version]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAppV1WorkflowsAppsAppIdPut(appId: string, appEntity: AppEntity, version?: string, options?: any): AxiosPromise<AppResponse>;
};
/**
 * WorkflowsAppsApi - object-oriented interface
 * @export
 * @class WorkflowsAppsApi
 * @extends {BaseAPI}
 */
export declare class WorkflowsAppsApi extends BaseAPI {
    /**
     *
     * @summary Create App
     * @param {AppEntity} appEntity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsAppsApi
     */
    createAppV1WorkflowsAppsPost(appEntity: AppEntity, options?: any): Promise<import("axios").AxiosResponse<AppResponse>>;
    /**
     *
     * @summary Delete App
     * @param {string} appId
     * @param {string} [version]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsAppsApi
     */
    deleteAppV1WorkflowsAppsAppIdDelete(appId: string, version?: string, options?: any): Promise<import("axios").AxiosResponse<AgenticWorkflowModelsBaseBaseResponse>>;
    /**
     *
     * @summary Get Connections By App Id
     * @param {string} appId
     * @param {string} version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsAppsApi
     */
    getConnectionsByAppIdV1WorkflowsAppsAppIdVersionsVersionConnectionsGet(appId: string, version: string, options?: any): Promise<import("axios").AxiosResponse<ConnectionCore[]>>;
    /**
     *
     * @summary Read App
     * @param {string} appId
     * @param {string} [version]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsAppsApi
     */
    readAppV1WorkflowsAppsAppIdGet(appId: string, version?: string, options?: any): Promise<import("axios").AxiosResponse<AppResponse>>;
    /**
     *
     * @summary Read Apps
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsAppsApi
     */
    readAppsV1WorkflowsAppsGet(skip?: number, limit?: number, options?: any): Promise<import("axios").AxiosResponse<AppResponse[]>>;
    /**
     *
     * @summary Update App
     * @param {string} appId
     * @param {AppEntity} appEntity
     * @param {string} [version]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsAppsApi
     */
    updateAppV1WorkflowsAppsAppIdPut(appId: string, appEntity: AppEntity, version?: string, options?: any): Promise<import("axios").AxiosResponse<AppResponse>>;
}
/**
 * WorkflowsConnectionsApi - axios parameter creator
 * @export
 */
export declare const WorkflowsConnectionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create Connection
     * @param {ConnectionCore} connectionCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConnectionV1WorkflowsConnectionsPost: (connectionCore: ConnectionCore, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete Connection
     * @param {string} connectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConnectionV1WorkflowsConnectionsConnectionIdDelete: (connectionId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Read Connection
     * @param {string} connectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readConnectionV1WorkflowsConnectionsConnectionIdGet: (connectionId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Read Connections
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readConnectionsV1WorkflowsConnectionsGet: (skip?: number, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Update Connection
     * @param {string} connectionId
     * @param {ConnectionCore} connectionCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConnectionV1WorkflowsConnectionsConnectionIdPut: (connectionId: string, connectionCore: ConnectionCore, options?: any) => Promise<RequestArgs>;
};
/**
 * WorkflowsConnectionsApi - functional programming interface
 * @export
 */
export declare const WorkflowsConnectionsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create Connection
     * @param {ConnectionCore} connectionCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConnectionV1WorkflowsConnectionsPost(connectionCore: ConnectionCore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgenticWorkflowDbModelsConnection>>;
    /**
     *
     * @summary Delete Connection
     * @param {string} connectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConnectionV1WorkflowsConnectionsConnectionIdDelete(connectionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgenticWorkflowModelsBaseBaseResponse>>;
    /**
     *
     * @summary Read Connection
     * @param {string} connectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readConnectionV1WorkflowsConnectionsConnectionIdGet(connectionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgenticWorkflowDbModelsConnection>>;
    /**
     *
     * @summary Read Connections
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readConnectionsV1WorkflowsConnectionsGet(skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AgenticWorkflowDbModelsConnection>>>;
    /**
     *
     * @summary Update Connection
     * @param {string} connectionId
     * @param {ConnectionCore} connectionCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConnectionV1WorkflowsConnectionsConnectionIdPut(connectionId: string, connectionCore: ConnectionCore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgenticWorkflowDbModelsConnection>>;
};
/**
 * WorkflowsConnectionsApi - factory interface
 * @export
 */
export declare const WorkflowsConnectionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create Connection
     * @param {ConnectionCore} connectionCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConnectionV1WorkflowsConnectionsPost(connectionCore: ConnectionCore, options?: any): AxiosPromise<AgenticWorkflowDbModelsConnection>;
    /**
     *
     * @summary Delete Connection
     * @param {string} connectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConnectionV1WorkflowsConnectionsConnectionIdDelete(connectionId: string, options?: any): AxiosPromise<AgenticWorkflowModelsBaseBaseResponse>;
    /**
     *
     * @summary Read Connection
     * @param {string} connectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readConnectionV1WorkflowsConnectionsConnectionIdGet(connectionId: string, options?: any): AxiosPromise<AgenticWorkflowDbModelsConnection>;
    /**
     *
     * @summary Read Connections
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readConnectionsV1WorkflowsConnectionsGet(skip?: number, limit?: number, options?: any): AxiosPromise<Array<AgenticWorkflowDbModelsConnection>>;
    /**
     *
     * @summary Update Connection
     * @param {string} connectionId
     * @param {ConnectionCore} connectionCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConnectionV1WorkflowsConnectionsConnectionIdPut(connectionId: string, connectionCore: ConnectionCore, options?: any): AxiosPromise<AgenticWorkflowDbModelsConnection>;
};
/**
 * WorkflowsConnectionsApi - object-oriented interface
 * @export
 * @class WorkflowsConnectionsApi
 * @extends {BaseAPI}
 */
export declare class WorkflowsConnectionsApi extends BaseAPI {
    /**
     *
     * @summary Create Connection
     * @param {ConnectionCore} connectionCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsConnectionsApi
     */
    createConnectionV1WorkflowsConnectionsPost(connectionCore: ConnectionCore, options?: any): Promise<import("axios").AxiosResponse<AgenticWorkflowDbModelsConnection>>;
    /**
     *
     * @summary Delete Connection
     * @param {string} connectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsConnectionsApi
     */
    deleteConnectionV1WorkflowsConnectionsConnectionIdDelete(connectionId: string, options?: any): Promise<import("axios").AxiosResponse<AgenticWorkflowModelsBaseBaseResponse>>;
    /**
     *
     * @summary Read Connection
     * @param {string} connectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsConnectionsApi
     */
    readConnectionV1WorkflowsConnectionsConnectionIdGet(connectionId: string, options?: any): Promise<import("axios").AxiosResponse<AgenticWorkflowDbModelsConnection>>;
    /**
     *
     * @summary Read Connections
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsConnectionsApi
     */
    readConnectionsV1WorkflowsConnectionsGet(skip?: number, limit?: number, options?: any): Promise<import("axios").AxiosResponse<AgenticWorkflowDbModelsConnection[]>>;
    /**
     *
     * @summary Update Connection
     * @param {string} connectionId
     * @param {ConnectionCore} connectionCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsConnectionsApi
     */
    updateConnectionV1WorkflowsConnectionsConnectionIdPut(connectionId: string, connectionCore: ConnectionCore, options?: any): Promise<import("axios").AxiosResponse<AgenticWorkflowDbModelsConnection>>;
}
/**
 * WorkflowsExecutionsApi - axios parameter creator
 * @export
 */
export declare const WorkflowsExecutionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Execute a workflow. This is an Sync call. This returns the status of the workflow
     * @summary Execute Workflow
     * @param {string} workflowId
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeWorkflowV1WorkflowsExecutionsWorkflowIdExecutePost: (workflowId: string, body: object, options?: any) => Promise<RequestArgs>;
    /**
     * Get the status of a workflow given the run id
     * @summary Get Workflow Status
     * @param {string} runId
     * @param {string} workflowId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkflowStatusV1WorkflowsExecutionsWorkflowIdRunsRunIdGet: (runId: string, workflowId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary List Workflow Runs
     * @param {string} workflowId
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkflowRunsV1WorkflowsExecutionsWorkflowIdRunsGet: (workflowId: string, skip?: number, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Trigger a workflow execution. This is an Async call. This returns a workflow id which can be queried to get the status of the workflow
     * @summary Trigger Workflow
     * @param {string} workflowId
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    triggerWorkflowV1WorkflowsExecutionsWorkflowIdTriggerPost: (workflowId: string, body: object, options?: any) => Promise<RequestArgs>;
};
/**
 * WorkflowsExecutionsApi - functional programming interface
 * @export
 */
export declare const WorkflowsExecutionsApiFp: (configuration?: Configuration) => {
    /**
     * Execute a workflow. This is an Sync call. This returns the status of the workflow
     * @summary Execute Workflow
     * @param {string} workflowId
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeWorkflowV1WorkflowsExecutionsWorkflowIdExecutePost(workflowId: string, body: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowExecution>>;
    /**
     * Get the status of a workflow given the run id
     * @summary Get Workflow Status
     * @param {string} runId
     * @param {string} workflowId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkflowStatusV1WorkflowsExecutionsWorkflowIdRunsRunIdGet(runId: string, workflowId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowExecution>>;
    /**
     *
     * @summary List Workflow Runs
     * @param {string} workflowId
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkflowRunsV1WorkflowsExecutionsWorkflowIdRunsGet(workflowId: string, skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkflowExecution>>>;
    /**
     * Trigger a workflow execution. This is an Async call. This returns a workflow id which can be queried to get the status of the workflow
     * @summary Trigger Workflow
     * @param {string} workflowId
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    triggerWorkflowV1WorkflowsExecutionsWorkflowIdTriggerPost(workflowId: string, body: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowExecution>>;
};
/**
 * WorkflowsExecutionsApi - factory interface
 * @export
 */
export declare const WorkflowsExecutionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Execute a workflow. This is an Sync call. This returns the status of the workflow
     * @summary Execute Workflow
     * @param {string} workflowId
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeWorkflowV1WorkflowsExecutionsWorkflowIdExecutePost(workflowId: string, body: object, options?: any): AxiosPromise<WorkflowExecution>;
    /**
     * Get the status of a workflow given the run id
     * @summary Get Workflow Status
     * @param {string} runId
     * @param {string} workflowId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkflowStatusV1WorkflowsExecutionsWorkflowIdRunsRunIdGet(runId: string, workflowId: string, options?: any): AxiosPromise<WorkflowExecution>;
    /**
     *
     * @summary List Workflow Runs
     * @param {string} workflowId
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkflowRunsV1WorkflowsExecutionsWorkflowIdRunsGet(workflowId: string, skip?: number, limit?: number, options?: any): AxiosPromise<Array<WorkflowExecution>>;
    /**
     * Trigger a workflow execution. This is an Async call. This returns a workflow id which can be queried to get the status of the workflow
     * @summary Trigger Workflow
     * @param {string} workflowId
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    triggerWorkflowV1WorkflowsExecutionsWorkflowIdTriggerPost(workflowId: string, body: object, options?: any): AxiosPromise<WorkflowExecution>;
};
/**
 * WorkflowsExecutionsApi - object-oriented interface
 * @export
 * @class WorkflowsExecutionsApi
 * @extends {BaseAPI}
 */
export declare class WorkflowsExecutionsApi extends BaseAPI {
    /**
     * Execute a workflow. This is an Sync call. This returns the status of the workflow
     * @summary Execute Workflow
     * @param {string} workflowId
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsExecutionsApi
     */
    executeWorkflowV1WorkflowsExecutionsWorkflowIdExecutePost(workflowId: string, body: object, options?: any): Promise<import("axios").AxiosResponse<WorkflowExecution>>;
    /**
     * Get the status of a workflow given the run id
     * @summary Get Workflow Status
     * @param {string} runId
     * @param {string} workflowId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsExecutionsApi
     */
    getWorkflowStatusV1WorkflowsExecutionsWorkflowIdRunsRunIdGet(runId: string, workflowId: string, options?: any): Promise<import("axios").AxiosResponse<WorkflowExecution>>;
    /**
     *
     * @summary List Workflow Runs
     * @param {string} workflowId
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsExecutionsApi
     */
    listWorkflowRunsV1WorkflowsExecutionsWorkflowIdRunsGet(workflowId: string, skip?: number, limit?: number, options?: any): Promise<import("axios").AxiosResponse<WorkflowExecution[]>>;
    /**
     * Trigger a workflow execution. This is an Async call. This returns a workflow id which can be queried to get the status of the workflow
     * @summary Trigger Workflow
     * @param {string} workflowId
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsExecutionsApi
     */
    triggerWorkflowV1WorkflowsExecutionsWorkflowIdTriggerPost(workflowId: string, body: object, options?: any): Promise<import("axios").AxiosResponse<WorkflowExecution>>;
}
/**
 * WorkflowsSubWorkflowsApi - axios parameter creator
 * @export
 */
export declare const WorkflowsSubWorkflowsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Returns all sub workflows which can be invoked for a given workflow step
     * @summary Get Sub Workflows
     * @param {WorkflowStepInput} workflowStepInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubWorkflowsV1WorkflowsStepsSubWorkflowsPost: (workflowStepInput: WorkflowStepInput, options?: any) => Promise<RequestArgs>;
};
/**
 * WorkflowsSubWorkflowsApi - functional programming interface
 * @export
 */
export declare const WorkflowsSubWorkflowsApiFp: (configuration?: Configuration) => {
    /**
     * Returns all sub workflows which can be invoked for a given workflow step
     * @summary Get Sub Workflows
     * @param {WorkflowStepInput} workflowStepInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubWorkflowsV1WorkflowsStepsSubWorkflowsPost(workflowStepInput: WorkflowStepInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Workflow>>>;
};
/**
 * WorkflowsSubWorkflowsApi - factory interface
 * @export
 */
export declare const WorkflowsSubWorkflowsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Returns all sub workflows which can be invoked for a given workflow step
     * @summary Get Sub Workflows
     * @param {WorkflowStepInput} workflowStepInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubWorkflowsV1WorkflowsStepsSubWorkflowsPost(workflowStepInput: WorkflowStepInput, options?: any): AxiosPromise<Array<Workflow>>;
};
/**
 * WorkflowsSubWorkflowsApi - object-oriented interface
 * @export
 * @class WorkflowsSubWorkflowsApi
 * @extends {BaseAPI}
 */
export declare class WorkflowsSubWorkflowsApi extends BaseAPI {
    /**
     * Returns all sub workflows which can be invoked for a given workflow step
     * @summary Get Sub Workflows
     * @param {WorkflowStepInput} workflowStepInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsSubWorkflowsApi
     */
    getSubWorkflowsV1WorkflowsStepsSubWorkflowsPost(workflowStepInput: WorkflowStepInput, options?: any): Promise<import("axios").AxiosResponse<Workflow[]>>;
}
