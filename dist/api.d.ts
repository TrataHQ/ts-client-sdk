/**
 * Trata AI API
 * Human like conversation to answer calls, drive engagement, automate follow-ups & schedule bookings 24/7  with end to end integrations ensuring you never miss a sales enquiry.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface AIAgentInput
 */
export interface AIAgentInput {
    /**
     * Name of the AI agent
     * @type {string}
     * @memberof AIAgentInput
     */
    name: string;
    /**
     * Image URL for the AI agent
     * @type {string}
     * @memberof AIAgentInput
     */
    imageUrl: string;
    /**
     * Mission of the AI agent
     * @type {Mission}
     * @memberof AIAgentInput
     */
    mission?: Mission | null;
    /**
     * Status of the AI agent
     * @type {Status}
     * @memberof AIAgentInput
     */
    status: Status;
    /**
     * Role of the AI agent in the company
     * @type {string}
     * @memberof AIAgentInput
     */
    role: string;
    /**
     * Description of the role of the AI agent
     * @type {string}
     * @memberof AIAgentInput
     */
    roleDescription: string;
    /**
     * Timezone of the AI agent used for scheduling meetings
     * @type {string}
     * @memberof AIAgentInput
     */
    timezone: string;
    /**
     * Voice of the AI agent
     * @type {VoiceInput}
     * @memberof AIAgentInput
     */
    voice?: VoiceInput | null;
    /**
     * List of terms or phrases that the AI agent to prioritize for enhanced recognition
     * @type {Array<string>}
     * @memberof AIAgentInput
     */
    boostedKeywords?: Array<string> | null;
    /**
     * App in which the AI agent is running
     * @type {AppEnumInput}
     * @memberof AIAgentInput
     */
    app?: AppEnumInput | null;
    /**
     * Evaluation metrics for the conversation
     * @type {ConversationEvaluationMetrics}
     * @memberof AIAgentInput
     */
    evaluationMetrics?: ConversationEvaluationMetrics | null;
}
/**
 * AI agent configured by businesses
 * @export
 * @interface AIAgentOutput
 */
export interface AIAgentOutput {
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    imageUrl?: string;
    /**
     *
     * @type {Mission}
     * @memberof AIAgentOutput
     */
    mission?: Mission | null;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    role?: string;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    roleDescription?: string;
    /**
     *
     * @type {Transcriber}
     * @memberof AIAgentOutput
     */
    transcriber?: Transcriber | null;
    /**
     *
     * @type {IntelligenceProvider}
     * @memberof AIAgentOutput
     */
    intelligenceProvider?: IntelligenceProvider | null;
    /**
     *
     * @type {VoiceOutput}
     * @memberof AIAgentOutput
     */
    voice?: VoiceOutput | null;
    /**
     *
     * @type {Array<string>}
     * @memberof AIAgentOutput
     */
    boostedKeywords?: Array<string> | null;
    /**
     * Application under which the AI agent is created
     * @type {AppEnumOutput}
     * @memberof AIAgentOutput
     */
    app?: AppEnumOutput | null;
    /**
     * Evaluation metrics for the conversation
     * @type {ConversationEvaluationMetrics}
     * @memberof AIAgentOutput
     */
    evaluationMetrics?: ConversationEvaluationMetrics | null;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    status?: string;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    timezone?: string;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof AIAgentOutput
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum Accent {
    American = "American",
    Indian = "Indian",
    Australian = "Australian",
    British = "British",
    Hindi = "Hindi",
    MiddleEastern = "Middle Eastern"
}
/**
 *
 * @export
 * @interface AcceptInviteRequest
 */
export interface AcceptInviteRequest {
    /**
     * Name of the user
     * @type {string}
     * @memberof AcceptInviteRequest
     */
    name?: string | null;
    /**
     * Password for the user
     * @type {string}
     * @memberof AcceptInviteRequest
     */
    password?: string | null;
}
/**
 *
 * @export
 * @interface ActionInput
 */
export interface ActionInput {
    /**
     * Name of the action
     * @type {string}
     * @memberof ActionInput
     */
    name: string;
    /**
     * Description about the action and it should also contain when the action should be triggered
     * @type {string}
     * @memberof ActionInput
     */
    description?: string | null;
    /**
     * Parameters for the action. It should be a JSON schema object
     * @type {object}
     * @memberof ActionInput
     */
    parameters: object;
    /**
     * Endpoint for the action
     * @type {HttpActionEndpoint | InternalActionEndpoint | AgenticWorkflowActionEndpoint}
     * @memberof ActionInput
     */
    endpoint: HttpActionEndpoint | InternalActionEndpoint | AgenticWorkflowActionEndpoint;
    /**
     * Text to be rendered to user when action is invoked
     * @type {string}
     * @memberof ActionInput
     */
    userWaitingText?: string | null;
    /**
     * Text to be rendered to user when action is successful
     * @type {string}
     * @memberof ActionInput
     */
    userSuccessText?: string | null;
    /**
     * Text to be rendered to user when action is not successful
     * @type {string}
     * @memberof ActionInput
     */
    userErrorText?: string | null;
    /**
     * Trigger who invokes the action
     * @type {ActionInvocationTrigger}
     * @memberof ActionInput
     */
    invocationTrigger: ActionInvocationTrigger;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum ActionInvocationTrigger {
    UserQuery = "user_query",
    WebhookConversationStart = "webhook.conversation_start",
    WebhookConversationEnd = "webhook.conversation_end"
}
/**
 * Action entity to store the actions which can be performed by ai agents
 * @export
 * @interface ActionOutput
 */
export interface ActionOutput {
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    description?: string | null;
    /**
     *
     * @type {object}
     * @memberof ActionOutput
     */
    parameters?: object | null;
    /**
     *
     * @type {object}
     * @memberof ActionOutput
     */
    endpoint?: object | null;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    invocationTrigger?: string | null;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    userWaitingText?: string | null;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    userSuccessText?: string | null;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    userErrorText?: string | null;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof ActionOutput
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum Adaptability {
    OpenToChange = "open to change",
    Resistant = "resistant",
    Indifferent = "indifferent"
}
/**
 *
 * @export
 * @interface AddressInput
 */
export interface AddressInput {
    /**
     * Address line 1
     * @type {string}
     * @memberof AddressInput
     */
    line1: string;
    /**
     * Address line 2
     * @type {string}
     * @memberof AddressInput
     */
    line2?: string | null;
    /**
     * City
     * @type {string}
     * @memberof AddressInput
     */
    city?: string | null;
    /**
     * State
     * @type {string}
     * @memberof AddressInput
     */
    state?: string | null;
    /**
     * Country
     * @type {string}
     * @memberof AddressInput
     */
    country: string;
}
/**
 *
 * @export
 * @interface AddressOutput
 */
export interface AddressOutput {
    /**
     *
     * @type {string}
     * @memberof AddressOutput
     */
    line1: string;
    /**
     *
     * @type {string}
     * @memberof AddressOutput
     */
    line2: string | null;
    /**
     *
     * @type {string}
     * @memberof AddressOutput
     */
    city: string | null;
    /**
     *
     * @type {string}
     * @memberof AddressOutput
     */
    state: string | null;
    /**
     *
     * @type {string}
     * @memberof AddressOutput
     */
    country: string | null;
}
/**
 *
 * @export
 * @interface AgentConfig
 */
export interface AgentConfig {
    /**
     * Enum class representing transcriber
     * @type {string}
     * @memberof AgentConfig
     */
    transcriber: string;
    /**
     * Enum class representing intelligence provider
     * @type {string}
     * @memberof AgentConfig
     */
    intelligenceProvider: string;
    /**
     *
     * @type {string}
     * @memberof AgentConfig
     */
    synthesizer: string;
    /**
     *
     * @type {string}
     * @memberof AgentConfig
     */
    embeddingsModelConfig: string;
    /**
     *
     * @type {string}
     * @memberof AgentConfig
     */
    hiveStorageConfig: string;
    /**
     *
     * @type {string}
     * @memberof AgentConfig
     */
    fillersConfig?: string | null;
}
/**
 *
 * @export
 * @interface AgenticWorkflowActionEndpoint
 */
export interface AgenticWorkflowActionEndpoint {
    /**
     * Agentic workflow id
     * @type {string}
     * @memberof AgenticWorkflowActionEndpoint
     */
    workflowId: string;
}
/**
 * Enum which stores the list of apps which are used to create the conversation
 * @export
 * @enum {string}
 */
export declare enum AgenticWorkflowAdkModelsWorkflowAppEnum {
    TRATA = "TRATA",
    TRATASPARR = "TRATA_SPARR"
}
/**
 * Connection represents an instance of an app with specific credentials and configuration
 * @export
 * @interface AgenticWorkflowDbModelsConnection
 */
export interface AgenticWorkflowDbModelsConnection {
    /**
     * The user who created.
     * @type {string}
     * @memberof AgenticWorkflowDbModelsConnection
     */
    createdBy?: string;
    /**
     * The date and time it was created.
     * @type {string}
     * @memberof AgenticWorkflowDbModelsConnection
     */
    createdAt?: string;
    /**
     * The user who last updated.
     * @type {string}
     * @memberof AgenticWorkflowDbModelsConnection
     */
    updatedBy?: string;
    /**
     * The date and time when it was last updated.
     * @type {string}
     * @memberof AgenticWorkflowDbModelsConnection
     */
    updatedAt?: string;
    /**
     * The workspace of the entity.
     * @type {string}
     * @memberof AgenticWorkflowDbModelsConnection
     */
    orgId?: string;
    /**
     * The name of the connection
     * @type {string}
     * @memberof AgenticWorkflowDbModelsConnection
     */
    name?: string;
    /**
     * The unique identifier of the app
     * @type {string}
     * @memberof AgenticWorkflowDbModelsConnection
     */
    appId?: string;
    /**
     * The version of the app
     * @type {string}
     * @memberof AgenticWorkflowDbModelsConnection
     */
    appVersion?: string;
    /**
     * The description of the connection
     * @type {string}
     * @memberof AgenticWorkflowDbModelsConnection
     */
    description?: string | null;
    /**
     * OAuth or API key authentication configuration
     * @type {OAuthCredentials | ApiKeyCredentials | BasicAuthCredentials | NoAuthCredentials}
     * @memberof AgenticWorkflowDbModelsConnection
     */
    credentials: OAuthCredentials | ApiKeyCredentials | BasicAuthCredentials | NoAuthCredentials;
    /**
     * Metadata for the connection
     * @type {object}
     * @memberof AgenticWorkflowDbModelsConnection
     */
    connectionMetaData?: object | null;
    /**
     * The unique identifier of the connection
     * @type {string}
     * @memberof AgenticWorkflowDbModelsConnection
     */
    id?: string;
}
/**
 *
 * @export
 * @interface AgenticWorkflowModelsBaseBaseResponse
 */
export interface AgenticWorkflowModelsBaseBaseResponse {
    /**
     * The message of the response
     * @type {string}
     * @memberof AgenticWorkflowModelsBaseBaseResponse
     */
    message?: string;
    /**
     * The status of the response
     * @type {string}
     * @memberof AgenticWorkflowModelsBaseBaseResponse
     */
    status?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum AggregationFormulaInput {
    COUNT = "COUNT",
    SUM = "SUM",
    MEDIAN = "MEDIAN"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum AggregationFormulaOutput {
    COUNT = "COUNT",
    SUM = "SUM",
    AVG = "AVG",
    MIN = "MIN",
    MAX = "MAX",
    MEDIAN = "MEDIAN"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum AggregationPeriod {
    MONTHLY = "MONTHLY",
    WEEKLY = "WEEKLY",
    DAILY = "DAILY"
}
/**
 *
 * @export
 * @interface AnalyticsModelInput
 */
export interface AnalyticsModelInput {
    /**
     *
     * @type {SparrModelsAnalyticsConversationAnalyticsModel}
     * @memberof AnalyticsModelInput
     */
    conversation_analytics: SparrModelsAnalyticsConversationAnalyticsModel;
    /**
     *
     * @type {GoalAnalyticsModelInput}
     * @memberof AnalyticsModelInput
     */
    goals_analytics: GoalAnalyticsModelInput;
    /**
     *
     * @type {CoachAnalyticsModel}
     * @memberof AnalyticsModelInput
     */
    coach_analytics: CoachAnalyticsModel;
    /**
     *
     * @type {SystemMetrics}
     * @memberof AnalyticsModelInput
     */
    system_metrics?: SystemMetrics | null;
    /**
     *
     * @type {any}
     * @memberof AnalyticsModelInput
     */
    weighted_scores?: any | null;
    /**
     *
     * @type {Array<TrackerAnalyticsModel>}
     * @memberof AnalyticsModelInput
     */
    tracker_analytics?: Array<TrackerAnalyticsModel> | null;
}
/**
 *
 * @export
 * @interface AnalyticsModelOutput
 */
export interface AnalyticsModelOutput {
    /**
     *
     * @type {SparrModelsAnalyticsConversationAnalyticsModel}
     * @memberof AnalyticsModelOutput
     */
    conversation_analytics: SparrModelsAnalyticsConversationAnalyticsModel;
    /**
     *
     * @type {GoalAnalyticsModelOutput}
     * @memberof AnalyticsModelOutput
     */
    goals_analytics: GoalAnalyticsModelOutput;
    /**
     *
     * @type {CoachAnalyticsModel}
     * @memberof AnalyticsModelOutput
     */
    coach_analytics: CoachAnalyticsModel;
    /**
     *
     * @type {SystemMetrics}
     * @memberof AnalyticsModelOutput
     */
    system_metrics?: SystemMetrics | null;
    /**
     *
     * @type {any}
     * @memberof AnalyticsModelOutput
     */
    weighted_scores?: any | null;
    /**
     *
     * @type {Array<TrackerAnalyticsModel>}
     * @memberof AnalyticsModelOutput
     */
    tracker_analytics?: Array<TrackerAnalyticsModel> | null;
}
/**
 * Simplified analytics request for single date range
 * @export
 * @interface AnalyticsRequest
 */
export interface AnalyticsRequest {
    /**
     * Start date for the analytics range
     * @type {string}
     * @memberof AnalyticsRequest
     */
    startDate: string;
    /**
     * End date for the analytics range
     * @type {string}
     * @memberof AnalyticsRequest
     */
    endDate: string;
    /**
     * List of metrics to retrieve
     * @type {Array<MetricRequest>}
     * @memberof AnalyticsRequest
     */
    metrics: Array<MetricRequest>;
    /**
     * Optional list of user IDs to filter by
     * @type {Array<string>}
     * @memberof AnalyticsRequest
     */
    userIds?: Array<string> | null;
}
/**
 * Simplified analytics response
 * @export
 * @interface AnalyticsResponse
 */
export interface AnalyticsResponse {
    /**
     * Start date of the analytics range
     * @type {string}
     * @memberof AnalyticsResponse
     */
    startDate: string;
    /**
     * End date of the analytics range
     * @type {string}
     * @memberof AnalyticsResponse
     */
    endDate: string;
    /**
     * List of aggregated metric values
     * @type {Array<MetricDataPoint>}
     * @memberof AnalyticsResponse
     */
    metrics: Array<MetricDataPoint>;
    /**
     * List of user IDs included in the analytics
     * @type {Array<string>}
     * @memberof AnalyticsResponse
     */
    userIds?: Array<string> | null;
}
/**
 * API key authentication configuration
 * @export
 * @interface ApiKeyAuth
 */
export interface ApiKeyAuth {
    /**
     * The type of authentication
     * @type {string}
     * @memberof ApiKeyAuth
     */
    authType?: ApiKeyAuthAuthTypeEnum;
}
/**
    * @export
    * @enum {string}
    */
export declare enum ApiKeyAuthAuthTypeEnum {
    Apikey = "apikey"
}
/**
 *
 * @export
 * @interface ApiKeyCredentials
 */
export interface ApiKeyCredentials {
    /**
     * Credential type identifier
     * @type {string}
     * @memberof ApiKeyCredentials
     */
    credentialsType?: ApiKeyCredentialsCredentialsTypeEnum;
    /**
     * The API key for the app
     * @type {string}
     * @memberof ApiKeyCredentials
     */
    apiKey: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum ApiKeyCredentialsCredentialsTypeEnum {
    Apikey = "apikey"
}
/**
 *
 * @export
 * @interface ApiKeyRequest
 */
export interface ApiKeyRequest {
    /**
     *
     * @type {string}
     * @memberof ApiKeyRequest
     */
    key_type?: string | null;
}
/**
 * App represents an integration that can be connected to perform actions and triggers
 * @export
 * @interface App
 */
export interface App {
    /**
     * The user who created.
     * @type {string}
     * @memberof App
     */
    createdBy?: string;
    /**
     * The date and time it was created.
     * @type {string}
     * @memberof App
     */
    createdAt?: string;
    /**
     * The user who last updated.
     * @type {string}
     * @memberof App
     */
    updatedBy?: string;
    /**
     * The date and time when it was last updated.
     * @type {string}
     * @memberof App
     */
    updatedAt?: string;
    /**
     * The workspace of the entity.
     * @type {string}
     * @memberof App
     */
    orgId?: string;
    /**
     * The name of the app
     * @type {string}
     * @memberof App
     */
    name?: string;
    /**
     * The description of the app
     * @type {string}
     * @memberof App
     */
    description?: string | null;
    /**
     * API Endpoint URL for the app
     * @type {string}
     * @memberof App
     */
    endpointUrl?: string | null;
    /**
     * URL to the app\'s logo image
     * @type {string}
     * @memberof App
     */
    logoUrl?: string | null;
    /**
     * Authentication configuration for the app
     * @type {Array<OAuth | ApiKeyAuth | BasicAuth | NoAuth>}
     * @memberof App
     */
    auth: Array<OAuth | ApiKeyAuth | BasicAuth | NoAuth>;
    /**
     * The version of the app
     * @type {string}
     * @memberof App
     */
    version?: string;
    /**
     * The unique identifier of the app
     * @type {string}
     * @memberof App
     */
    id?: string;
}
/**
 * AppAction represents an action that can be performed by an app
 * @export
 * @interface AppAction
 */
export interface AppAction {
    /**
     * The user who created.
     * @type {string}
     * @memberof AppAction
     */
    createdBy?: string;
    /**
     * The date and time it was created.
     * @type {string}
     * @memberof AppAction
     */
    createdAt?: string;
    /**
     * The user who last updated.
     * @type {string}
     * @memberof AppAction
     */
    updatedBy?: string;
    /**
     * The date and time when it was last updated.
     * @type {string}
     * @memberof AppAction
     */
    updatedAt?: string;
    /**
     * The workspace of the entity.
     * @type {string}
     * @memberof AppAction
     */
    orgId?: string;
    /**
     * The type of the step, can be either trigger or action
     * @type {AppActionType}
     * @memberof AppAction
     */
    actionType: AppActionType;
    /**
     * The name of the step. This name should be unique within the app
     * @type {string}
     * @memberof AppAction
     */
    name?: string;
    /**
     * The description of the step
     * @type {string}
     * @memberof AppAction
     */
    description?: string;
    /**
     * JSON Schema for the step data
     * @type {object}
     * @memberof AppAction
     */
    dataSchema: object;
    /**
     * JSON Schema for the UI representation
     * @type {object}
     * @memberof AppAction
     */
    uiSchema: object;
    /**
     * This represents how this action should be displayed in the UI
     * @type {UiNodeType}
     * @memberof AppAction
     */
    uiNodeType: UiNodeType;
    /**
     * The ID of the app that this action belongs to
     * @type {string}
     * @memberof AppAction
     */
    appId: string;
    /**
     * The version of the app that this action belongs to
     * @type {string}
     * @memberof AppAction
     */
    appVersion: string;
    /**
     * The unique identifier of the app action
     * @type {string}
     * @memberof AppAction
     */
    id?: string;
}
/**
 * App Action Model
 * @export
 * @interface AppActionEntity
 */
export interface AppActionEntity {
    /**
     * The type of the step, can be either trigger or action
     * @type {AppActionType}
     * @memberof AppActionEntity
     */
    actionType: AppActionType;
    /**
     * The name of the step. This name should be unique within the app
     * @type {string}
     * @memberof AppActionEntity
     */
    name?: string;
    /**
     * The description of the step
     * @type {string}
     * @memberof AppActionEntity
     */
    description?: string;
    /**
     * JSON Schema for the step data
     * @type {object}
     * @memberof AppActionEntity
     */
    dataSchema: object;
    /**
     * JSON Schema for the UI representation
     * @type {object}
     * @memberof AppActionEntity
     */
    uiSchema: object;
    /**
     * This represents how this action should be displayed in the UI
     * @type {UiNodeType}
     * @memberof AppActionEntity
     */
    uiNodeType: UiNodeType;
}
/**
 * Enum for step types
 * @export
 * @enum {string}
 */
export declare enum AppActionType {
    TRIGGER = "TRIGGER",
    ACTION = "ACTION"
}
/**
 * App DTO Model filled by user
 * @export
 * @interface AppEntity
 */
export interface AppEntity {
    /**
     * The name of the app
     * @type {string}
     * @memberof AppEntity
     */
    name?: string;
    /**
     * The description of the app
     * @type {string}
     * @memberof AppEntity
     */
    description?: string | null;
    /**
     * API Endpoint URL for the app
     * @type {string}
     * @memberof AppEntity
     */
    endpointUrl?: string | null;
    /**
     * URL to the app\'s logo image
     * @type {string}
     * @memberof AppEntity
     */
    logoUrl?: string | null;
    /**
     * Authentication configuration for the app
     * @type {Array<OAuth | ApiKeyAuth | BasicAuth | NoAuth>}
     * @memberof AppEntity
     */
    auth: Array<OAuth | ApiKeyAuth | BasicAuth | NoAuth>;
    /**
     * The version of the app
     * @type {string}
     * @memberof AppEntity
     */
    version?: string;
    /**
     * Array of available actions with their configurations
     * @type {Array<AppActionEntity>}
     * @memberof AppEntity
     */
    actions: Array<AppActionEntity>;
}
/**
 * Enum which stores the list of apps which are used to create the conversation
 * @export
 * @enum {string}
 */
export declare enum AppEnumInput {
    TRATA = "TRATA",
    TRATASPARR = "TRATA_SPARR",
    TRATASPARRV1 = "TRATA_SPARR_V1"
}
/**
 * Enum which stores the list of apps which are used to create the conversation
 * @export
 * @enum {string}
 */
export declare enum AppEnumOutput {
    TRATA = "TRATA",
    TRATASPARR = "TRATA_SPARR",
    TRATASPARRV1 = "TRATA_SPARR_V1"
}
/**
 *
 * @export
 * @interface AppResponse
 */
export interface AppResponse {
    /**
     *
     * @type {App}
     * @memberof AppResponse
     */
    app: App;
    /**
     *
     * @type {Array<AppAction>}
     * @memberof AppResponse
     */
    actions: Array<AppAction>;
}
/**
 * Audit log details of the business
 * @export
 * @interface AuditLog
 */
export interface AuditLog {
    /**
     *
     * @type {string}
     * @memberof AuditLog
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof AuditLog
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof AuditLog
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof AuditLog
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof AuditLog
     */
    action?: string;
    /**
     *
     * @type {string}
     * @memberof AuditLog
     */
    description?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum AuthRole {
    Owner = "Owner",
    Admin = "Admin",
    Member = "Member"
}
/**
 *
 * @export
 * @interface AvailablePhoneNumber
 */
export interface AvailablePhoneNumber {
    /**
     *
     * @type {string}
     * @memberof AvailablePhoneNumber
     */
    phoneNumber: string;
    /**
     *
     * @type {string}
     * @memberof AvailablePhoneNumber
     */
    countryCode: string;
    /**
     *
     * @type {string}
     * @memberof AvailablePhoneNumber
     */
    locality: string | null;
    /**
     *
     * @type {string}
     * @memberof AvailablePhoneNumber
     */
    region: string | null;
}
/**
 *
 * @export
 * @interface BaseResponseInput
 */
export interface BaseResponseInput {
    /**
     * Address line 1
     * @type {string}
     * @memberof BaseResponseInput
     */
    message: string;
}
/**
 * Basic authentication configuration
 * @export
 * @interface BasicAuth
 */
export interface BasicAuth {
    /**
     * The type of authentication
     * @type {string}
     * @memberof BasicAuth
     */
    authType?: BasicAuthAuthTypeEnum;
}
/**
    * @export
    * @enum {string}
    */
export declare enum BasicAuthAuthTypeEnum {
    Basic = "basic"
}
/**
 *
 * @export
 * @interface BasicAuthCredentials
 */
export interface BasicAuthCredentials {
    /**
     * Credential type identifier
     * @type {string}
     * @memberof BasicAuthCredentials
     */
    credentialsType?: BasicAuthCredentialsCredentialsTypeEnum;
    /**
     * The username for the app
     * @type {string}
     * @memberof BasicAuthCredentials
     */
    username: string;
    /**
     * The password for the app
     * @type {string}
     * @memberof BasicAuthCredentials
     */
    password: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum BasicAuthCredentialsCredentialsTypeEnum {
    Basic = "basic"
}
/**
 *
 * @export
 * @interface BasicCredentials
 */
export interface BasicCredentials {
    /**
     * Email of the user
     * @type {string}
     * @memberof BasicCredentials
     */
    email: string;
    /**
     * Password of the user
     * @type {string}
     * @memberof BasicCredentials
     */
    password: string;
}
/**
 *
 * @export
 * @interface BatchMetricsRequestsInput
 */
export interface BatchMetricsRequestsInput {
    /**
     *
     * @type {Array<MetricsRequestInput>}
     * @memberof BatchMetricsRequestsInput
     */
    requests: Array<MetricsRequestInput>;
    /**
     *
     * @type {Array<string>}
     * @memberof BatchMetricsRequestsInput
     */
    orgIds?: Array<string> | null;
}
/**
 *
 * @export
 * @interface BatchMetricsResponseInput
 */
export interface BatchMetricsResponseInput {
    /**
     *
     * @type {Array<MetricsResponseInput>}
     * @memberof BatchMetricsResponseInput
     */
    responses: Array<MetricsResponseInput>;
}
/**
 *
 * @export
 * @interface BodyCreateCustomerOrganizationV1
 */
export interface BodyCreateCustomerOrganizationV1 {
    /**
     *
     * @type {OrganizationInput}
     * @memberof BodyCreateCustomerOrganizationV1
     */
    customer_org: OrganizationInput;
    /**
     *
     * @type {string}
     * @memberof BodyCreateCustomerOrganizationV1
     */
    adminUserName: string;
}
/**
 *
 * @export
 * @interface BodyCreateOrganizationV1
 */
export interface BodyCreateOrganizationV1 {
    /**
     *
     * @type {OrganizationInput}
     * @memberof BodyCreateOrganizationV1
     */
    org: OrganizationInput;
    /**
     *
     * @type {string}
     * @memberof BodyCreateOrganizationV1
     */
    adminUserName: string;
}
/**
 *
 * @export
 * @interface BodyCreateResellerOrganizationV1
 */
export interface BodyCreateResellerOrganizationV1 {
    /**
     *
     * @type {OrganizationInput}
     * @memberof BodyCreateResellerOrganizationV1
     */
    org: OrganizationInput;
    /**
     *
     * @type {string}
     * @memberof BodyCreateResellerOrganizationV1
     */
    adminUserName: string;
}
/**
 *
 * @export
 * @interface BodyUploadFileV1
 */
export interface BodyUploadFileV1 {
    /**
     *
     * @type {Array<any>}
     * @memberof BodyUploadFileV1
     */
    files: Array<any>;
}
/**
 *
 * @export
 * @interface BodyUploadFileV1WorkflowsWorkflowIdFilePost
 */
export interface BodyUploadFileV1WorkflowsWorkflowIdFilePost {
    /**
     *
     * @type {any}
     * @memberof BodyUploadFileV1WorkflowsWorkflowIdFilePost
     */
    file: any;
}
/**
 *
 * @export
 * @interface BodyUploadFilesV1
 */
export interface BodyUploadFilesV1 {
    /**
     *
     * @type {Array<any>}
     * @memberof BodyUploadFilesV1
     */
    files: Array<any>;
}
/**
 *
 * @export
 * @interface BodyUploadResellerFilesV1
 */
export interface BodyUploadResellerFilesV1 {
    /**
     *
     * @type {Array<any>}
     * @memberof BodyUploadResellerFilesV1
     */
    files: Array<any>;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum CallSentiment {
    Positive = "positive",
    Negative = "negative",
    Neutral = "neutral"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum ChangeAssignmentOperation {
    Assign = "assign",
    Remove = "remove"
}
/**
 *
 * @export
 * @interface ChangeAssignmentRequest
 */
export interface ChangeAssignmentRequest {
    /**
     * Whether to assign or remove courses
     * @type {ChangeAssignmentOperation}
     * @memberof ChangeAssignmentRequest
     */
    operation: ChangeAssignmentOperation;
    /**
     * Either \'all\' or a list of course IDs
     * @type {string | Array<string>}
     * @memberof ChangeAssignmentRequest
     */
    courses: string | Array<string>;
    /**
     * Either \'all\' or a list of customer IDs
     * @type {string | Array<string>}
     * @memberof ChangeAssignmentRequest
     */
    customers: string | Array<string>;
}
/**
 *
 * @export
 * @interface CoachAnalyticsModel
 */
export interface CoachAnalyticsModel {
    /**
     * Provide 2 to 3 straightforward examples of how the role player could have improved their handling of the conversation. Quote the exact words used by the role player and suggest an alternative response that better aligns with the intended goals. Additionally, specify which goal could have been better achieved with the improved response.
     * @type {Array<string>}
     * @memberof CoachAnalyticsModel
     */
    coaching_points?: Array<string> | null;
}
/**
 * Combined response model that includes evaluator and its optional components
 * @export
 * @interface CombinedEvaluatorResponse
 */
export interface CombinedEvaluatorResponse {
    /**
     * The evaluator object
     * @type {Evaluator}
     * @memberof CombinedEvaluatorResponse
     */
    evaluator: Evaluator;
    /**
     * Optional goals object
     * @type {SparrDbModelsGoal}
     * @memberof CombinedEvaluatorResponse
     */
    goals?: SparrDbModelsGoal | null;
    /**
     * Optional tracker object
     * @type {Tracker}
     * @memberof CombinedEvaluatorResponse
     */
    tracker?: Tracker | null;
}
/**
 *
 * @export
 * @interface Comment
 */
export interface Comment {
    /**
     * Notes or comments to record
     * @type {string}
     * @memberof Comment
     */
    comment: string;
    /**
     * Star rating to record
     * @type {number}
     * @memberof Comment
     */
    rating: number;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum CommunicationStyle {
    Direct = "direct",
    Indirect = "indirect",
    Verbose = "verbose",
    Brief = "brief"
}
/**
 * Condition Model for branching/looping logic
 * @export
 * @interface Condition
 */
export interface Condition {
    /**
     * Condition expression to evaluate
     * @type {string}
     * @memberof Condition
     */
    when: string;
    /**
     * Next step ID if condition is true
     * @type {string}
     * @memberof Condition
     */
    stepId: string;
}
/**
 * Core Connection Model
 * @export
 * @interface ConnectionCore
 */
export interface ConnectionCore {
    /**
     * The name of the connection
     * @type {string}
     * @memberof ConnectionCore
     */
    name?: string;
    /**
     * The unique identifier of the app
     * @type {string}
     * @memberof ConnectionCore
     */
    appId?: string;
    /**
     * The version of the app
     * @type {string}
     * @memberof ConnectionCore
     */
    appVersion?: string;
    /**
     * The description of the connection
     * @type {string}
     * @memberof ConnectionCore
     */
    description?: string | null;
    /**
     * OAuth or API key authentication configuration
     * @type {OAuthCredentials | ApiKeyCredentials | BasicAuthCredentials | NoAuthCredentials}
     * @memberof ConnectionCore
     */
    credentials: OAuthCredentials | ApiKeyCredentials | BasicAuthCredentials | NoAuthCredentials;
    /**
     * Metadata for the connection
     * @type {object}
     * @memberof ConnectionCore
     */
    connectionMetaData?: object | null;
}
/**
 * This represents the connection between the user and the assistant
 * @export
 * @interface ConnectionOutput
 */
export interface ConnectionOutput {
    /**
     *
     * @type {string}
     * @memberof ConnectionOutput
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ConnectionOutput
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof ConnectionOutput
     */
    sourceName?: string;
    /**
     *
     * @type {string}
     * @memberof ConnectionOutput
     */
    sourceId?: string;
    /**
     *
     * @type {object}
     * @memberof ConnectionOutput
     */
    sourceProps?: object | null;
    /**
     *
     * @type {string}
     * @memberof ConnectionOutput
     */
    agentId?: string;
    /**
     *
     * @type {string}
     * @memberof ConnectionOutput
     */
    prospectId?: string | null;
    /**
     *
     * @type {string}
     * @memberof ConnectionOutput
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof ConnectionOutput
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof ConnectionOutput
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof ConnectionOutput
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @interface ConnectionSource
 */
export interface ConnectionSource {
    /**
     * Name of the source
     * @type {string}
     * @memberof ConnectionSource
     */
    sourceName?: ConnectionSourceSourceNameEnum;
    /**
     * Unique identifier for the source
     * @type {string}
     * @memberof ConnectionSource
     */
    sourceId: string;
    /**
     * Extra properties of source
     * @type {object}
     * @memberof ConnectionSource
     */
    sourceProps: object;
}
/**
    * @export
    * @enum {string}
    */
export declare enum ConnectionSourceSourceNameEnum {
    TWILIO = "TWILIO",
    PLIVO = "PLIVO",
    BROWSER = "BROWSER"
}
/**
 * Expected output of the post conversation task
 * @export
 * @interface ConversationAnalyticsModelInput
 */
export interface ConversationAnalyticsModelInput {
    /**
     * Summary of the conversation happened with important details on the conversation. The summary should be concise and to the point. It should contain the important details of the conversation like name, phone number, email, address and any other details shared by the user.
     * @type {string}
     * @memberof ConversationAnalyticsModelInput
     */
    summary: string | null;
    /**
     * List of action items and the next steps to be performed from the conversation details.
     * @type {Array<string>}
     * @memberof ConversationAnalyticsModelInput
     */
    action_items: Array<string> | null;
    /**
     * If the user has given consent to store the audio of the conversation. Unless the user explicitly says yes, this should be false.
     * @type {boolean}
     * @memberof ConversationAnalyticsModelInput
     */
    is_audio_consent_given: boolean;
    /**
     * Extracted email address of the caller from the conversation details. Email should be a valid email address format
     * @type {string}
     * @memberof ConversationAnalyticsModelInput
     */
    email_address_of_caller: string | null;
    /**
     * Extracted name of the caller from the conversation details.
     * @type {string}
     * @memberof ConversationAnalyticsModelInput
     */
    name_of_caller: string | null;
    /**
     * Extracted phone number of the caller from the conversation details.
     * @type {string}
     * @memberof ConversationAnalyticsModelInput
     */
    phone_number_of_caller: string | null;
    /**
     * Extracted address of the caller from the conversation details.
     * @type {string}
     * @memberof ConversationAnalyticsModelInput
     */
    address_of_caller: string | null;
    /**
     * Sentiment of the caller based on the conversation details.
     * @type {CallSentiment}
     * @memberof ConversationAnalyticsModelInput
     */
    sentiment_of_caller: CallSentiment;
    /**
     * Status of the prospect after this conversation.
     * @type {ProspectStatus}
     * @memberof ConversationAnalyticsModelInput
     */
    prospectStatus: ProspectStatus | null;
}
/**
 *
 * @export
 * @interface ConversationEndEvent
 */
export interface ConversationEndEvent {
    /**
     *
     * @type {string}
     * @memberof ConversationEndEvent
     */
    timestamp: string;
    /**
     *
     * @type {string}
     * @memberof ConversationEndEvent
     */
    version?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationEndEvent
     */
    event_name: string;
    /**
     *
     * @type {ConversationEndEventPayload}
     * @memberof ConversationEndEvent
     */
    payload?: ConversationEndEventPayload;
}
/**
 *
 * @export
 * @interface ConversationEndEventPayload
 */
export interface ConversationEndEventPayload {
    /**
     *
     * @type {ConversationOutput}
     * @memberof ConversationEndEventPayload
     */
    conversation: ConversationOutput;
}
/**
 * Model which stores the evaluation metrics for the conversation
 * @export
 * @interface ConversationEvaluation
 */
export interface ConversationEvaluation {
    /**
     *
     * @type {string}
     * @memberof ConversationEvaluation
     */
    aiEvaluationSummary: string | null;
    /**
     *
     * @type {Array<ConversationEvaluationData>}
     * @memberof ConversationEvaluation
     */
    aiEvaluations: Array<ConversationEvaluationData>;
    /**
     *
     * @type {string | Array<string>}
     * @memberof ConversationEvaluation
     */
    aiWhatWentWell: string | Array<string> | null;
    /**
     *
     * @type {string | Array<string>}
     * @memberof ConversationEvaluation
     */
    aiWhatCanBeImproved: string | Array<string> | null;
    /**
     *
     * @type {string}
     * @memberof ConversationEvaluation
     */
    humanEvaluationSummary: string | null;
    /**
     *
     * @type {Array<ConversationEvaluationData>}
     * @memberof ConversationEvaluation
     */
    humanEvaluations: Array<ConversationEvaluationData> | null;
    /**
     *
     * @type {string | Array<string>}
     * @memberof ConversationEvaluation
     */
    humanWhatWentWell: string | Array<string> | null;
    /**
     *
     * @type {string | Array<string>}
     * @memberof ConversationEvaluation
     */
    humanWhatCanBeImproved: string | Array<string> | null;
}
/**
 * Model which stores the result of the evaluation metric for a conversation
 * @export
 * @interface ConversationEvaluationData
 */
export interface ConversationEvaluationData {
    /**
     * Name of the evaluation metric
     * @type {string}
     * @memberof ConversationEvaluationData
     */
    name?: string;
    /**
     * Description about the evaluation metric
     * @type {string}
     * @memberof ConversationEvaluationData
     */
    description?: string;
    /**
     * Value of the evaluation metric
     * @type {string}
     * @memberof ConversationEvaluationData
     */
    value?: string;
}
/**
 * Model which stores the details of each evaluation metric
 * @export
 * @interface ConversationEvaluationMetric
 */
export interface ConversationEvaluationMetric {
    /**
     * Name of the evaluation metric
     * @type {string}
     * @memberof ConversationEvaluationMetric
     */
    name?: string;
    /**
     * Description about the evaluation metric
     * @type {string}
     * @memberof ConversationEvaluationMetric
     */
    description?: string;
}
/**
 * Model which stores all the evaluation metrics which is used to evaluate the conversation
 * @export
 * @interface ConversationEvaluationMetrics
 */
export interface ConversationEvaluationMetrics {
    /**
     *
     * @type {Array<ConversationEvaluationMetric>}
     * @memberof ConversationEvaluationMetrics
     */
    qualitativeMetrics: Array<ConversationEvaluationMetric> | null;
    /**
     *
     * @type {Array<ConversationEvaluationMetric>}
     * @memberof ConversationEvaluationMetrics
     */
    quantitativeMetrics: Array<ConversationEvaluationMetric> | null;
}
/**
 * Any feedback added to the conversation by business is managed here.
 * @export
 * @interface ConversationFeedback
 */
export interface ConversationFeedback {
    /**
     *
     * @type {string}
     * @memberof ConversationFeedback
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationFeedback
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationFeedback
     */
    conversationId?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationFeedback
     */
    feedback?: string;
    /**
     *
     * @type {number}
     * @memberof ConversationFeedback
     */
    rating?: number;
    /**
     *
     * @type {string}
     * @memberof ConversationFeedback
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationFeedback
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationFeedback
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationFeedback
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @interface ConversationInput
 */
export interface ConversationInput {
    /**
     * Source from where the conversation originated. This can be device id, phone number, etc.
     * @type {string}
     * @memberof ConversationInput
     */
    source: string;
    /**
     * Type of the conversation source
     * @type {ConversationSourceType}
     * @memberof ConversationInput
     */
    sourceType: ConversationSourceType;
    /**
     * AI agent which handled the conversation
     * @type {string}
     * @memberof ConversationInput
     */
    agentId: string;
    /**
     * App in which the conversation is created
     * @type {AppEnumInput}
     * @memberof ConversationInput
     */
    app?: AppEnumInput | null;
    /**
     * URL to the full transcript of the conversation
     * @type {Array<DialogLine>}
     * @memberof ConversationInput
     */
    transcriptText?: Array<DialogLine> | null;
    /**
     * Summary of the conversation
     * @type {string}
     * @memberof ConversationInput
     */
    transcriptSummary?: string | null;
    /**
     * URL to the recording of the conversation
     * @type {string}
     * @memberof ConversationInput
     */
    transcriptRecordingUrl?: string | null;
    /**
     * Start time of the conversation
     * @type {string}
     * @memberof ConversationInput
     */
    timestampStart: string;
    /**
     * End time of the conversation
     * @type {string}
     * @memberof ConversationInput
     */
    timestampEnd?: string | null;
    /**
     * Analytics of the conversation
     * @type {ConversationAnalyticsModelInput}
     * @memberof ConversationInput
     */
    conversationAnalytics?: ConversationAnalyticsModelInput | null;
    /**
     * Comments from the admin on the conversation
     * @type {Array<Comment>}
     * @memberof ConversationInput
     */
    adminComments?: Array<Comment> | null;
    /**
     * Stats of the conversation
     * @type {ConversationStatsModel}
     * @memberof ConversationInput
     */
    conversationStats?: ConversationStatsModel | null;
    /**
     * Evaluation of the conversation
     * @type {ConversationEvaluation}
     * @memberof ConversationInput
     */
    evaluation?: ConversationEvaluation | null;
}
/**
 * Any conversation happening between the end user and assistant is stored in this table
 * @export
 * @interface ConversationOutput
 */
export interface ConversationOutput {
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    prospectId?: string | null;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    source?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    sourceType?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    aiAgentId?: string;
    /**
     *
     * @type {Array<DialogLine>}
     * @memberof ConversationOutput
     */
    transcriptText?: Array<DialogLine> | null;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    transcriptSummary?: string | null;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    transcriptRecordingUrl?: string | null;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    timestampStart?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    timestampEnd?: string | null;
    /**
     * Analytics of the conversation
     * @type {ConversationAnalyticsModelInput}
     * @memberof ConversationOutput
     */
    conversationAnalytics?: ConversationAnalyticsModelInput | null;
    /**
     * Stats of the conversation
     * @type {ConversationStatsModel}
     * @memberof ConversationOutput
     */
    conversationStats?: ConversationStatsModel | null;
    /**
     * Application under which the conversation is created
     * @type {AppEnumOutput}
     * @memberof ConversationOutput
     */
    app?: AppEnumOutput | null;
    /**
     * Evaluation of the conversation
     * @type {ConversationEvaluation}
     * @memberof ConversationOutput
     */
    evaluation?: ConversationEvaluation | null;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    status: string;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationOutput
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum ConversationSourceType {
    BROWSER = "BROWSER",
    TWILIO = "TWILIO",
    PLIVO = "PLIVO"
}
/**
 *
 * @export
 * @interface ConversationStartEvent
 */
export interface ConversationStartEvent {
    /**
     *
     * @type {string}
     * @memberof ConversationStartEvent
     */
    timestamp: string;
    /**
     *
     * @type {string}
     * @memberof ConversationStartEvent
     */
    version?: string;
    /**
     *
     * @type {string}
     * @memberof ConversationStartEvent
     */
    event_name: string;
    /**
     *
     * @type {ConversationStartEventPayload}
     * @memberof ConversationStartEvent
     */
    payload?: ConversationStartEventPayload;
}
/**
 *
 * @export
 * @interface ConversationStartEventPayload
 */
export interface ConversationStartEventPayload {
    /**
     *
     * @type {string}
     * @memberof ConversationStartEventPayload
     */
    type: ConversationStartEventPayloadTypeEnum;
    /**
     *
     * @type {string}
     * @memberof ConversationStartEventPayload
     */
    connection_id: string;
    /**
     *
     * @type {string}
     * @memberof ConversationStartEventPayload
     */
    conversation_id: string;
    /**
     *
     * @type {string}
     * @memberof ConversationStartEventPayload
     */
    ai_agent_id: string;
    /**
     *
     * @type {string}
     * @memberof ConversationStartEventPayload
     */
    org_id: string;
    /**
     *
     * @type {object}
     * @memberof ConversationStartEventPayload
     */
    caller_id: object | null;
}
/**
    * @export
    * @enum {string}
    */
export declare enum ConversationStartEventPayloadTypeEnum {
    ConversationStart = "conversation_start"
}
/**
 *
 * @export
 * @interface ConversationStatsModel
 */
export interface ConversationStatsModel {
    /**
     * Total number of dialogs in the conversation
     * @type {number}
     * @memberof ConversationStatsModel
     */
    total_dialog: number;
    /**
     * Ratio of Agent dialogs to total dialogs
     * @type {number}
     * @memberof ConversationStatsModel
     */
    agent_dialog_ratio: number;
    /**
     * Ratio of User dialogs to total dialogs
     * @type {number}
     * @memberof ConversationStatsModel
     */
    user_dialog_ratio: number;
}
/**
 *
 * @export
 * @interface CountryInfo
 */
export interface CountryInfo {
    /**
     *
     * @type {string}
     * @memberof CountryInfo
     */
    code: string;
    /**
     *
     * @type {string}
     * @memberof CountryInfo
     */
    name: string;
}
/**
 * Course represents a course that can be used in a scenario
 * @export
 * @interface Course
 */
export interface Course {
    /**
     * The user who created.
     * @type {string}
     * @memberof Course
     */
    createdBy?: string;
    /**
     * The date and time it was created.
     * @type {string}
     * @memberof Course
     */
    createdAt?: string;
    /**
     * The user who last updated.
     * @type {string}
     * @memberof Course
     */
    updatedBy?: string;
    /**
     * The date and time when it was last updated.
     * @type {string}
     * @memberof Course
     */
    updatedAt?: string;
    /**
     * The workspace of the entity.
     * @type {string}
     * @memberof Course
     */
    orgId?: string;
    /**
     * The name of the course
     * @type {string}
     * @memberof Course
     */
    name: string;
    /**
     * The photo URL of the course
     * @type {string}
     * @memberof Course
     */
    photoUrl?: string | null;
    /**
     * The description of the course
     * @type {string}
     * @memberof Course
     */
    description: string;
    /**
     * The status of the course
     * @type {string}
     * @memberof Course
     */
    status: string;
    /**
     * The tags of the course
     * @type {Array<string>}
     * @memberof Course
     */
    tags?: Array<string> | null;
    /**
     * The unique identifier of the course
     * @type {string}
     * @memberof Course
     */
    id?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum CourseAssignmentStatus {
    Assigned = "assigned",
    Unassigned = "unassigned"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum CourseCompletionStatus {
    NOTSTARTED = "NOT_STARTED",
    INPROGRESS = "IN_PROGRESS",
    COMPLETED = "COMPLETED"
}
/**
 *
 * @export
 * @interface CourseCore
 */
export interface CourseCore {
    /**
     * The name of the course
     * @type {string}
     * @memberof CourseCore
     */
    name: string;
    /**
     * The photo URL of the course
     * @type {string}
     * @memberof CourseCore
     */
    photoUrl?: string | null;
    /**
     * The description of the course
     * @type {string}
     * @memberof CourseCore
     */
    description: string;
    /**
     * The status of the course
     * @type {string}
     * @memberof CourseCore
     */
    status: string;
    /**
     * The tags of the course
     * @type {Array<string>}
     * @memberof CourseCore
     */
    tags?: Array<string> | null;
}
/**
 *
 * @export
 * @interface CourseRequest
 */
export interface CourseRequest {
    /**
     *
     * @type {CourseCore}
     * @memberof CourseRequest
     */
    course: CourseCore;
    /**
     *
     * @type {Array<ModuleCore>}
     * @memberof CourseRequest
     */
    modules: Array<ModuleCore>;
}
/**
 *
 * @export
 * @interface CourseResponse
 */
export interface CourseResponse {
    /**
     *
     * @type {Course}
     * @memberof CourseResponse
     */
    course: Course;
    /**
     *
     * @type {Array<Module>}
     * @memberof CourseResponse
     */
    modules: Array<Module>;
}
/**
 *
 * @export
 * @interface CourseUpdateRequest
 */
export interface CourseUpdateRequest {
    /**
     *
     * @type {CourseCore}
     * @memberof CourseUpdateRequest
     */
    course: CourseCore;
    /**
     *
     * @type {Array<ModuleUpdateRequest>}
     * @memberof CourseUpdateRequest
     */
    modules: Array<ModuleUpdateRequest>;
}
/**
 *
 * @export
 * @interface CourseWithAssignmentStatus
 */
export interface CourseWithAssignmentStatus {
    /**
     *
     * @type {Course}
     * @memberof CourseWithAssignmentStatus
     */
    course: Course;
    /**
     * Course assignment status (assigned/unassigned)
     * @type {CourseAssignmentStatus}
     * @memberof CourseWithAssignmentStatus
     */
    status?: CourseAssignmentStatus;
}
/**
 * Credits details of the business
 * @export
 * @interface Credit
 */
export interface Credit {
    /**
     *
     * @type {string}
     * @memberof Credit
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Credit
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof Credit
     */
    creditTypeName?: string;
    /**
     *
     * @type {string}
     * @memberof Credit
     */
    totalAvailable?: string;
    /**
     *
     * @type {string}
     * @memberof Credit
     */
    consumed?: string;
    /**
     *
     * @type {string}
     * @memberof Credit
     */
    durationStart?: string;
    /**
     *
     * @type {string}
     * @memberof Credit
     */
    durationEnd?: string;
}
/**
 * Enum for the type of credit
 * @export
 * @enum {string}
 */
export declare enum CreditTypeEnum {
    PhoneNumbers = "phone_numbers",
    CallSeconds = "call_seconds",
    CallHours = "call_hours",
    Emails = "emails",
    LinkedInScraping = "linked_in_scraping",
    Courses = "courses",
    RecordingAndTranscription = "recording_and_transcription",
    Users = "users",
    AdvancedIntelligence = "advanced_intelligence",
    RolePlayCustomization = "role_play_customization"
}
/**
 *
 * @export
 * @interface CustomerBranding
 */
export interface CustomerBranding {
    /**
     * Name of the organization
     * @type {string}
     * @memberof CustomerBranding
     */
    name?: string | null;
    /**
     * Brand color of the organization
     * @type {string}
     * @memberof CustomerBranding
     */
    brandColor?: string | null;
    /**
     * Button color of the organization
     * @type {string}
     * @memberof CustomerBranding
     */
    buttonColor?: string | null;
    /**
     * Secondary color of the organization
     * @type {string}
     * @memberof CustomerBranding
     */
    secondaryColor?: string | null;
    /**
     * Text color of the organization
     * @type {string}
     * @memberof CustomerBranding
     */
    textColor?: string | null;
    /**
     * Favicon of the organization
     * @type {string}
     * @memberof CustomerBranding
     */
    favicon?: string | null;
    /**
     * Favicon URL of the organization
     * @type {string}
     * @memberof CustomerBranding
     */
    faviconUrl?: string | null;
    /**
     * Logo of the organization
     * @type {string}
     * @memberof CustomerBranding
     */
    logo?: string | null;
    /**
     * Logo URL of the organization
     * @type {string}
     * @memberof CustomerBranding
     */
    logoUrl?: string | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum DecisionMakingStyle {
    Logical = "logical",
    Emotional = "emotional",
    Impulsive = "impulsive",
    Hesitant = "hesitant"
}
/**
 *
 * @export
 * @interface DialogLine
 */
export interface DialogLine {
    /**
     *
     * @type {string}
     * @memberof DialogLine
     */
    speaker: DialogLineSpeakerEnum;
    /**
     *
     * @type {string}
     * @memberof DialogLine
     */
    message: string;
    /**
     *
     * @type {string}
     * @memberof DialogLine
     */
    timestamp: string;
    /**
     *
     * @type {string}
     * @memberof DialogLine
     */
    message_id: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum DialogLineSpeakerEnum {
    USER = "USER",
    AI = "AI",
    TOOL = "TOOL",
    AITOOLREQUEST = "AI - TOOL REQUEST"
}
/**
 *
 * @export
 * @interface DialogWordWithTimestamp
 */
export interface DialogWordWithTimestamp {
    /**
     *
     * @type {string}
     * @memberof DialogWordWithTimestamp
     */
    word: string;
    /**
     *
     * @type {number}
     * @memberof DialogWordWithTimestamp
     */
    start_at_milliseconds: number;
    /**
     *
     * @type {number}
     * @memberof DialogWordWithTimestamp
     */
    end_at_milliseconds: number;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum EngagementLevel {
    HighlyEngaged = "highly engaged",
    Distracted = "distracted",
    Uninterested = "uninterested"
}
/**
 * Mapping table between entities and their tags (simple string tags)
 * @export
 * @interface EntityTag
 */
export interface EntityTag {
    /**
     * The user who created.
     * @type {string}
     * @memberof EntityTag
     */
    createdBy?: string;
    /**
     * The date and time it was created.
     * @type {string}
     * @memberof EntityTag
     */
    createdAt?: string;
    /**
     * The user who last updated.
     * @type {string}
     * @memberof EntityTag
     */
    updatedBy?: string;
    /**
     * The date and time when it was last updated.
     * @type {string}
     * @memberof EntityTag
     */
    updatedAt?: string;
    /**
     * The workspace of the entity.
     * @type {string}
     * @memberof EntityTag
     */
    orgId?: string;
    /**
     * The unique identifier of the entity tag
     * @type {string}
     * @memberof EntityTag
     */
    id?: string;
    /**
     * Type of entity being tagged (e.g., scenario, persona, course, evaluator)
     * @type {string}
     * @memberof EntityTag
     */
    entityType?: string;
    /**
     * ID of the entity being tagged
     * @type {string}
     * @memberof EntityTag
     */
    entityId?: string;
    /**
     * Name of the tag
     * @type {string}
     * @memberof EntityTag
     */
    tagName?: string;
}
/**
 * Model which stores the result of the evaluation metric for a conversation
 * @export
 * @interface Evaluation
 */
export interface Evaluation {
    /**
     * Feedback on how the role player performed in the conversation for the specific goal and the feedback should be based on the goal description and the conversation details provided.
     * @type {string}
     * @memberof Evaluation
     */
    evaluation_result?: string | null;
    /**
     * Out of 10, what is the score that the role player got for the specific goal specific to this conversation.          The score should ONLY be provided when there is sufficient context and evidence in the conversation to make an accurate assessment.         If there is insufficient information or context to make a fair evaluation, the score should be -1.         When providing a score, it must be justified by specific examples and behaviors from the conversation that align with the goal criteria.
     * @type {number}
     * @memberof Evaluation
     */
    score?: number | null;
}
/**
 *
 * @export
 * @interface Evaluator
 */
export interface Evaluator {
    /**
     * The user who created.
     * @type {string}
     * @memberof Evaluator
     */
    createdBy?: string;
    /**
     * The date and time it was created.
     * @type {string}
     * @memberof Evaluator
     */
    createdAt?: string;
    /**
     * The user who last updated.
     * @type {string}
     * @memberof Evaluator
     */
    updatedBy?: string;
    /**
     * The date and time when it was last updated.
     * @type {string}
     * @memberof Evaluator
     */
    updatedAt?: string;
    /**
     * The workspace of the entity.
     * @type {string}
     * @memberof Evaluator
     */
    orgId?: string;
    /**
     * The name of the evaluator
     * @type {string}
     * @memberof Evaluator
     */
    name: string;
    /**
     * The description of the evaluator
     * @type {string}
     * @memberof Evaluator
     */
    description: string;
    /**
     * The ID of the goals
     * @type {string}
     * @memberof Evaluator
     */
    goals_id?: string | null;
    /**
     * The ID of the tracker
     * @type {string}
     * @memberof Evaluator
     */
    tracker_id?: string | null;
    /**
     * The source of the playbook
     * @type {Array<string>}
     * @memberof Evaluator
     */
    generator_source?: Array<string> | null;
    /**
     * The status of the evaluator
     * @type {string}
     * @memberof Evaluator
     */
    status?: string;
    /**
     * The unique identifier of the evaluator
     * @type {string}
     * @memberof Evaluator
     */
    id?: string;
}
/**
 *
 * @export
 * @interface EvaluatorCore
 */
export interface EvaluatorCore {
    /**
     * The name of the evaluator
     * @type {string}
     * @memberof EvaluatorCore
     */
    name: string;
    /**
     * The description of the evaluator
     * @type {string}
     * @memberof EvaluatorCore
     */
    description: string;
    /**
     * The ID of the goals
     * @type {string}
     * @memberof EvaluatorCore
     */
    goals_id?: string | null;
    /**
     * The ID of the tracker
     * @type {string}
     * @memberof EvaluatorCore
     */
    tracker_id?: string | null;
    /**
     * The source of the playbook
     * @type {Array<string>}
     * @memberof EvaluatorCore
     */
    generator_source?: Array<string> | null;
    /**
     * The status of the evaluator
     * @type {string}
     * @memberof EvaluatorCore
     */
    status?: string;
}
/**
 *
 * @export
 * @interface ExternalReference
 */
export interface ExternalReference {
    /**
     * External service provider name
     * @type {string}
     * @memberof ExternalReference
     */
    providerName: string;
    /**
     * External service identifier
     * @type {string}
     * @memberof ExternalReference
     */
    id: string;
    /**
     * Props for the external reference
     * @type {object}
     * @memberof ExternalReference
     */
    providerProps?: object | null;
}
/**
 *
 * @export
 * @interface ExternalServiceProviderInput
 */
export interface ExternalServiceProviderInput {
    /**
     * External service provider name
     * @type {string}
     * @memberof ExternalServiceProviderInput
     */
    providerName: string;
    /**
     * External service identifier
     * @type {string}
     * @memberof ExternalServiceProviderInput
     */
    id: string;
    /**
     * Props for the external service provider
     * @type {object}
     * @memberof ExternalServiceProviderInput
     */
    providerProps: object | null;
}
/**
 *
 * @export
 * @interface ExternalServiceProviderOutput
 */
export interface ExternalServiceProviderOutput {
    /**
     *
     * @type {string}
     * @memberof ExternalServiceProviderOutput
     */
    providerName: string;
    /**
     *
     * @type {string}
     * @memberof ExternalServiceProviderOutput
     */
    id: string;
    /**
     *
     * @type {object}
     * @memberof ExternalServiceProviderOutput
     */
    providerProps: object | null;
}
/**
 * Feedback represents a feedback that can be given to a persona
 * @export
 * @interface Feedback
 */
export interface Feedback {
    /**
     * The user who created.
     * @type {string}
     * @memberof Feedback
     */
    createdBy?: string;
    /**
     * The date and time it was created.
     * @type {string}
     * @memberof Feedback
     */
    createdAt?: string;
    /**
     * The user who last updated.
     * @type {string}
     * @memberof Feedback
     */
    updatedBy?: string;
    /**
     * The date and time when it was last updated.
     * @type {string}
     * @memberof Feedback
     */
    updatedAt?: string;
    /**
     * The workspace of the entity.
     * @type {string}
     * @memberof Feedback
     */
    orgId?: string;
    /**
     * The ID of the user who made the call
     * @type {string}
     * @memberof Feedback
     */
    userId: string;
    /**
     * The name of the user who made the call
     * @type {string}
     * @memberof Feedback
     */
    userName: string | null;
    /**
     * The ID of the AI agent
     * @type {string}
     * @memberof Feedback
     */
    aiAgentId: string | null;
    /**
     * The ID of the scenario
     * @type {string}
     * @memberof Feedback
     */
    scenarioId: string;
    /**
     * The name of the scenario
     * @type {string}
     * @memberof Feedback
     */
    scenarioName: string | null;
    /**
     * The ID of the persona
     * @type {string}
     * @memberof Feedback
     */
    personaId: string;
    /**
     * The name of the persona
     * @type {string}
     * @memberof Feedback
     */
    personaName: string | null;
    /**
     * The start timestamp of the conversation
     * @type {string}
     * @memberof Feedback
     */
    startTimestamp: string;
    /**
     * The end timestamp of the conversation
     * @type {string}
     * @memberof Feedback
     */
    endTimestamp: string;
    /**
     * The time in seconds when sparring started
     * @type {number}
     * @memberof Feedback
     */
    startSparringAt?: number;
    /**
     * The time in seconds when sparring ended
     * @type {number}
     * @memberof Feedback
     */
    endSparringAt?: number;
    /**
     * The top insights from the conversation
     * @type {Array<string>}
     * @memberof Feedback
     */
    topInsights: Array<string>;
    /**
     * The URL of the recording of the conversation
     * @type {string}
     * @memberof Feedback
     */
    recordingUrl: string;
    /**
     * The transcript of the conversation
     * @type {Array<SparrDialogLine>}
     * @memberof Feedback
     */
    transcript: Array<SparrDialogLine>;
    /**
     * The complete transcript of the conversation
     * @type {Array<SparrDialogLine>}
     * @memberof Feedback
     */
    completeTranscript?: Array<SparrDialogLine> | null;
    /**
     * The transcript of the conversation with timestamp
     * @type {Array<SparrDialogLineWithTimestamp>}
     * @memberof Feedback
     */
    transcriptWithTimestamp?: Array<SparrDialogLineWithTimestamp> | null;
    /**
     * The analytics of the conversation
     * @type {AnalyticsModelOutput}
     * @memberof Feedback
     */
    analytics: AnalyticsModelOutput;
    /**
     * The overall score of the conversation out of 100 based on the weightage of each goal
     * @type {number}
     * @memberof Feedback
     */
    overallScore: number;
    /**
     * The status of the feedback
     * @type {string}
     * @memberof Feedback
     */
    status?: string;
    /**
     * The unique identifier of the feedback
     * @type {string}
     * @memberof Feedback
     */
    id?: string;
    /**
     * The version of the feedback
     * @type {number}
     * @memberof Feedback
     */
    version?: number;
}
/**
 *
 * @export
 * @interface FeedbackCore
 */
export interface FeedbackCore {
    /**
     * The ID of the user who made the call
     * @type {string}
     * @memberof FeedbackCore
     */
    userId: string;
    /**
     * The name of the user who made the call
     * @type {string}
     * @memberof FeedbackCore
     */
    userName: string | null;
    /**
     * The ID of the AI agent
     * @type {string}
     * @memberof FeedbackCore
     */
    aiAgentId: string | null;
    /**
     * The ID of the scenario
     * @type {string}
     * @memberof FeedbackCore
     */
    scenarioId: string;
    /**
     * The name of the scenario
     * @type {string}
     * @memberof FeedbackCore
     */
    scenarioName: string | null;
    /**
     * The ID of the persona
     * @type {string}
     * @memberof FeedbackCore
     */
    personaId: string;
    /**
     * The name of the persona
     * @type {string}
     * @memberof FeedbackCore
     */
    personaName: string | null;
    /**
     * The start timestamp of the conversation
     * @type {string}
     * @memberof FeedbackCore
     */
    startTimestamp: string;
    /**
     * The end timestamp of the conversation
     * @type {string}
     * @memberof FeedbackCore
     */
    endTimestamp: string;
    /**
     * The time in seconds when sparring started
     * @type {number}
     * @memberof FeedbackCore
     */
    startSparringAt?: number;
    /**
     * The time in seconds when sparring ended
     * @type {number}
     * @memberof FeedbackCore
     */
    endSparringAt?: number;
    /**
     * The top insights from the conversation
     * @type {Array<string>}
     * @memberof FeedbackCore
     */
    topInsights: Array<string>;
    /**
     * The URL of the recording of the conversation
     * @type {string}
     * @memberof FeedbackCore
     */
    recordingUrl: string;
    /**
     * The transcript of the conversation
     * @type {Array<SparrDialogLine>}
     * @memberof FeedbackCore
     */
    transcript: Array<SparrDialogLine>;
    /**
     * The complete transcript of the conversation
     * @type {Array<SparrDialogLine>}
     * @memberof FeedbackCore
     */
    completeTranscript?: Array<SparrDialogLine> | null;
    /**
     * The transcript of the conversation with timestamp
     * @type {Array<SparrDialogLineWithTimestamp>}
     * @memberof FeedbackCore
     */
    transcriptWithTimestamp?: Array<SparrDialogLineWithTimestamp> | null;
    /**
     * The analytics of the conversation
     * @type {AnalyticsModelInput}
     * @memberof FeedbackCore
     */
    analytics: AnalyticsModelInput;
    /**
     * The overall score of the conversation out of 100 based on the weightage of each goal
     * @type {number}
     * @memberof FeedbackCore
     */
    overallScore: number;
    /**
     * The status of the feedback
     * @type {string}
     * @memberof FeedbackCore
     */
    status?: string;
}
/**
 * Stores the map of file id with respective file URL in storage manager
 * @export
 * @interface Files
 */
export interface Files {
    /**
     *
     * @type {string}
     * @memberof Files
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Files
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof Files
     */
    fileName?: string;
    /**
     *
     * @type {string}
     * @memberof Files
     */
    fileUrl?: string;
    /**
     *
     * @type {string}
     * @memberof Files
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof Files
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof Files
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof Files
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @interface FillerWords
 */
export interface FillerWords {
    /**
     *
     * @type {any}
     * @memberof FillerWords
     */
    words: any | null;
    /**
     *
     * @type {number}
     * @memberof FillerWords
     */
    total: number | null;
}
/**
 *
 * @export
 * @interface FlexibleGenerationRequest
 */
export interface FlexibleGenerationRequest {
    /**
     * Name for the generated evaluator
     * @type {string}
     * @memberof FlexibleGenerationRequest
     */
    name: string;
    /**
     * Description for the generated evaluator
     * @type {string}
     * @memberof FlexibleGenerationRequest
     */
    description?: string | null;
    /**
     * List of file IDs to generate content from
     * @type {Array<string>}
     * @memberof FlexibleGenerationRequest
     */
    file_ids?: Array<string> | null;
    /**
     * Optional goals core data
     * @type {GoalCore}
     * @memberof FlexibleGenerationRequest
     */
    goals_core?: GoalCore | null;
    /**
     * Optional tracker core data
     * @type {TrackerCore}
     * @memberof FlexibleGenerationRequest
     */
    tracker_core?: TrackerCore | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum FrustrationTolerance {
    QuickToAnger = "quick to anger",
    Understanding = "understanding",
    Neutral = "neutral"
}
/**
 *
 * @export
 * @interface GoalAnalyticsModelInput
 */
export interface GoalAnalyticsModelInput {
    /**
     *
     * @type {Array<GoalEvaluationInput>}
     * @memberof GoalAnalyticsModelInput
     */
    skills_goals?: Array<GoalEvaluationInput> | null;
    /**
     *
     * @type {Array<GoalEvaluationInput>}
     * @memberof GoalAnalyticsModelInput
     */
    process_goals?: Array<GoalEvaluationInput> | null;
    /**
     *
     * @type {Array<GoalEvaluationInput>}
     * @memberof GoalAnalyticsModelInput
     */
    communication_goals?: Array<GoalEvaluationInput> | null;
}
/**
 *
 * @export
 * @interface GoalAnalyticsModelOutput
 */
export interface GoalAnalyticsModelOutput {
    /**
     *
     * @type {Array<GoalEvaluationOutput>}
     * @memberof GoalAnalyticsModelOutput
     */
    skills_goals?: Array<GoalEvaluationOutput> | null;
    /**
     *
     * @type {Array<GoalEvaluationOutput>}
     * @memberof GoalAnalyticsModelOutput
     */
    process_goals?: Array<GoalEvaluationOutput> | null;
    /**
     *
     * @type {Array<GoalEvaluationOutput>}
     * @memberof GoalAnalyticsModelOutput
     */
    communication_goals?: Array<GoalEvaluationOutput> | null;
}
/**
 *
 * @export
 * @interface GoalCore
 */
export interface GoalCore {
    /**
     * The name of the goals collection
     * @type {string}
     * @memberof GoalCore
     */
    name: string;
    /**
     * The description of the goals collection
     * @type {string}
     * @memberof GoalCore
     */
    description: string;
    /**
     * The list of process goals
     * @type {Array<GoalInput>}
     * @memberof GoalCore
     */
    process_goals?: Array<GoalInput> | null;
    /**
     * The list of skills goals
     * @type {Array<GoalInput>}
     * @memberof GoalCore
     */
    skills_goals?: Array<GoalInput> | null;
    /**
     * The list of communication goals
     * @type {Array<GoalInput>}
     * @memberof GoalCore
     */
    communication_goals?: Array<GoalInput> | null;
    /**
     * The status of the goals collection
     * @type {string}
     * @memberof GoalCore
     */
    status?: string;
}
/**
 *
 * @export
 * @interface GoalEvaluationInput
 */
export interface GoalEvaluationInput {
    /**
     *
     * @type {GoalInput}
     * @memberof GoalEvaluationInput
     */
    goal: GoalInput;
    /**
     *
     * @type {Evaluation}
     * @memberof GoalEvaluationInput
     */
    evaluation: Evaluation;
}
/**
 *
 * @export
 * @interface GoalEvaluationOutput
 */
export interface GoalEvaluationOutput {
    /**
     *
     * @type {SparrModelsScenarioGoal}
     * @memberof GoalEvaluationOutput
     */
    goal: SparrModelsScenarioGoal;
    /**
     *
     * @type {Evaluation}
     * @memberof GoalEvaluationOutput
     */
    evaluation: Evaluation;
}
/**
 *
 * @export
 * @interface GoalInput
 */
export interface GoalInput {
    /**
     * The name of the goal
     * @type {string}
     * @memberof GoalInput
     */
    name: string;
    /**
     * The description of the goal
     * @type {string}
     * @memberof GoalInput
     */
    description: string;
    /**
     * The weightage of the goal in percentage
     * @type {number}
     * @memberof GoalInput
     */
    weightage: number;
}
/**
 *
 * @export
 * @interface GoalsSearchResponse
 */
export interface GoalsSearchResponse {
    /**
     *
     * @type {Array<SparrDbModelsGoal>}
     * @memberof GoalsSearchResponse
     */
    items: Array<SparrDbModelsGoal>;
    /**
     *
     * @type {number}
     * @memberof GoalsSearchResponse
     */
    total: number;
    /**
     *
     * @type {number}
     * @memberof GoalsSearchResponse
     */
    pages: number;
    /**
     *
     * @type {number}
     * @memberof GoalsSearchResponse
     */
    current_page: number;
    /**
     *
     * @type {number}
     * @memberof GoalsSearchResponse
     */
    page_size: number;
}
/**
 * Guest users who are not verified by Trata yet
 * @export
 * @interface GuestInput
 */
export interface GuestInput {
    /**
     *
     * @type {string}
     * @memberof GuestInput
     */
    email: string;
    /**
     *
     * @type {Role}
     * @memberof GuestInput
     */
    role: Role;
}
/**
 * Guest users who are not verified by Trata yet. They will not be able to use Trata until they are verified.
 * @export
 * @interface GuestOutput
 */
export interface GuestOutput {
    /**
     *
     * @type {string}
     * @memberof GuestOutput
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof GuestOutput
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof GuestOutput
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof GuestOutput
     */
    role?: string;
    /**
     *
     * @type {boolean}
     * @memberof GuestOutput
     */
    isEmailVerified?: boolean;
    /**
     *
     * @type {string}
     * @memberof GuestOutput
     */
    last_sent_date?: string;
    /**
     *
     * @type {string}
     * @memberof GuestOutput
     */
    guestInviteCode?: string | null;
    /**
     *
     * @type {number}
     * @memberof GuestOutput
     */
    sent_count?: number;
    /**
     *
     * @type {string}
     * @memberof GuestOutput
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof GuestOutput
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof GuestOutput
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof GuestOutput
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     *
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    detail?: Array<ValidationError>;
}
/**
 * Reference to all business knowledge base will be stored in Hive
 * @export
 * @interface Hive
 */
export interface Hive {
    /**
     *
     * @type {string}
     * @memberof Hive
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Hive
     */
    orgId?: string;
    /**
     *
     * @type {HiveContentOutput}
     * @memberof Hive
     */
    content: HiveContentOutput;
    /**
     *
     * @type {string}
     * @memberof Hive
     */
    status: string;
    /**
     *
     * @type {string}
     * @memberof Hive
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof Hive
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof Hive
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof Hive
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @interface HiveContentInput
 */
export interface HiveContentInput {
    /**
     *
     * @type {HiveType}
     * @memberof HiveContentInput
     */
    hiveType: HiveType;
    /**
     * URL of the content
     * @type {string}
     * @memberof HiveContentInput
     */
    url?: string | null;
    /**
     * List of file ids to be referenced for the hive
     * @type {Array<string>}
     * @memberof HiveContentInput
     */
    file_ids?: Array<string> | null;
    /**
     * To recursively crawl child pages, add this as props {\"crawl_child_pages\": true},  \"depth\": \"3\"
     * @type {object}
     * @memberof HiveContentInput
     */
    hiveProps?: object | null;
}
/**
 *
 * @export
 * @interface HiveContentOutput
 */
export interface HiveContentOutput {
    /**
     *
     * @type {HiveType}
     * @memberof HiveContentOutput
     */
    hiveType: HiveType;
    /**
     * URL of the content
     * @type {string}
     * @memberof HiveContentOutput
     */
    url?: string | null;
    /**
     * List of files to be referenced for the hive
     * @type {Array<Files>}
     * @memberof HiveContentOutput
     */
    files?: Array<Files> | null;
    /**
     * To recursively crawl child pages, add this as props {\"crawl_child_pages\": true},  \"depth\": \"3\"
     * @type {object}
     * @memberof HiveContentOutput
     */
    hiveProps?: object | null;
    /**
     * To add any internal props, add this as props {\"last_crawl_time\": \"123123123123\"}
     * @type {object}
     * @memberof HiveContentOutput
     */
    internalProps?: object | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum HiveType {
    WEBSITE = "WEBSITE",
    GOOGLEDOCS = "GOOGLE_DOCS",
    DOCS = "DOCS",
    TRANSCRIPTS = "TRANSCRIPTS"
}
/**
 *
 * @export
 * @interface HttpActionEndpoint
 */
export interface HttpActionEndpoint {
    /**
     * Action endpoint URL
     * @type {string}
     * @memberof HttpActionEndpoint
     */
    url: string;
    /**
     * Method to be used for invoking the endpoint
     * @type {string}
     * @memberof HttpActionEndpoint
     */
    method?: HttpActionEndpointMethodEnum;
    /**
     * Headers for the endpoint
     * @type {object}
     * @memberof HttpActionEndpoint
     */
    headers?: object | null;
    /**
     * Payload for the endpoint
     * @type {object}
     * @memberof HttpActionEndpoint
     */
    payload?: object | null;
}
/**
    * @export
    * @enum {string}
    */
export declare enum HttpActionEndpointMethodEnum {
    GET = "GET",
    POST = "POST"
}
/**
 *
 * @export
 * @interface IntelligenceProvider
 */
export interface IntelligenceProvider {
    /**
     *
     * @type {string}
     * @memberof IntelligenceProvider
     */
    providerName?: string | null;
    /**
     *
     * @type {string}
     * @memberof IntelligenceProvider
     */
    model?: string | null;
    /**
     *
     * @type {object}
     * @memberof IntelligenceProvider
     */
    providerProps?: object | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum InteractionTone {
    Professional = "professional",
    Casual = "casual",
    Friendly = "friendly",
    Authoritative = "authoritative"
}
/**
 * Internal action endpoint to be used for calling the action inside the module. Not used by external users
 * @export
 * @interface InternalActionEndpoint
 */
export interface InternalActionEndpoint {
    /**
     * Module where the action is defined
     * @type {string}
     * @memberof InternalActionEndpoint
     */
    module: string;
    /**
     * Function to be called inside the module
     * @type {string}
     * @memberof InternalActionEndpoint
     */
    _function: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum Language {
    English = "English",
    Spanish = "Spanish",
    Hindi = "Hindi"
}
/**
 *
 * @export
 * @interface LanguageAccentCombo
 */
export interface LanguageAccentCombo {
    /**
     *
     * @type {Language}
     * @memberof LanguageAccentCombo
     */
    language: Language;
    /**
     *
     * @type {Accent}
     * @memberof LanguageAccentCombo
     */
    accent: Accent;
}
/**
 *
 * @export
 * @interface LongestMonologue
 */
export interface LongestMonologue {
    /**
     *
     * @type {string}
     * @memberof LongestMonologue
     */
    message: string;
    /**
     *
     * @type {number}
     * @memberof LongestMonologue
     */
    start_at_seconds: number;
    /**
     *
     * @type {number}
     * @memberof LongestMonologue
     */
    end_at_seconds: number;
    /**
     *
     * @type {number}
     * @memberof LongestMonologue
     */
    duration: number;
}
/**
 * Simple metric data point with alias and value
 * @export
 * @interface MetricDataPoint
 */
export interface MetricDataPoint {
    /**
     * Metric alias name
     * @type {string}
     * @memberof MetricDataPoint
     */
    alias: string;
    /**
     * Aggregated metric value
     * @type {number}
     * @memberof MetricDataPoint
     */
    value: number | null;
    /**
     * Aggregation function used
     * @type {AggregationFormulaOutput}
     * @memberof MetricDataPoint
     */
    aggregation: AggregationFormulaOutput;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum MetricNameInput {
    CALLS = "CALLS",
    CALLDURATION = "CALL_DURATION",
    SPARRCALLS = "SPARR_CALLS",
    SPARRCALLDURATION = "SPARR_CALL_DURATION",
    APPOINTMENTSCHEDULED = "APPOINTMENT_SCHEDULED",
    CREDITSCONSUMED = "CREDITS_CONSUMED",
    CREDITSCONSUMEDPHONENUMBERS = "CREDITS_CONSUMED_PHONE_NUMBERS",
    CREDITSCONSUMEDCALLSECONDS = "CREDITS_CONSUMED_CALL_SECONDS",
    CREDITSCONSUMEDEMAILS = "CREDITS_CONSUMED_EMAILS",
    CREDITSCONSUMEDLEADGENERATION = "CREDITS_CONSUMED_LEAD_GENERATION",
    CREDITSCONSUMEDLINKEDINSCRAPING = "CREDITS_CONSUMED_LINKED_IN_SCRAPING",
    CREDITSCONSUMEDCOURSES = "CREDITS_CONSUMED_COURSES",
    CREDITSTOTAL = "CREDITS_TOTAL",
    CREDITSTOTALPHONENUMBERS = "CREDITS_TOTAL_PHONE_NUMBERS",
    CREDITSTOTALCALLSECONDS = "CREDITS_TOTAL_CALL_SECONDS",
    CREDITSTOTALEMAILS = "CREDITS_TOTAL_EMAILS",
    CREDITSTOTALLEADGENERATION = "CREDITS_TOTAL_LEAD_GENERATION",
    CREDITSTOTALLINKEDINSCRAPING = "CREDITS_TOTAL_LINKED_IN_SCRAPING",
    CREDITSTOTALCOURSES = "CREDITS_TOTAL_COURSES",
    CREDITBURNRATE = "CREDIT_BURN_RATE",
    CREDITBURNRATEPHONENUMBERS = "CREDIT_BURN_RATE_PHONE_NUMBERS",
    CREDITBURNRATECALLSECONDS = "CREDIT_BURN_RATE_CALL_SECONDS",
    CREDITBURNRATEEMAILS = "CREDIT_BURN_RATE_EMAILS",
    CREDITBURNRATELEADGENERATION = "CREDIT_BURN_RATE_LEAD_GENERATION",
    CREDITBURNRATELINKEDINSCRAPING = "CREDIT_BURN_RATE_LINKED_IN_SCRAPING",
    CREDITBURNRATECOURSES = "CREDIT_BURN_RATE_COURSES",
    TOTALREVENUE = "TOTAL_REVENUE",
    PROFIT = "PROFIT",
    REVENUEBYSUBSCRIPTION = "REVENUE_BY_SUBSCRIPTION",
    REVENUEBYADDONS = "REVENUE_BY_ADD_ONS",
    MONTHLYRECURRINGREVENUE = "MONTHLY_RECURRING_REVENUE",
    ONETIMEREVENUE = "ONE_TIME_REVENUE",
    ACTIVESUBSCRIPTIONS = "ACTIVE_SUBSCRIPTIONS",
    NUMBEROFACTIVEPAYINGCUSTOMERS = "NUMBER_OF_ACTIVE_PAYING_CUSTOMERS",
    AVERAGEREVENUEPERACTIVEPAYINGCUSTOMER = "AVERAGE_REVENUE_PER_ACTIVE_PAYING_CUSTOMER",
    TOTALHOURSCONSUMED = "TOTAL_HOURS_CONSUMED",
    PROSPECTS = "PROSPECTS",
    INTERESTED = "INTERESTED",
    NOTINTERESTED = "NOT_INTERESTED",
    NEWCUSTOMERS = "NEW_CUSTOMERS"
}
/**
 * Simple metric request with column name, aggregation, and alias
 * @export
 * @interface MetricRequest
 */
export interface MetricRequest {
    /**
     * Metric name
     * @type {SparrModelsAnalyticsMetricName}
     * @memberof MetricRequest
     */
    name: SparrModelsAnalyticsMetricName;
    /**
     * How to aggregate the metric
     * @type {SparrModelsAnalyticsAggregationFormula}
     * @memberof MetricRequest
     */
    aggregation: SparrModelsAnalyticsAggregationFormula;
    /**
     * Response alias name for the metric
     * @type {string}
     * @memberof MetricRequest
     */
    alias: string;
}
/**
 *
 * @export
 * @interface MetricResponseDataPointInput
 */
export interface MetricResponseDataPointInput {
    /**
     * Timestamp of the data point
     * @type {string}
     * @memberof MetricResponseDataPointInput
     */
    timestamp: string;
    /**
     * Value which will be a string representation of integer or floating number
     * @type {string}
     * @memberof MetricResponseDataPointInput
     */
    value: string;
}
/**
 *
 * @export
 * @interface MetricsRequestInput
 */
export interface MetricsRequestInput {
    /**
     * Unique identifier for the metric request. This can be helped to co-relate the request and response
     * @type {string}
     * @memberof MetricsRequestInput
     */
    id: string;
    /**
     * Name of the metric
     * @type {MetricNameInput}
     * @memberof MetricsRequestInput
     */
    name: MetricNameInput;
    /**
     * Start date to get metric request
     * @type {string}
     * @memberof MetricsRequestInput
     */
    fromDate: string;
    /**
     * End date until get metric request
     * @type {string}
     * @memberof MetricsRequestInput
     */
    toDate: string;
    /**
     * Aggregation period for the metric request
     * @type {AggregationPeriod}
     * @memberof MetricsRequestInput
     */
    aggregationPeriod: AggregationPeriod;
    /**
     * Aggregation formula for the metric request
     * @type {AggregationFormulaInput}
     * @memberof MetricsRequestInput
     */
    aggregationFormula: AggregationFormulaInput;
}
/**
 *
 * @export
 * @interface MetricsResponseInput
 */
export interface MetricsResponseInput {
    /**
     * Unique identifier for the metric response. This will help co-relate the request and response
     * @type {string}
     * @memberof MetricsResponseInput
     */
    id: string;
    /**
     * Name of the metric
     * @type {MetricNameInput}
     * @memberof MetricsResponseInput
     */
    name: MetricNameInput;
    /**
     * List of data points for the metric response
     * @type {Array<MetricResponseDataPointInput>}
     * @memberof MetricsResponseInput
     */
    datapoints: Array<MetricResponseDataPointInput>;
}
/**
 *
 * @export
 * @interface Mission
 */
export interface Mission {
    /**
     * Full prompt instructions for LLM model
     * @type {string}
     * @memberof Mission
     */
    prompt?: string | null;
    /**
     * Objective of the mission
     * @type {string}
     * @memberof Mission
     */
    objective?: string | null;
    /**
     * Greeting message to be read by the AI agent
     * @type {string}
     * @memberof Mission
     */
    greeting: string | null;
    /**
     * Sequence of actions to be performed by the AI agent during the conversation.
     * @type {Array<Sequence>}
     * @memberof Mission
     */
    sequence?: Array<Sequence> | null;
    /**
     * Conclusion message to be read by the AI agent
     * @type {string}
     * @memberof Mission
     */
    farewell?: string | null;
}
/**
 * FileUpload represents information about uploaded files in the system
 * @export
 * @interface ModelFile
 */
export interface ModelFile {
    /**
     * The user who created.
     * @type {string}
     * @memberof ModelFile
     */
    createdBy?: string;
    /**
     * The date and time it was created.
     * @type {string}
     * @memberof ModelFile
     */
    createdAt?: string;
    /**
     * The user who last updated.
     * @type {string}
     * @memberof ModelFile
     */
    updatedBy?: string;
    /**
     * The date and time when it was last updated.
     * @type {string}
     * @memberof ModelFile
     */
    updatedAt?: string;
    /**
     * The workspace of the entity.
     * @type {string}
     * @memberof ModelFile
     */
    orgId?: string;
    /**
     * The original name of the uploaded file
     * @type {string}
     * @memberof ModelFile
     */
    filename: string;
    /**
     * The signed storage URL where the file is stored.
     * @type {string}
     * @memberof ModelFile
     */
    file_url: string;
    /**
     * The unique identifier of the file
     * @type {string}
     * @memberof ModelFile
     */
    id?: string;
}
/**
 * Module represents a module that can be used in a course
 * @export
 * @interface Module
 */
export interface Module {
    /**
     * The user who created.
     * @type {string}
     * @memberof Module
     */
    createdBy?: string;
    /**
     * The date and time it was created.
     * @type {string}
     * @memberof Module
     */
    createdAt?: string;
    /**
     * The user who last updated.
     * @type {string}
     * @memberof Module
     */
    updatedBy?: string;
    /**
     * The date and time when it was last updated.
     * @type {string}
     * @memberof Module
     */
    updatedAt?: string;
    /**
     * The workspace of the entity.
     * @type {string}
     * @memberof Module
     */
    orgId?: string;
    /**
     * The name of the module
     * @type {string}
     * @memberof Module
     */
    name: string;
    /**
     * The description of the module
     * @type {string}
     * @memberof Module
     */
    description: string;
    /**
     * The tags of the module
     * @type {Array<string>}
     * @memberof Module
     */
    tags?: Array<string> | null;
    /**
     * The difficulty level of the module
     * @type {string}
     * @memberof Module
     */
    difficultyLevel: string;
    /**
     * The ID of the persona
     * @type {string}
     * @memberof Module
     */
    personaId: string;
    /**
     * The name of the persona
     * @type {string}
     * @memberof Module
     */
    personaName: string | null;
    /**
     * The ID of the scenario
     * @type {string}
     * @memberof Module
     */
    scenarioId: string;
    /**
     * The name of the scenario
     * @type {string}
     * @memberof Module
     */
    scenarioName: string | null;
    /**
     * The expected completion score of the module out of 100
     * @type {number}
     * @memberof Module
     */
    passingScorePercentage: number;
    /**
     * The unique identifier of the module
     * @type {string}
     * @memberof Module
     */
    id?: string;
    /**
     * The ID of the course
     * @type {string}
     * @memberof Module
     */
    courseId: string;
    /**
     * The name of the course
     * @type {string}
     * @memberof Module
     */
    courseName: string | null;
    /**
     * The order of the module in the course
     * @type {number}
     * @memberof Module
     */
    moduleOrder: number;
}
/**
 *
 * @export
 * @interface ModuleAnalytics
 */
export interface ModuleAnalytics {
    /**
     * The module information
     * @type {Module}
     * @memberof ModuleAnalytics
     */
    module: Module;
    /**
     * The number of attempts
     * @type {number}
     * @memberof ModuleAnalytics
     */
    numberOfAttempts: number;
    /**
     * The status of the last attempt
     * @type {ModuleAttemptStatus}
     * @memberof ModuleAnalytics
     */
    lastAttemptStatus: ModuleAttemptStatus;
    /**
     * Whether the module is completed
     * @type {boolean}
     * @memberof ModuleAnalytics
     */
    isModuleCompleted: boolean;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum ModuleAttemptStatus {
    PASSED = "PASSED",
    FAILED = "FAILED",
    NOTATTEMPTED = "NOT_ATTEMPTED"
}
/**
 *
 * @export
 * @interface ModuleCore
 */
export interface ModuleCore {
    /**
     * The name of the module
     * @type {string}
     * @memberof ModuleCore
     */
    name: string;
    /**
     * The description of the module
     * @type {string}
     * @memberof ModuleCore
     */
    description: string;
    /**
     * The tags of the module
     * @type {Array<string>}
     * @memberof ModuleCore
     */
    tags?: Array<string> | null;
    /**
     * The difficulty level of the module
     * @type {string}
     * @memberof ModuleCore
     */
    difficultyLevel: string;
    /**
     * The ID of the persona
     * @type {string}
     * @memberof ModuleCore
     */
    personaId: string;
    /**
     * The name of the persona
     * @type {string}
     * @memberof ModuleCore
     */
    personaName: string | null;
    /**
     * The ID of the scenario
     * @type {string}
     * @memberof ModuleCore
     */
    scenarioId: string;
    /**
     * The name of the scenario
     * @type {string}
     * @memberof ModuleCore
     */
    scenarioName: string | null;
    /**
     * The expected completion score of the module out of 100
     * @type {number}
     * @memberof ModuleCore
     */
    passingScorePercentage: number;
}
/**
 *
 * @export
 * @interface ModuleUpdateRequest
 */
export interface ModuleUpdateRequest {
    /**
     * The name of the module
     * @type {string}
     * @memberof ModuleUpdateRequest
     */
    name: string;
    /**
     * The description of the module
     * @type {string}
     * @memberof ModuleUpdateRequest
     */
    description: string;
    /**
     * The tags of the module
     * @type {Array<string>}
     * @memberof ModuleUpdateRequest
     */
    tags?: Array<string> | null;
    /**
     * The difficulty level of the module
     * @type {string}
     * @memberof ModuleUpdateRequest
     */
    difficultyLevel: string;
    /**
     * The ID of the persona
     * @type {string}
     * @memberof ModuleUpdateRequest
     */
    personaId: string;
    /**
     * The name of the persona
     * @type {string}
     * @memberof ModuleUpdateRequest
     */
    personaName: string | null;
    /**
     * The ID of the scenario
     * @type {string}
     * @memberof ModuleUpdateRequest
     */
    scenarioId: string;
    /**
     * The name of the scenario
     * @type {string}
     * @memberof ModuleUpdateRequest
     */
    scenarioName: string | null;
    /**
     * The expected completion score of the module out of 100
     * @type {number}
     * @memberof ModuleUpdateRequest
     */
    passingScorePercentage: number;
    /**
     *
     * @type {string}
     * @memberof ModuleUpdateRequest
     */
    id?: string | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum NegotiationStyle {
    HardBargainer = "hard bargainer",
    FriendlyNegotiator = "friendly negotiator",
    NonNegotiator = "non-negotiator"
}
/**
 * Defines how to determine the next step
 * @export
 * @interface NextStepResolver
 */
export interface NextStepResolver {
    /**
     * Array of conditions to evaluate
     * @type {Array<Condition>}
     * @memberof NextStepResolver
     */
    conditions?: Array<Condition> | null;
    /**
     * Direct next step ID
     * @type {string}
     * @memberof NextStepResolver
     */
    nextStepId?: string | null;
}
/**
 * No authentication configuration
 * @export
 * @interface NoAuth
 */
export interface NoAuth {
    /**
     * The type of authentication
     * @type {string}
     * @memberof NoAuth
     */
    authType?: NoAuthAuthTypeEnum;
}
/**
    * @export
    * @enum {string}
    */
export declare enum NoAuthAuthTypeEnum {
    Noauth = "noauth"
}
/**
 *
 * @export
 * @interface NoAuthCredentials
 */
export interface NoAuthCredentials {
    /**
     * Credential type identifier
     * @type {string}
     * @memberof NoAuthCredentials
     */
    credentialsType?: NoAuthCredentialsCredentialsTypeEnum;
}
/**
    * @export
    * @enum {string}
    */
export declare enum NoAuthCredentialsCredentialsTypeEnum {
    Noauth = "noauth"
}
/**
 *
 * @export
 * @interface NumberPurchaseRequest
 */
export interface NumberPurchaseRequest {
    /**
     *
     * @type {string}
     * @memberof NumberPurchaseRequest
     */
    countryCode: string;
    /**
     *
     * @type {string}
     * @memberof NumberPurchaseRequest
     */
    phoneNumber: string;
}
/**
 * OAuth authentication configuration
 * @export
 * @interface OAuth
 */
export interface OAuth {
    /**
     * The type of authentication
     * @type {string}
     * @memberof OAuth
     */
    authType?: OAuthAuthTypeEnum;
    /**
     * The client ID for the OAuth app
     * @type {string}
     * @memberof OAuth
     */
    clientId: string;
    /**
     * The client secret for the OAuth app
     * @type {string}
     * @memberof OAuth
     */
    clientSecret: string;
    /**
     * The redirect URI for the OAuth app
     * @type {string}
     * @memberof OAuth
     */
    redirectUri: string;
    /**
     * The scopes for the OAuth app
     * @type {Array<string>}
     * @memberof OAuth
     */
    scopes?: Array<string> | null;
    /**
     * The authorization URL for the OAuth app
     * @type {string}
     * @memberof OAuth
     */
    authUrl: string;
    /**
     * The token URL for the OAuth app
     * @type {string}
     * @memberof OAuth
     */
    tokenUrl: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum OAuthAuthTypeEnum {
    Oauth = "oauth"
}
/**
 *
 * @export
 * @interface OAuthCredentials
 */
export interface OAuthCredentials {
    /**
     * Credential type identifier
     * @type {string}
     * @memberof OAuthCredentials
     */
    credentialsType?: OAuthCredentialsCredentialsTypeEnum;
    /**
     * The code for the OAuth app
     * @type {string}
     * @memberof OAuthCredentials
     */
    code?: string | null;
    /**
     * The access token for the OAuth app
     * @type {string}
     * @memberof OAuthCredentials
     */
    accessToken?: string | null;
    /**
     * The refresh token for the OAuth app
     * @type {string}
     * @memberof OAuthCredentials
     */
    refreshToken?: string | null;
    /**
     * The expiration date of the access token
     * @type {string}
     * @memberof OAuthCredentials
     */
    expiresAt?: string | null;
}
/**
    * @export
    * @enum {string}
    */
export declare enum OAuthCredentialsCredentialsTypeEnum {
    Oauth = "oauth"
}
/**
 *
 * @export
 * @interface Objection
 */
export interface Objection {
    /**
     * The objection to be handled
     * @type {string}
     * @memberof Objection
     */
    objection: string;
    /**
     * The rebuttal to the objection
     * @type {string}
     * @memberof Objection
     */
    rebuttal: string;
}
/**
 *
 * @export
 * @interface OrgUsersPriceCredits
 */
export interface OrgUsersPriceCredits {
    /**
     *
     * @type {OrganizationOutput}
     * @memberof OrgUsersPriceCredits
     */
    organization: OrganizationOutput;
    /**
     *
     * @type {Array<User>}
     * @memberof OrgUsersPriceCredits
     */
    users: Array<User>;
    /**
     *
     * @type {Array<Price>}
     * @memberof OrgUsersPriceCredits
     */
    prices?: Array<Price> | null;
    /**
     *
     * @type {Array<Credit>}
     * @memberof OrgUsersPriceCredits
     */
    credits?: Array<Credit> | null;
    /**
     *
     * @type {string}
     * @memberof OrgUsersPriceCredits
     */
    resellerAdminUserCredentials?: string | null;
}
/**
 *
 * @export
 * @interface OrgWithCourseAssignment
 */
export interface OrgWithCourseAssignment {
    /**
     *
     * @type {OrganizationOutput}
     * @memberof OrgWithCourseAssignment
     */
    organization: OrganizationOutput;
    /**
     * Course assignment status (assigned/unassigned)
     * @type {CourseAssignmentStatus}
     * @memberof OrgWithCourseAssignment
     */
    status?: CourseAssignmentStatus;
}
/**
 *
 * @export
 * @interface OrgWithUsers
 */
export interface OrgWithUsers {
    /**
     *
     * @type {OrganizationOutput}
     * @memberof OrgWithUsers
     */
    organization: OrganizationOutput;
    /**
     *
     * @type {Array<User>}
     * @memberof OrgWithUsers
     */
    users: Array<User>;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum OrganizationInitializationStatus {
    PENDING = "PENDING",
    COMPLETED = "COMPLETED",
    FAILED = "FAILED"
}
/**
 * Organization represents the business using Trata and all users are associated to this business entity
 * @export
 * @interface OrganizationInput
 */
export interface OrganizationInput {
    /**
     * Name of the organization
     * @type {string}
     * @memberof OrganizationInput
     */
    name: string;
    /**
     * Address of the organization
     * @type {AddressInput}
     * @memberof OrganizationInput
     */
    address?: AddressInput | null;
    /**
     * Tax details of the organization
     * @type {TaxDetailsInput}
     * @memberof OrganizationInput
     */
    tax?: TaxDetailsInput | null;
    /**
     * External references for the organization
     * @type {Array<ExternalServiceProviderInput>}
     * @memberof OrganizationInput
     */
    externalReferenceIds?: Array<ExternalServiceProviderInput> | null;
    /**
     * Billing email address of the organization
     * @type {string}
     * @memberof OrganizationInput
     */
    billingEmailAddress?: string | null;
    /**
     * Website URL of the organization
     * @type {string}
     * @memberof OrganizationInput
     */
    websiteUrl?: string | null;
    /**
     * Configurations for all the agents going to be created in this org
     * @type {AgentConfig}
     * @memberof OrganizationInput
     */
    agentConfig?: AgentConfig | null;
    /**
     * Application type for the organization
     * @type {AppEnumInput}
     * @memberof OrganizationInput
     */
    app?: AppEnumInput | null;
    /**
     * Type of the organization
     * @type {string}
     * @memberof OrganizationInput
     */
    orgType?: string | null;
    /**
     * Additional information about the organization
     * @type {string}
     * @memberof OrganizationInput
     */
    additionalInfo?: string | null;
}
/**
 * Organization represents the business using Trata and all users are associated to this business entity
 * @export
 * @interface OrganizationOutput
 */
export interface OrganizationOutput {
    /**
     *
     * @type {string}
     * @memberof OrganizationOutput
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationOutput
     */
    name?: string;
    /**
     *
     * @type {AgentConfig}
     * @memberof OrganizationOutput
     */
    config: AgentConfig;
    /**
     *
     * @type {AddressOutput}
     * @memberof OrganizationOutput
     */
    address: AddressOutput | null;
    /**
     *
     * @type {TaxDetailsOutput}
     * @memberof OrganizationOutput
     */
    tax: TaxDetailsOutput | null;
    /**
     *
     * @type {boolean}
     * @memberof OrganizationOutput
     */
    isActiveSubscription?: boolean;
    /**
     *
     * @type {string}
     * @memberof OrganizationOutput
     */
    billingEmailAddress?: string | null;
    /**
     *
     * @type {string}
     * @memberof OrganizationOutput
     */
    websiteUrl?: string | null;
    /**
     *
     * @type {Array<ExternalServiceProviderOutput>}
     * @memberof OrganizationOutput
     */
    externalReferenceIds: Array<ExternalServiceProviderOutput> | null;
    /**
     *
     * @type {OrganizationInitializationStatus}
     * @memberof OrganizationOutput
     */
    isInitialized?: OrganizationInitializationStatus;
    /**
     *
     * @type {string}
     * @memberof OrganizationOutput
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationOutput
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationOutput
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationOutput
     */
    updatedAt?: string;
    /**
     *
     * @type {object}
     * @memberof OrganizationOutput
     */
    internalProps: object | null;
    /**
     *
     * @type {object}
     * @memberof OrganizationOutput
     */
    adminProps: object | null;
    /**
     * If the Organization is created by reseller, this field will have the reseller org id as the parent organization id
     * @type {string}
     * @memberof OrganizationOutput
     */
    parentOrgId?: string;
    /**
     * Type of the organization. Currently only CONSUMER & RESELLER are supported
     * @type {string}
     * @memberof OrganizationOutput
     */
    orgType?: string | null;
    /**
     *
     * @type {AppEnumOutput}
     * @memberof OrganizationOutput
     */
    app?: AppEnumOutput;
    /**
     *
     * @type {string}
     * @memberof OrganizationOutput
     */
    status?: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationOutput
     */
    additionalInfo?: string | null;
}
/**
 *
 * @export
 * @interface OrganizationSettings
 */
export interface OrganizationSettings {
    /**
     *
     * @type {string}
     * @memberof OrganizationSettings
     */
    name?: string | null;
    /**
     *
     * @type {string}
     * @memberof OrganizationSettings
     */
    domain?: string | null;
    /**
     *
     * @type {string}
     * @memberof OrganizationSettings
     */
    brandColor?: string | null;
    /**
     *
     * @type {string}
     * @memberof OrganizationSettings
     */
    buttonColor?: string | null;
    /**
     *
     * @type {string}
     * @memberof OrganizationSettings
     */
    secondaryColor?: string | null;
    /**
     *
     * @type {string}
     * @memberof OrganizationSettings
     */
    textColor?: string | null;
    /**
     *
     * @type {string}
     * @memberof OrganizationSettings
     */
    favicon?: string | null;
    /**
     *
     * @type {string}
     * @memberof OrganizationSettings
     */
    faviconUrl?: string | null;
    /**
     *
     * @type {string}
     * @memberof OrganizationSettings
     */
    logo?: string | null;
    /**
     *
     * @type {string}
     * @memberof OrganizationSettings
     */
    logoUrl?: string | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum PatienceLevel {
    Impatient = "impatient",
    Neutral = "neutral",
    VeryPatient = "very patient"
}
/**
 * Persona represents a persona that can be used in a scenario
 * @export
 * @interface Persona
 */
export interface Persona {
    /**
     * The user who created.
     * @type {string}
     * @memberof Persona
     */
    createdBy?: string;
    /**
     * The date and time it was created.
     * @type {string}
     * @memberof Persona
     */
    createdAt?: string;
    /**
     * The user who last updated.
     * @type {string}
     * @memberof Persona
     */
    updatedBy?: string;
    /**
     * The date and time when it was last updated.
     * @type {string}
     * @memberof Persona
     */
    updatedAt?: string;
    /**
     * The workspace of the entity.
     * @type {string}
     * @memberof Persona
     */
    orgId?: string;
    /**
     * The name of the persona
     * @type {string}
     * @memberof Persona
     */
    name: string;
    /**
     * The title of the persona
     * @type {string}
     * @memberof Persona
     */
    title: string;
    /**
     * The context of the persona
     * @type {string}
     * @memberof Persona
     */
    context: string;
    /**
     * The voice of the persona
     * @type {SparrVoiceOutput}
     * @memberof Persona
     */
    voice: SparrVoiceOutput;
    /**
     * The demeanor of the persona
     * @type {SparrDemeanorOutput}
     * @memberof Persona
     */
    demeanor: SparrDemeanorOutput;
    /**
     * The additional background of the persona
     * @type {string}
     * @memberof Persona
     */
    additionalBackground: string;
    /**
     * The work history of the persona
     * @type {Array<SparrWorkDetails>}
     * @memberof Persona
     */
    workHistory: Array<SparrWorkDetails>;
    /**
     * The LinkedIn URL of the persona
     * @type {string}
     * @memberof Persona
     */
    linkedInUrl: string;
    /**
     * The Twitter URL of the persona
     * @type {string}
     * @memberof Persona
     */
    twitterUrl: string | null;
    /**
     * The website URL of the persona
     * @type {string}
     * @memberof Persona
     */
    blogUrl: string | null;
    /**
     * Whether the persona is inherited from the parent persona
     * @type {boolean}
     * @memberof Persona
     */
    isInherited?: boolean;
    /**
     * The profile picture URL of the persona
     * @type {string}
     * @memberof Persona
     */
    profilePictureUrl: string | null;
    /**
     * The status of the persona
     * @type {string}
     * @memberof Persona
     */
    status?: string;
    /**
     * The unique identifier of the persona
     * @type {string}
     * @memberof Persona
     */
    id?: string;
    /**
     * The version of the persona
     * @type {number}
     * @memberof Persona
     */
    version?: number;
}
/**
 *
 * @export
 * @interface PersonaAttributesAndTraits
 */
export interface PersonaAttributesAndTraits {
    /**
     *
     * @type {PatienceLevel | string}
     * @memberof PersonaAttributesAndTraits
     */
    patience_level?: PatienceLevel | string | null;
    /**
     *
     * @type {DecisionMakingStyle | string}
     * @memberof PersonaAttributesAndTraits
     */
    decision_making_style?: DecisionMakingStyle | string | null;
    /**
     *
     * @type {CommunicationStyle | string}
     * @memberof PersonaAttributesAndTraits
     */
    communication_style?: CommunicationStyle | string | null;
    /**
     *
     * @type {Adaptability | string}
     * @memberof PersonaAttributesAndTraits
     */
    adaptability?: Adaptability | string | null;
    /**
     *
     * @type {FrustrationTolerance | string}
     * @memberof PersonaAttributesAndTraits
     */
    frustration_tolerance?: FrustrationTolerance | string | null;
    /**
     *
     * @type {EngagementLevel | string}
     * @memberof PersonaAttributesAndTraits
     */
    engagement_level?: EngagementLevel | string | null;
    /**
     *
     * @type {InteractionTone | string}
     * @memberof PersonaAttributesAndTraits
     */
    preferred_tone?: InteractionTone | string | null;
    /**
     *
     * @type {NegotiationStyle | string}
     * @memberof PersonaAttributesAndTraits
     */
    negotiation_style?: NegotiationStyle | string | null;
}
/**
 *
 * @export
 * @interface PersonaCore
 */
export interface PersonaCore {
    /**
     * The name of the persona
     * @type {string}
     * @memberof PersonaCore
     */
    name: string;
    /**
     * The title of the persona
     * @type {string}
     * @memberof PersonaCore
     */
    title: string;
    /**
     * The context of the persona
     * @type {string}
     * @memberof PersonaCore
     */
    context: string;
    /**
     * The voice of the persona
     * @type {SparrVoiceInput}
     * @memberof PersonaCore
     */
    voice: SparrVoiceInput;
    /**
     * The demeanor of the persona
     * @type {SparrDemeanorInput}
     * @memberof PersonaCore
     */
    demeanor: SparrDemeanorInput;
    /**
     * The additional background of the persona
     * @type {string}
     * @memberof PersonaCore
     */
    additionalBackground: string;
    /**
     * The work history of the persona
     * @type {Array<SparrWorkDetails>}
     * @memberof PersonaCore
     */
    workHistory: Array<SparrWorkDetails>;
    /**
     * The LinkedIn URL of the persona
     * @type {string}
     * @memberof PersonaCore
     */
    linkedInUrl: string;
    /**
     * The Twitter URL of the persona
     * @type {string}
     * @memberof PersonaCore
     */
    twitterUrl: string | null;
    /**
     * The website URL of the persona
     * @type {string}
     * @memberof PersonaCore
     */
    blogUrl: string | null;
    /**
     * Whether the persona is inherited from the parent persona
     * @type {boolean}
     * @memberof PersonaCore
     */
    isInherited?: boolean;
    /**
     * The profile picture URL of the persona
     * @type {string}
     * @memberof PersonaCore
     */
    profilePictureUrl: string | null;
    /**
     * The status of the persona
     * @type {string}
     * @memberof PersonaCore
     */
    status?: string;
}
/**
 *
 * @export
 * @interface PersonaSearchResponse
 */
export interface PersonaSearchResponse {
    /**
     *
     * @type {Array<Persona>}
     * @memberof PersonaSearchResponse
     */
    items: Array<Persona>;
    /**
     *
     * @type {number}
     * @memberof PersonaSearchResponse
     */
    total: number;
    /**
     *
     * @type {number}
     * @memberof PersonaSearchResponse
     */
    pages: number;
    /**
     *
     * @type {number}
     * @memberof PersonaSearchResponse
     */
    current_page: number;
    /**
     *
     * @type {number}
     * @memberof PersonaSearchResponse
     */
    page_size: number;
}
/**
 * Price tier details of the business
 * @export
 * @interface Price
 */
export interface Price {
    /**
     *
     * @type {string}
     * @memberof Price
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Price
     */
    parentOrgId?: string;
    /**
     *
     * @type {string}
     * @memberof Price
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof Price
     */
    priceName?: string;
    /**
     *
     * @type {string}
     * @memberof Price
     */
    description?: string;
    /**
     * Determines customer/reseller using custom price or default price
     * @type {boolean}
     * @memberof Price
     */
    isDefault?: boolean | null;
    /**
     * Currency of the price, e.g. USD, INR, EUR, GBP, etc.
     * @type {string}
     * @memberof Price
     */
    currency?: string;
    /**
     * Stripe price ID for this price tier
     * @type {string}
     * @memberof Price
     */
    stripePriceId?: string | null;
    /**
     * Stripe product ID for this price tier
     * @type {string}
     * @memberof Price
     */
    stripeProductId?: string | null;
    /**
     * Interval of the price, e.g. monthly, yearly, etc.
     * @type {PriceInterval}
     * @memberof Price
     */
    priceInterval?: PriceInterval | null;
    /**
     * List of price items included in this price tier
     * @type {Array<PriceItem>}
     * @memberof Price
     */
    priceItems?: Array<PriceItem> | null;
    /**
     *
     * @type {string}
     * @memberof Price
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof Price
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof Price
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof Price
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum PriceInterval {
    OneTime = "one_time",
    Monthly = "monthly",
    Quarterly = "quarterly",
    Yearly = "yearly"
}
/**
 * Price item details for a price tier
 * @export
 * @interface PriceItem
 */
export interface PriceItem {
    /**
     * Name of the price item
     * @type {string}
     * @memberof PriceItem
     */
    name?: string;
    /**
     * Description of the price item
     * @type {string}
     * @memberof PriceItem
     */
    description?: string;
    /**
     * Quantity of the price item
     * @type {number}
     * @memberof PriceItem
     */
    quantity?: number | null;
    /**
     * Price of the price item in the lowest currency unit (e.g. cents, paise)
     * @type {number}
     * @memberof PriceItem
     */
    pricePerQuantity?: number | null;
    /**
     * Type of the credit
     * @type {CreditTypeEnum}
     * @memberof PriceItem
     */
    creditType?: CreditTypeEnum;
}
/**
 *
 * @export
 * @interface PricingRequest
 */
export interface PricingRequest {
    /**
     * Price name
     * @type {string}
     * @memberof PricingRequest
     */
    priceName: string;
    /**
     * Description
     * @type {string}
     * @memberof PricingRequest
     */
    description: string;
    /**
     * Currency
     * @type {string}
     * @memberof PricingRequest
     */
    currency: string;
    /**
     * Price interval
     * @type {PriceInterval}
     * @memberof PricingRequest
     */
    priceInterval: PriceInterval;
    /**
     * List of price items included in this price tier
     * @type {Array<PriceItem>}
     * @memberof PricingRequest
     */
    priceItems?: Array<PriceItem> | null;
}
/**
 *
 * @export
 * @interface ProductInput
 */
export interface ProductInput {
    /**
     * Product is active or not
     * @type {boolean}
     * @memberof ProductInput
     */
    active: boolean;
    /**
     * Default price of the product this is represented in the lowest currency denomination. Eg: 1000 for $10
     * @type {number}
     * @memberof ProductInput
     */
    defaultPrice: number;
    /**
     * Currency of the product
     * @type {string}
     * @memberof ProductInput
     */
    currency: ProductInputCurrencyEnum;
    /**
     * Description of the product
     * @type {string}
     * @memberof ProductInput
     */
    description: string;
    /**
     * Name of the product
     * @type {string}
     * @memberof ProductInput
     */
    name: string;
    /**
     * Product is shippable or not. Service is not shippable
     * @type {boolean}
     * @memberof ProductInput
     */
    shippable?: boolean;
    /**
     * List of features of the product
     * @type {Array<string>}
     * @memberof ProductInput
     */
    features?: Array<string> | null;
    /**
     * Product requires appointment scheduling or not
     * @type {boolean}
     * @memberof ProductInput
     */
    scheduleAppointment?: boolean;
    /**
     * Properties of the product
     * @type {object}
     * @memberof ProductInput
     */
    props?: object | null;
    /**
     * Tags for the product. This is used for grouping purpose. Eg: [\"gardening\", \"tools\"]
     * @type {Array<string>}
     * @memberof ProductInput
     */
    tags?: Array<string> | null;
    /**
     *
     * @type {Status}
     * @memberof ProductInput
     */
    status: Status;
    /**
     * List of agent ids which are accessible for this product
     * @type {Array<string>}
     * @memberof ProductInput
     */
    agentIds?: Array<string> | null;
}
/**
    * @export
    * @enum {string}
    */
export declare enum ProductInputCurrencyEnum {
    AED = "AED",
    AFN = "AFN",
    ALL = "ALL",
    AMD = "AMD",
    ANG = "ANG",
    AOA = "AOA",
    ARS = "ARS",
    AUD = "AUD",
    AWG = "AWG",
    AZN = "AZN",
    BAM = "BAM",
    BBD = "BBD",
    BDT = "BDT",
    BGN = "BGN",
    BHD = "BHD",
    BIF = "BIF",
    BMD = "BMD",
    BND = "BND",
    BOB = "BOB",
    BOV = "BOV",
    BRL = "BRL",
    BSD = "BSD",
    BTN = "BTN",
    BWP = "BWP",
    BYN = "BYN",
    BZD = "BZD",
    CAD = "CAD",
    CDF = "CDF",
    CHE = "CHE",
    CHF = "CHF",
    CHW = "CHW",
    CLF = "CLF",
    CLP = "CLP",
    CNY = "CNY",
    COP = "COP",
    COU = "COU",
    CRC = "CRC",
    CUC = "CUC",
    CUP = "CUP",
    CVE = "CVE",
    CZK = "CZK",
    DJF = "DJF",
    DKK = "DKK",
    DOP = "DOP",
    DZD = "DZD",
    EGP = "EGP",
    ERN = "ERN",
    ETB = "ETB",
    EUR = "EUR",
    FJD = "FJD",
    FKP = "FKP",
    GBP = "GBP",
    GEL = "GEL",
    GHS = "GHS",
    GIP = "GIP",
    GMD = "GMD",
    GNF = "GNF",
    GTQ = "GTQ",
    GYD = "GYD",
    HKD = "HKD",
    HNL = "HNL",
    HRK = "HRK",
    HTG = "HTG",
    HUF = "HUF",
    IDR = "IDR",
    ILS = "ILS",
    INR = "INR",
    IQD = "IQD",
    IRR = "IRR",
    ISK = "ISK",
    JMD = "JMD",
    JOD = "JOD",
    JPY = "JPY",
    KES = "KES",
    KGS = "KGS",
    KHR = "KHR",
    KMF = "KMF",
    KPW = "KPW",
    KRW = "KRW",
    KWD = "KWD",
    KYD = "KYD",
    KZT = "KZT",
    LAK = "LAK",
    LBP = "LBP",
    LKR = "LKR",
    LRD = "LRD",
    LSL = "LSL",
    LYD = "LYD",
    MAD = "MAD",
    MDL = "MDL",
    MGA = "MGA",
    MKD = "MKD",
    MMK = "MMK",
    MNT = "MNT",
    MOP = "MOP",
    MRU = "MRU",
    MUR = "MUR",
    MVR = "MVR",
    MWK = "MWK",
    MXN = "MXN",
    MXV = "MXV",
    MYR = "MYR",
    MZN = "MZN",
    NAD = "NAD",
    NGN = "NGN",
    NIO = "NIO",
    NOK = "NOK",
    NPR = "NPR",
    NZD = "NZD",
    OMR = "OMR",
    PAB = "PAB",
    PEN = "PEN",
    PGK = "PGK",
    PHP = "PHP",
    PKR = "PKR",
    PLN = "PLN",
    PYG = "PYG",
    QAR = "QAR",
    RON = "RON",
    RSD = "RSD",
    RUB = "RUB",
    RWF = "RWF",
    SAR = "SAR",
    SBD = "SBD",
    SCR = "SCR",
    SDG = "SDG",
    SEK = "SEK",
    SGD = "SGD",
    SHP = "SHP",
    SLE = "SLE",
    SLL = "SLL",
    SOS = "SOS",
    SRD = "SRD",
    SSP = "SSP",
    STN = "STN",
    SVC = "SVC",
    SYP = "SYP",
    SZL = "SZL",
    THB = "THB",
    TJS = "TJS",
    TMT = "TMT",
    TND = "TND",
    TOP = "TOP",
    TRY = "TRY",
    TTD = "TTD",
    TWD = "TWD",
    TZS = "TZS",
    UAH = "UAH",
    UGX = "UGX",
    USD = "USD",
    USN = "USN",
    UYI = "UYI",
    UYU = "UYU",
    UYW = "UYW",
    UZS = "UZS",
    VED = "VED",
    VES = "VES",
    VND = "VND",
    VUV = "VUV",
    WST = "WST",
    XAF = "XAF",
    XCD = "XCD",
    XOF = "XOF",
    XPF = "XPF",
    XSU = "XSU",
    XUA = "XUA",
    YER = "YER",
    ZAR = "ZAR",
    ZMW = "ZMW",
    ZWL = "ZWL"
}
/**
 * Product and services offered by the business
 * @export
 * @interface ProductOutput
 */
export interface ProductOutput {
    /**
     *
     * @type {string}
     * @memberof ProductOutput
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ProductOutput
     */
    orgId?: string;
    /**
     * Product is active or not
     * @type {boolean}
     * @memberof ProductOutput
     */
    active?: boolean;
    /**
     * Default price of the product this is represented in the lowest currency denomination. Eg: 1000 for $10
     * @type {number}
     * @memberof ProductOutput
     */
    defaultPrice?: number | null;
    /**
     *
     * @type {string}
     * @memberof ProductOutput
     */
    currency?: string | null;
    /**
     * Description of the product
     * @type {string}
     * @memberof ProductOutput
     */
    description?: string | null;
    /**
     * Name of the product
     * @type {string}
     * @memberof ProductOutput
     */
    name?: string;
    /**
     * Product is shippable or not. Service is not shippable
     * @type {boolean}
     * @memberof ProductOutput
     */
    shippable?: boolean;
    /**
     * List of features of the product
     * @type {Array<string>}
     * @memberof ProductOutput
     */
    features?: Array<string> | null;
    /**
     * Product requires appointment scheduling or not
     * @type {boolean}
     * @memberof ProductOutput
     */
    scheduleAppointment?: boolean;
    /**
     * Properties of the product
     * @type {object}
     * @memberof ProductOutput
     */
    props?: object | null;
    /**
     *
     * @type {Array<string>}
     * @memberof ProductOutput
     */
    tags?: Array<string> | null;
    /**
     *
     * @type {string}
     * @memberof ProductOutput
     */
    status: string;
    /**
     *
     * @type {string}
     * @memberof ProductOutput
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof ProductOutput
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof ProductOutput
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof ProductOutput
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @interface ProductWithAgents
 */
export interface ProductWithAgents {
    /**
     *
     * @type {ProductOutput}
     * @memberof ProductWithAgents
     */
    product: ProductOutput;
    /**
     *
     * @type {Array<AIAgentOutput>}
     * @memberof ProductWithAgents
     */
    agents?: Array<AIAgentOutput>;
}
/**
 *
 * @export
 * @interface PromptTemplate
 */
export interface PromptTemplate {
    /**
     *
     * @type {string}
     * @memberof PromptTemplate
     */
    prompt: string;
    /**
     *
     * @type {Array<Sequence>}
     * @memberof PromptTemplate
     */
    sequences: Array<Sequence>;
    /**
     *
     * @type {string}
     * @memberof PromptTemplate
     */
    role: string;
    /**
     *
     * @type {string}
     * @memberof PromptTemplate
     */
    roleDescription: string;
    /**
     *
     * @type {string}
     * @memberof PromptTemplate
     */
    name: string;
}
/**
 *
 * @export
 * @interface ProspectInput
 */
export interface ProspectInput {
    /**
     * Name of the prospect
     * @type {string}
     * @memberof ProspectInput
     */
    name?: string | null;
    /**
     * Email of the prospect
     * @type {string}
     * @memberof ProspectInput
     */
    email?: string | null;
    /**
     * Phone number of the prospect
     * @type {string}
     * @memberof ProspectInput
     */
    phoneNumber?: string | null;
    /**
     * External references for the prospect
     * @type {Array<ExternalReference>}
     * @memberof ProspectInput
     */
    externalReference?: Array<ExternalReference> | null;
    /**
     *
     * @type {ProspectStatus}
     * @memberof ProspectInput
     */
    status: ProspectStatus;
    /**
     * Props for the prospect
     * @type {object}
     * @memberof ProspectInput
     */
    prospectProps?: object | null;
}
/**
 * Prospects are the potential customers for business
 * @export
 * @interface ProspectOutput
 */
export interface ProspectOutput {
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    name?: string | null;
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    email?: string | null;
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    phoneNumber?: string | null;
    /**
     *
     * @type {Array<ExternalReference>}
     * @memberof ProspectOutput
     */
    externalReference: Array<ExternalReference> | null;
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    status: string;
    /**
     *
     * @type {object}
     * @memberof ProspectOutput
     */
    prospectProps: object | null;
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof ProspectOutput
     */
    updatedAt?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum ProspectStatus {
    NEW = "NEW",
    GENERALENQUIRY = "GENERAL_ENQUIRY",
    SCHEDULEDCALLBACKWITHBOT = "SCHEDULED_CALLBACK_WITH_BOT",
    SCHEDULEDAPPOINTMENTWITHPERSON = "SCHEDULED_APPOINTMENT_WITH_PERSON",
    SCHEDULEDAPPOINTMENTFORSERVICE = "SCHEDULED_APPOINTMENT_FOR_SERVICE",
    NOTINTERESTED = "NOT_INTERESTED",
    PRODUCTORDERPLACED = "PRODUCT_ORDER_PLACED",
    SERVICEORDERPLACED = "SERVICE_ORDER_PLACED"
}
/**
 *
 * @export
 * @interface ResellerBatchMetricsRequests
 */
export interface ResellerBatchMetricsRequests {
    /**
     *
     * @type {Array<string>}
     * @memberof ResellerBatchMetricsRequests
     */
    organizations?: Array<string> | null;
    /**
     *
     * @type {Array<MetricsRequestInput>}
     * @memberof ResellerBatchMetricsRequests
     */
    requests: Array<MetricsRequestInput>;
}
/**
 *
 * @export
 * @interface ResellerPaymentAccountDetails
 */
export interface ResellerPaymentAccountDetails {
    /**
     * Business name of the reseller
     * @type {string}
     * @memberof ResellerPaymentAccountDetails
     */
    businessName: string | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum Role {
    ADMIN = "ADMIN",
    READONLY = "READ_ONLY",
    OWNER = "OWNER",
    RESELLERADMIN = "RESELLER_ADMIN"
}
/**
 *
 * @export
 * @interface RoleTemplate
 */
export interface RoleTemplate {
    /**
     *
     * @type {string}
     * @memberof RoleTemplate
     */
    roleName: string;
    /**
     *
     * @type {string}
     * @memberof RoleTemplate
     */
    roleDescription: string;
}
/**
 * Scenario represents a sequence of steps that can be performed by an app
 * @export
 * @interface Scenario
 */
export interface Scenario {
    /**
     * The user who created.
     * @type {string}
     * @memberof Scenario
     */
    createdBy?: string;
    /**
     * The date and time it was created.
     * @type {string}
     * @memberof Scenario
     */
    createdAt?: string;
    /**
     * The user who last updated.
     * @type {string}
     * @memberof Scenario
     */
    updatedBy?: string;
    /**
     * The date and time when it was last updated.
     * @type {string}
     * @memberof Scenario
     */
    updatedAt?: string;
    /**
     * The workspace of the entity.
     * @type {string}
     * @memberof Scenario
     */
    orgId?: string;
    /**
     * The name of the scenario
     * @type {string}
     * @memberof Scenario
     */
    name: string;
    /**
     * The description of the scenario
     * @type {string}
     * @memberof Scenario
     */
    description: string;
    /**
     * The objections to be handled for the scenario
     * @type {Array<Objection>}
     * @memberof Scenario
     */
    objections: Array<Objection>;
    /**
     * The type of call to be used for this scenario
     * @type {string}
     * @memberof Scenario
     */
    callType?: string | null;
    /**
     * The goals to be achieved for the scenario
     * @type {Array<SparrModelsScenarioGoal>}
     * @memberof Scenario
     */
    goals: Array<SparrModelsScenarioGoal>;
    /**
     * The playbook to be followed for the scenario
     * @type {Array<Step>}
     * @memberof Scenario
     */
    playbook: Array<Step>;
    /**
     * Whether the scenario is inherited from the parent scenario
     * @type {boolean}
     * @memberof Scenario
     */
    isInherited?: boolean;
    /**
     * The ID of the evaluator
     * @type {string}
     * @memberof Scenario
     */
    evaluatorId?: string | null;
    /**
     * The status of the scenario
     * @type {string}
     * @memberof Scenario
     */
    status?: string;
    /**
     * The unique identifier of the scenario
     * @type {string}
     * @memberof Scenario
     */
    id?: string;
    /**
     * The version of the scenario
     * @type {number}
     * @memberof Scenario
     */
    version?: number;
}
/**
 *
 * @export
 * @interface ScenarioCore
 */
export interface ScenarioCore {
    /**
     * The name of the scenario
     * @type {string}
     * @memberof ScenarioCore
     */
    name: string;
    /**
     * The description of the scenario
     * @type {string}
     * @memberof ScenarioCore
     */
    description: string;
    /**
     * The objections to be handled for the scenario
     * @type {Array<Objection>}
     * @memberof ScenarioCore
     */
    objections: Array<Objection>;
    /**
     * The type of call to be used for this scenario
     * @type {string}
     * @memberof ScenarioCore
     */
    callType?: string | null;
    /**
     * The goals to be achieved for the scenario
     * @type {Array<GoalInput>}
     * @memberof ScenarioCore
     */
    goals: Array<GoalInput>;
    /**
     * The playbook to be followed for the scenario
     * @type {Array<Step>}
     * @memberof ScenarioCore
     */
    playbook: Array<Step>;
    /**
     * Whether the scenario is inherited from the parent scenario
     * @type {boolean}
     * @memberof ScenarioCore
     */
    isInherited?: boolean;
    /**
     * The ID of the evaluator
     * @type {string}
     * @memberof ScenarioCore
     */
    evaluatorId?: string | null;
    /**
     * The status of the scenario
     * @type {string}
     * @memberof ScenarioCore
     */
    status?: string;
}
/**
 *
 * @export
 * @interface ScenarioSearchResponse
 */
export interface ScenarioSearchResponse {
    /**
     *
     * @type {Array<Scenario>}
     * @memberof ScenarioSearchResponse
     */
    items: Array<Scenario>;
    /**
     *
     * @type {number}
     * @memberof ScenarioSearchResponse
     */
    total: number;
    /**
     *
     * @type {number}
     * @memberof ScenarioSearchResponse
     */
    pages: number;
    /**
     *
     * @type {number}
     * @memberof ScenarioSearchResponse
     */
    current_page: number;
    /**
     *
     * @type {number}
     * @memberof ScenarioSearchResponse
     */
    page_size: number;
}
/**
 *
 * @export
 * @interface Sequence
 */
export interface Sequence {
    /**
     * Name of the stage
     * @type {string}
     * @memberof Sequence
     */
    stageName: string;
    /**
     * Description of the stage
     * @type {string}
     * @memberof Sequence
     */
    description: string;
    /**
     * Other notes that AI agent should know in this stage of conversation
     * @type {string}
     * @memberof Sequence
     */
    otherNotes?: string | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum SortOrder {
    Asc = "asc",
    Desc = "desc"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum SparrAdaptability {
    OpenToChange = "open to change",
    Resistant = "resistant",
    Indifferent = "indifferent"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum SparrCommunicationStyle {
    Direct = "direct",
    Indirect = "indirect",
    Verbose = "verbose",
    Brief = "brief"
}
/**
 * Goal represents a collection of goals with weightages
 * @export
 * @interface SparrDbModelsGoal
 */
export interface SparrDbModelsGoal {
    /**
     * The user who created.
     * @type {string}
     * @memberof SparrDbModelsGoal
     */
    createdBy?: string;
    /**
     * The date and time it was created.
     * @type {string}
     * @memberof SparrDbModelsGoal
     */
    createdAt?: string;
    /**
     * The user who last updated.
     * @type {string}
     * @memberof SparrDbModelsGoal
     */
    updatedBy?: string;
    /**
     * The date and time when it was last updated.
     * @type {string}
     * @memberof SparrDbModelsGoal
     */
    updatedAt?: string;
    /**
     * The workspace of the entity.
     * @type {string}
     * @memberof SparrDbModelsGoal
     */
    orgId?: string;
    /**
     * The name of the goals collection
     * @type {string}
     * @memberof SparrDbModelsGoal
     */
    name: string;
    /**
     * The description of the goals collection
     * @type {string}
     * @memberof SparrDbModelsGoal
     */
    description: string;
    /**
     * The list of process goals
     * @type {Array<SparrModelsScenarioGoal>}
     * @memberof SparrDbModelsGoal
     */
    process_goals?: Array<SparrModelsScenarioGoal> | null;
    /**
     * The list of skills goals
     * @type {Array<SparrModelsScenarioGoal>}
     * @memberof SparrDbModelsGoal
     */
    skills_goals?: Array<SparrModelsScenarioGoal> | null;
    /**
     * The list of communication goals
     * @type {Array<SparrModelsScenarioGoal>}
     * @memberof SparrDbModelsGoal
     */
    communication_goals?: Array<SparrModelsScenarioGoal> | null;
    /**
     * The status of the goals collection
     * @type {string}
     * @memberof SparrDbModelsGoal
     */
    status?: string;
    /**
     * The unique identifier of the goals collection
     * @type {string}
     * @memberof SparrDbModelsGoal
     */
    id?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum SparrDecisionMakingStyle {
    Logical = "logical",
    Emotional = "emotional",
    Impulsive = "impulsive",
    Hesitant = "hesitant"
}
/**
 *
 * @export
 * @interface SparrDemeanorInput
 */
export interface SparrDemeanorInput {
    /**
     *
     * @type {SparrPersonaAttributesAndTraits}
     * @memberof SparrDemeanorInput
     */
    personaTraits?: SparrPersonaAttributesAndTraits | null;
    /**
     *
     * @type {SparrExcitementLevel | string}
     * @memberof SparrDemeanorInput
     */
    excitementLevel?: SparrExcitementLevel | string | null;
    /**
     *
     * @type {SparrRudenessLevel | string}
     * @memberof SparrDemeanorInput
     */
    rudenessLevel?: SparrRudenessLevel | string | null;
}
/**
 *
 * @export
 * @interface SparrDemeanorOutput
 */
export interface SparrDemeanorOutput {
    /**
     *
     * @type {SparrPersonaAttributesAndTraits}
     * @memberof SparrDemeanorOutput
     */
    personaTraits?: SparrPersonaAttributesAndTraits | null;
    /**
     *
     * @type {SparrExcitementLevel | string}
     * @memberof SparrDemeanorOutput
     */
    excitementLevel?: SparrExcitementLevel | string | null;
    /**
     *
     * @type {SparrRudenessLevel | string}
     * @memberof SparrDemeanorOutput
     */
    rudenessLevel?: SparrRudenessLevel | string | null;
}
/**
 *
 * @export
 * @interface SparrDialogLine
 */
export interface SparrDialogLine {
    /**
     *
     * @type {string}
     * @memberof SparrDialogLine
     */
    speaker: SparrDialogLineSpeakerEnum;
    /**
     *
     * @type {string}
     * @memberof SparrDialogLine
     */
    message: string;
    /**
     *
     * @type {string}
     * @memberof SparrDialogLine
     */
    timestamp: string;
    /**
     *
     * @type {string}
     * @memberof SparrDialogLine
     */
    message_id: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum SparrDialogLineSpeakerEnum {
    USER = "USER",
    AI = "AI",
    TOOL = "TOOL",
    AITOOLREQUEST = "AI - TOOL REQUEST"
}
/**
 *
 * @export
 * @interface SparrDialogLineWithSentiment
 */
export interface SparrDialogLineWithSentiment {
    /**
     *
     * @type {string}
     * @memberof SparrDialogLineWithSentiment
     */
    speaker: string;
    /**
     *
     * @type {string}
     * @memberof SparrDialogLineWithSentiment
     */
    message: string;
    /**
     *
     * @type {number}
     * @memberof SparrDialogLineWithSentiment
     */
    start_at_seconds: number;
    /**
     *
     * @type {number}
     * @memberof SparrDialogLineWithSentiment
     */
    end_at_seconds: number;
    /**
     *
     * @type {string}
     * @memberof SparrDialogLineWithSentiment
     */
    sentiment: SparrDialogLineWithSentimentSentimentEnum;
    /**
     *
     * @type {number}
     * @memberof SparrDialogLineWithSentiment
     */
    sentiment_score: number;
    /**
     *
     * @type {string}
     * @memberof SparrDialogLineWithSentiment
     */
    id: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum SparrDialogLineWithSentimentSentimentEnum {
    POSITIVE = "POSITIVE",
    NEGATIVE = "NEGATIVE",
    NEUTRAL = "NEUTRAL"
}
/**
 *
 * @export
 * @interface SparrDialogLineWithTimestamp
 */
export interface SparrDialogLineWithTimestamp {
    /**
     *
     * @type {string}
     * @memberof SparrDialogLineWithTimestamp
     */
    speaker: string;
    /**
     *
     * @type {string}
     * @memberof SparrDialogLineWithTimestamp
     */
    message: string;
    /**
     *
     * @type {string}
     * @memberof SparrDialogLineWithTimestamp
     */
    message_id: string;
    /**
     *
     * @type {number}
     * @memberof SparrDialogLineWithTimestamp
     */
    start_at_milliseconds: number;
    /**
     *
     * @type {number}
     * @memberof SparrDialogLineWithTimestamp
     */
    end_at_milliseconds: number;
    /**
     *
     * @type {Array<DialogWordWithTimestamp>}
     * @memberof SparrDialogLineWithTimestamp
     */
    words: Array<DialogWordWithTimestamp>;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum SparrEngagementLevel {
    HighlyEngaged = "highly engaged",
    Distracted = "distracted",
    Uninterested = "uninterested"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum SparrExcitementLevel {
    Neutral = "neutral",
    Interested = "interested",
    Excited = "excited",
    Overjoyed = "overjoyed",
    Euphoric = "euphoric"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum SparrFrustrationTolerance {
    Neutral = "neutral",
    QuickToAnger = "quick to anger",
    Understanding = "understanding"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum SparrInteractionTone {
    Casual = "casual",
    Professional = "professional",
    Friendly = "friendly",
    Authoritative = "authoritative"
}
/**
 *
 * @export
 * @interface SparrLanguageAccentCombo
 */
export interface SparrLanguageAccentCombo {
    /**
     * The language of the voice
     * @type {SparrVoiceLanguage}
     * @memberof SparrLanguageAccentCombo
     */
    language: SparrVoiceLanguage;
    /**
     * The accent of the voice
     * @type {SparrVoiceAccent}
     * @memberof SparrLanguageAccentCombo
     */
    accent: SparrVoiceAccent;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum SparrModelsAnalyticsAggregationFormula {
    COUNT = "COUNT",
    SUM = "SUM",
    AVG = "AVG",
    MIN = "MIN",
    MAX = "MAX",
    MEDIAN = "MEDIAN"
}
/**
 *
 * @export
 * @interface SparrModelsAnalyticsBatchMetricsRequests
 */
export interface SparrModelsAnalyticsBatchMetricsRequests {
    /**
     *
     * @type {Array<SparrModelsAnalyticsMetricsRequest>}
     * @memberof SparrModelsAnalyticsBatchMetricsRequests
     */
    requests: Array<SparrModelsAnalyticsMetricsRequest>;
    /**
     * Optional list of user IDs to filter metrics by
     * @type {Array<string>}
     * @memberof SparrModelsAnalyticsBatchMetricsRequests
     */
    userIds?: Array<string> | null;
}
/**
 *
 * @export
 * @interface SparrModelsAnalyticsBatchMetricsResponse
 */
export interface SparrModelsAnalyticsBatchMetricsResponse {
    /**
     *
     * @type {Array<SparrModelsAnalyticsMetricsResponse>}
     * @memberof SparrModelsAnalyticsBatchMetricsResponse
     */
    responses: Array<SparrModelsAnalyticsMetricsResponse>;
}
/**
 * Expected output of the post conversation task
 * @export
 * @interface SparrModelsAnalyticsConversationAnalyticsModel
 */
export interface SparrModelsAnalyticsConversationAnalyticsModel {
    /**
     * This is a sparring conversation. So you have to evaluate the role player\'s conversation skill and provide feedback summary on the same to role player when the role player is conversing in the sparring mode. You shouldn\'t evaluate the AI responses. Keep the feedback summary fun, quirky and engaging. Use American style of writing, use phrases where appropriate. Make it more subtle engaging and also more interesting. Dont be robotic or too formal.
     * @type {string}
     * @memberof SparrModelsAnalyticsConversationAnalyticsModel
     */
    evaluation_summary: string | null;
    /**
     * List of top insights from the role player\'s conversation details. This should be a list of 3-5 points based on the conversation details.
     * @type {Array<string>}
     * @memberof SparrModelsAnalyticsConversationAnalyticsModel
     */
    top_insights: Array<string> | null;
    /**
     * Provide a list of what went well in the conversation. Note that this is a sparring conversation. So you have to evaluate the sales representative\'s conversation skill and provide feedback on the same to sales representative when the sales representative is conversing in the sparring mode. You shouldn\'t evaluate the AI responses. Your evaluation should be based on the metrics provided in the model. This should be a list of 3-5 points based on the metrics name and description provided in the model. Give the list with 1-2 sentences for each point. Use American style of writing, use phrases where appropriate. Make it more subtle engaging and also more interesting. Dont be robotic or too formal.
     * @type {Array<string>}
     * @memberof SparrModelsAnalyticsConversationAnalyticsModel
     */
    what_went_well: Array<string> | null;
    /**
     * Provide a list of what can be improved in the conversation. Note that this is a sparring conversation. So you have to evaluate the sales representative\'s conversation skill and provide feedback on the same to sales representative when the sales representative is conversing in the sparring mode. You shouldn\'t evaluate the AI responses. Your evaluation should be based on the metrics provided in the model. This should be a list of 2-3 points based on the metrics name and description provided in the model. Give the list with 1-2 sentences for each point. Use American style of writing, use phrases where appropriate. Make it more subtle engaging and also more interesting. Dont be robotic or too formal.
     * @type {Array<string>}
     * @memberof SparrModelsAnalyticsConversationAnalyticsModel
     */
    what_can_be_improved: Array<string> | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum SparrModelsAnalyticsMetricName {
    CALLS = "CALLS",
    CallCount = "callCount",
    CALLDURATION = "CALL_DURATION",
    TALKRATIO = "TALK_RATIO",
    AVERAGEFILLERWORDSCOUNT = "AVERAGE_FILLER_WORDS_COUNT",
    AVERAGEOVERALLSCORE = "AVERAGE_OVERALL_SCORE",
    AVERAGELONGESTMONOLOGUE = "AVERAGE_LONGEST_MONOLOGUE",
    AVERAGEMODULESCOMPLETED = "AVERAGE_MODULES_COMPLETED",
    AVERAGEACTIVEDAYS = "AVERAGE_ACTIVE_DAYS",
    ProcessAdherenceScore = "processAdherenceScore",
    SkillsScore = "skillsScore",
    CommunicationScore = "communicationScore",
    UserTalkingRatio = "userTalkingRatio",
    FillerWords = "fillerWords",
    OverallScore = "overallScore",
    ModulesCompleted = "modulesCompleted",
    CallDuration = "callDuration",
    LongestMonologue = "longestMonologue"
}
/**
 *
 * @export
 * @interface SparrModelsAnalyticsMetricResponseDataPoint
 */
export interface SparrModelsAnalyticsMetricResponseDataPoint {
    /**
     * Timestamp of the data point
     * @type {string}
     * @memberof SparrModelsAnalyticsMetricResponseDataPoint
     */
    timestamp: string;
    /**
     * Value which will be a string representation of integer or floating number
     * @type {string}
     * @memberof SparrModelsAnalyticsMetricResponseDataPoint
     */
    value: string;
    /**
     * Optional weight value for the data point
     * @type {string}
     * @memberof SparrModelsAnalyticsMetricResponseDataPoint
     */
    weight?: string | null;
}
/**
 *
 * @export
 * @interface SparrModelsAnalyticsMetricsRequest
 */
export interface SparrModelsAnalyticsMetricsRequest {
    /**
     * Unique identifier for the metric request. This can be helped to co-relate the request and response
     * @type {string}
     * @memberof SparrModelsAnalyticsMetricsRequest
     */
    id: string;
    /**
     * Name of the metric
     * @type {SparrModelsAnalyticsMetricName}
     * @memberof SparrModelsAnalyticsMetricsRequest
     */
    name: SparrModelsAnalyticsMetricName;
    /**
     * Start date to get metric request
     * @type {string}
     * @memberof SparrModelsAnalyticsMetricsRequest
     */
    fromDate: string;
    /**
     * End date until get metric request
     * @type {string}
     * @memberof SparrModelsAnalyticsMetricsRequest
     */
    toDate: string;
    /**
     * Aggregation period for the metric request
     * @type {AggregationPeriod}
     * @memberof SparrModelsAnalyticsMetricsRequest
     */
    aggregationPeriod: AggregationPeriod;
    /**
     * Aggregation formula for the metric request
     * @type {SparrModelsAnalyticsAggregationFormula}
     * @memberof SparrModelsAnalyticsMetricsRequest
     */
    aggregationFormula: SparrModelsAnalyticsAggregationFormula;
}
/**
 *
 * @export
 * @interface SparrModelsAnalyticsMetricsResponse
 */
export interface SparrModelsAnalyticsMetricsResponse {
    /**
     * Unique identifier for the metric response. This will help co-relate the request and response
     * @type {string}
     * @memberof SparrModelsAnalyticsMetricsResponse
     */
    id: string;
    /**
     * Name of the metric
     * @type {SparrModelsAnalyticsMetricName}
     * @memberof SparrModelsAnalyticsMetricsResponse
     */
    name: SparrModelsAnalyticsMetricName;
    /**
     * List of data points for the metric response
     * @type {Array<SparrModelsAnalyticsMetricResponseDataPoint>}
     * @memberof SparrModelsAnalyticsMetricsResponse
     */
    datapoints: Array<SparrModelsAnalyticsMetricResponseDataPoint>;
}
/**
 *
 * @export
 * @interface SparrModelsBaseBaseResponse
 */
export interface SparrModelsBaseBaseResponse {
    /**
     * The message of the response
     * @type {string}
     * @memberof SparrModelsBaseBaseResponse
     */
    message?: string;
    /**
     * The status of the response
     * @type {string}
     * @memberof SparrModelsBaseBaseResponse
     */
    status?: string;
}
/**
 *
 * @export
 * @interface SparrModelsScenarioGoal
 */
export interface SparrModelsScenarioGoal {
    /**
     * The name of the goal
     * @type {string}
     * @memberof SparrModelsScenarioGoal
     */
    name: string;
    /**
     * The description of the goal
     * @type {string}
     * @memberof SparrModelsScenarioGoal
     */
    description: string;
    /**
     * The weightage of the goal in percentage
     * @type {number}
     * @memberof SparrModelsScenarioGoal
     */
    weightage: number;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum SparrNegotiationStyle {
    HardBargainer = "hard bargainer",
    FriendlyNegotiator = "friendly negotiator",
    NonNegotiator = "non-negotiator"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum SparrPatienceLevel {
    Neutral = "neutral",
    VeryPatient = "very patient",
    Impatient = "impatient"
}
/**
 *
 * @export
 * @interface SparrPersonaAttributesAndTraits
 */
export interface SparrPersonaAttributesAndTraits {
    /**
     *
     * @type {SparrPatienceLevel | string}
     * @memberof SparrPersonaAttributesAndTraits
     */
    patience_level?: SparrPatienceLevel | string | null;
    /**
     *
     * @type {SparrDecisionMakingStyle | string}
     * @memberof SparrPersonaAttributesAndTraits
     */
    decision_making_style?: SparrDecisionMakingStyle | string | null;
    /**
     *
     * @type {SparrCommunicationStyle | string}
     * @memberof SparrPersonaAttributesAndTraits
     */
    communication_style?: SparrCommunicationStyle | string | null;
    /**
     *
     * @type {SparrAdaptability | string}
     * @memberof SparrPersonaAttributesAndTraits
     */
    adaptability?: SparrAdaptability | string | null;
    /**
     *
     * @type {SparrFrustrationTolerance | string}
     * @memberof SparrPersonaAttributesAndTraits
     */
    frustration_tolerance?: SparrFrustrationTolerance | string | null;
    /**
     *
     * @type {SparrEngagementLevel | string}
     * @memberof SparrPersonaAttributesAndTraits
     */
    engagement_level?: SparrEngagementLevel | string | null;
    /**
     *
     * @type {SparrInteractionTone | string}
     * @memberof SparrPersonaAttributesAndTraits
     */
    preferred_tone?: SparrInteractionTone | string | null;
    /**
     *
     * @type {SparrNegotiationStyle | string}
     * @memberof SparrPersonaAttributesAndTraits
     */
    negotiation_style?: SparrNegotiationStyle | string | null;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum SparrRudenessLevel {
    Courteous = "courteous",
    Direct = "direct",
    Irritable = "irritable",
    Aggressive = "aggressive",
    Toxic = "toxic"
}
/**
 *
 * @export
 * @interface SparrStatsData
 */
export interface SparrStatsData {
    /**
     *
     * @type {number}
     * @memberof SparrStatsData
     */
    no_of_calls: number;
    /**
     *
     * @type {number}
     * @memberof SparrStatsData
     */
    average_call_duration: number;
    /**
     *
     * @type {number}
     * @memberof SparrStatsData
     */
    average_dialogs: number;
    /**
     *
     * @type {number}
     * @memberof SparrStatsData
     */
    average_agent_dialog_ratio: number;
    /**
     *
     * @type {number}
     * @memberof SparrStatsData
     */
    average_user_dialog_ratio: number;
}
/**
 *
 * @export
 * @interface SparrStatsResponse
 */
export interface SparrStatsResponse {
    /**
     * Sparring stats of the organization
     * @type {SparrStatsData}
     * @memberof SparrStatsResponse
     */
    response: SparrStatsData;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum SparrVoiceAccent {
    American = "American",
    Indian = "Indian",
    Australian = "Australian",
    British = "British",
    Hindi = "Hindi",
    MiddleEastern = "Middle Eastern"
}
/**
 *
 * @export
 * @interface SparrVoiceInput
 */
export interface SparrVoiceInput {
    /**
     *
     * @type {SparrLanguageAccentCombo}
     * @memberof SparrVoiceInput
     */
    languageAccent: SparrLanguageAccentCombo;
    /**
     *
     * @type {string}
     * @memberof SparrVoiceInput
     */
    modelId: string;
    /**
     *
     * @type {string}
     * @memberof SparrVoiceInput
     */
    playbackSpeed?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof SparrVoiceInput
     */
    backgroundNoise?: boolean;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum SparrVoiceLanguage {
    English = "English",
    Spanish = "Spanish",
    Hindi = "Hindi"
}
/**
 *
 * @export
 * @interface SparrVoiceOutput
 */
export interface SparrVoiceOutput {
    /**
     *
     * @type {SparrLanguageAccentCombo}
     * @memberof SparrVoiceOutput
     */
    languageAccent: SparrLanguageAccentCombo;
    /**
     *
     * @type {string}
     * @memberof SparrVoiceOutput
     */
    modelId: string;
    /**
     *
     * @type {string}
     * @memberof SparrVoiceOutput
     */
    playbackSpeed?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof SparrVoiceOutput
     */
    backgroundNoise?: boolean;
}
/**
 *
 * @export
 * @interface SparrWorkDetails
 */
export interface SparrWorkDetails {
    /**
     * The company of the persona
     * @type {string}
     * @memberof SparrWorkDetails
     */
    companyName: string | null;
    /**
     * The title of the persona
     * @type {string}
     * @memberof SparrWorkDetails
     */
    jobTitle: string | null;
    /**
     * The description of the persona
     * @type {string}
     * @memberof SparrWorkDetails
     */
    description: string | null;
    /**
     * The start date of the persona
     * @type {string}
     * @memberof SparrWorkDetails
     */
    startDate: string | null;
    /**
     * The end date of the persona
     * @type {string}
     * @memberof SparrWorkDetails
     */
    endDate: string | null;
}
/**
 *
 * @export
 * @interface StatsData
 */
export interface StatsData {
    /**
     *
     * @type {number}
     * @memberof StatsData
     */
    no_of_prospects: number;
    /**
     *
     * @type {number}
     * @memberof StatsData
     */
    appointment_scheduled: number;
    /**
     *
     * @type {number}
     * @memberof StatsData
     */
    unqualified: number;
    /**
     *
     * @type {number}
     * @memberof StatsData
     */
    average_call_duration: number;
}
/**
 *
 * @export
 * @interface StatsResponse
 */
export interface StatsResponse {
    /**
     * Overall stats of prospects
     * @type {StatsData}
     * @memberof StatsResponse
     */
    response: StatsData;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum Status {
    Active = "active",
    Inactive = "inactive",
    Pending = "pending",
    Archived = "archived"
}
/**
 *
 * @export
 * @interface Step
 */
export interface Step {
    /**
     * The name of the step
     * @type {string}
     * @memberof Step
     */
    name: string;
    /**
     * The description of the step
     * @type {string}
     * @memberof Step
     */
    description: string;
}
/**
 * Subscription details of the business
 * @export
 * @interface Subscription
 */
export interface Subscription {
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    parentOrgId?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    subscriptionTypeName?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    planName?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    priceId?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    stripeSubscriptionId?: string;
    /**
     *
     * @type {number}
     * @memberof Subscription
     */
    billingCycleStartDate?: number;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    updatedAt?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    nextRenewalDate?: string;
}
/**
 * Subscription details of the business
 * @export
 * @interface SubscriptionInfo
 */
export interface SubscriptionInfo {
    /**
     *
     * @type {Subscription}
     * @memberof SubscriptionInfo
     */
    subscription?: Subscription | null;
    /**
     *
     * @type {Array<Credit>}
     * @memberof SubscriptionInfo
     */
    credits?: Array<Credit> | null;
}
/**
 *
 * @export
 * @interface SystemMetrics
 */
export interface SystemMetrics {
    /**
     *
     * @type {string}
     * @memberof SystemMetrics
     */
    average_sentiment: string | null;
    /**
     *
     * @type {FillerWords}
     * @memberof SystemMetrics
     */
    filler_words: FillerWords | null;
    /**
     *
     * @type {LongestMonologue}
     * @memberof SystemMetrics
     */
    longest_monologue: LongestMonologue | null;
    /**
     *
     * @type {number}
     * @memberof SystemMetrics
     */
    speech_pace: number | null;
    /**
     *
     * @type {number}
     * @memberof SystemMetrics
     */
    user_talk_ratio?: number | null;
    /**
     *
     * @type {Array<SparrDialogLineWithSentiment>}
     * @memberof SystemMetrics
     */
    dialog_lines_sentiment: Array<SparrDialogLineWithSentiment> | null;
}
/**
 * Request model for creating a tag
 * @export
 * @interface TagCreate
 */
export interface TagCreate {
    /**
     * Name of the tag to create
     * @type {string}
     * @memberof TagCreate
     */
    tagName: string;
}
/**
 *
 * @export
 * @interface TaxDetailsInput
 */
export interface TaxDetailsInput {
    /**
     * Tax identifier
     * @type {string}
     * @memberof TaxDetailsInput
     */
    id: string;
    /**
     * Any extra info related to Tax
     * @type {object}
     * @memberof TaxDetailsInput
     */
    taxProps: object | null;
}
/**
 *
 * @export
 * @interface TaxDetailsOutput
 */
export interface TaxDetailsOutput {
    /**
     *
     * @type {string}
     * @memberof TaxDetailsOutput
     */
    id: string;
    /**
     *
     * @type {object}
     * @memberof TaxDetailsOutput
     */
    taxProps: object | null;
}
/**
 * Telephone number details of the business
 * @export
 * @interface TelephoneNumber
 */
export interface TelephoneNumber {
    /**
     *
     * @type {string}
     * @memberof TelephoneNumber
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof TelephoneNumber
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof TelephoneNumber
     */
    phoneNumber?: string;
    /**
     *
     * @type {string}
     * @memberof TelephoneNumber
     */
    countryCode?: string;
    /**
     *
     * @type {string}
     * @memberof TelephoneNumber
     */
    agentId?: string | null;
    /**
     *
     * @type {object}
     * @memberof TelephoneNumber
     */
    internalProps?: object | null;
    /**
     *
     * @type {string}
     * @memberof TelephoneNumber
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof TelephoneNumber
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof TelephoneNumber
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof TelephoneNumber
     */
    updatedAt?: string;
}
/**
 * Tracker represents a collection of keywords with name and description
 * @export
 * @interface Tracker
 */
export interface Tracker {
    /**
     * The user who created.
     * @type {string}
     * @memberof Tracker
     */
    createdBy?: string;
    /**
     * The date and time it was created.
     * @type {string}
     * @memberof Tracker
     */
    createdAt?: string;
    /**
     * The user who last updated.
     * @type {string}
     * @memberof Tracker
     */
    updatedBy?: string;
    /**
     * The date and time when it was last updated.
     * @type {string}
     * @memberof Tracker
     */
    updatedAt?: string;
    /**
     * The workspace of the entity.
     * @type {string}
     * @memberof Tracker
     */
    orgId?: string;
    /**
     * The name of the tracker
     * @type {string}
     * @memberof Tracker
     */
    name: string;
    /**
     * The description of the tracker
     * @type {string}
     * @memberof Tracker
     */
    description: string;
    /**
     * The list of tracking categories with their keywords
     * @type {Array<TrackingCategory>}
     * @memberof Tracker
     */
    tracking_categories: Array<TrackingCategory>;
    /**
     * The status of the tracker
     * @type {string}
     * @memberof Tracker
     */
    status?: string;
    /**
     * The unique identifier of the tracker
     * @type {string}
     * @memberof Tracker
     */
    id?: string;
}
/**
 *
 * @export
 * @interface TrackerAnalyticsModel
 */
export interface TrackerAnalyticsModel {
    /**
     * Name of the tracker
     * @type {string}
     * @memberof TrackerAnalyticsModel
     */
    name: string;
    /**
     * Description of the tracker
     * @type {string}
     * @memberof TrackerAnalyticsModel
     */
    description: string;
    /**
     * Keywords used in the conversation
     * @type {any}
     * @memberof TrackerAnalyticsModel
     */
    keywords_used?: any | null;
}
/**
 *
 * @export
 * @interface TrackerCore
 */
export interface TrackerCore {
    /**
     * The name of the tracker
     * @type {string}
     * @memberof TrackerCore
     */
    name: string;
    /**
     * The description of the tracker
     * @type {string}
     * @memberof TrackerCore
     */
    description: string;
    /**
     * The list of tracking categories with their keywords
     * @type {Array<TrackingCategory>}
     * @memberof TrackerCore
     */
    tracking_categories: Array<TrackingCategory>;
    /**
     * The status of the tracker
     * @type {string}
     * @memberof TrackerCore
     */
    status?: string;
}
/**
 *
 * @export
 * @interface TrackerSearchResponse
 */
export interface TrackerSearchResponse {
    /**
     *
     * @type {Array<Tracker>}
     * @memberof TrackerSearchResponse
     */
    items: Array<Tracker>;
    /**
     *
     * @type {number}
     * @memberof TrackerSearchResponse
     */
    total: number;
    /**
     *
     * @type {number}
     * @memberof TrackerSearchResponse
     */
    pages: number;
    /**
     *
     * @type {number}
     * @memberof TrackerSearchResponse
     */
    current_page: number;
    /**
     *
     * @type {number}
     * @memberof TrackerSearchResponse
     */
    page_size: number;
}
/**
 *
 * @export
 * @interface TrackingCategory
 */
export interface TrackingCategory {
    /**
     * The name of the tracking category
     * @type {string}
     * @memberof TrackingCategory
     */
    name: string;
    /**
     * The description of what to track in this category
     * @type {string}
     * @memberof TrackingCategory
     */
    description: string;
    /**
     * List of keywords provided by user or generated for this tracking category
     * @type {Array<string>}
     * @memberof TrackingCategory
     */
    keywords: Array<string>;
}
/**
 *
 * @export
 * @interface Transcriber
 */
export interface Transcriber {
    /**
     *
     * @type {string}
     * @memberof Transcriber
     */
    providerName?: string;
    /**
     *
     * @type {string}
     * @memberof Transcriber
     */
    transcriberModel?: string | null;
    /**
     *
     * @type {object}
     * @memberof Transcriber
     */
    providerProps?: object | null;
}
/**
 * Enum for UI node types
 * @export
 * @enum {string}
 */
export declare enum UiNodeType {
    ACTION = "ACTION",
    CONDITION = "CONDITION",
    LOOP = "LOOP",
    SUBFLOW = "SUBFLOW"
}
/**
 *
 * @export
 * @interface UpdateResellerOrganizationRequest
 */
export interface UpdateResellerOrganizationRequest {
    /**
     *
     * @type {string}
     * @memberof UpdateResellerOrganizationRequest
     */
    name?: string | null;
    /**
     *
     * @type {AddressInput}
     * @memberof UpdateResellerOrganizationRequest
     */
    address?: AddressInput | null;
    /**
     *
     * @type {TaxDetailsInput}
     * @memberof UpdateResellerOrganizationRequest
     */
    tax?: TaxDetailsInput | null;
    /**
     *
     * @type {string}
     * @memberof UpdateResellerOrganizationRequest
     */
    billingEmailAddress?: string | null;
    /**
     *
     * @type {string}
     * @memberof UpdateResellerOrganizationRequest
     */
    websiteUrl?: string | null;
}
/**
 *
 * @export
 * @interface UpdateUserRequest
 */
export interface UpdateUserRequest {
    /**
     * Name of the user
     * @type {string}
     * @memberof UpdateUserRequest
     */
    name: string;
    /**
     * Role of the user
     * @type {AuthRole}
     * @memberof UpdateUserRequest
     */
    role: AuthRole;
}
/**
 *
 * @export
 * @interface UploadFileResponse
 */
export interface UploadFileResponse {
    /**
     *
     * @type {string}
     * @memberof UploadFileResponse
     */
    message: string;
    /**
     *
     * @type {string}
     * @memberof UploadFileResponse
     */
    fileUrl: string;
}
/**
 * Model representing the users under an organization
 * @export
 * @interface User
 */
export interface User {
    /**
     *
     * @type {string}
     * @memberof User
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    phoneNumber?: string | null;
    /**
     *
     * @type {string}
     * @memberof User
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    role?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    fullName?: string | null;
    /**
     *
     * @type {string}
     * @memberof User
     */
    status: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    updatedAt?: string;
}
/**
 * User id to api key mapping table
 * @export
 * @interface UserApiKeyLink
 */
export interface UserApiKeyLink {
    /**
     *
     * @type {string}
     * @memberof UserApiKeyLink
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof UserApiKeyLink
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof UserApiKeyLink
     */
    userId?: string;
    /**
     *
     * @type {string}
     * @memberof UserApiKeyLink
     */
    secretKey?: string;
    /**
     *
     * @type {string}
     * @memberof UserApiKeyLink
     */
    keyType?: string;
    /**
     *
     * @type {string}
     * @memberof UserApiKeyLink
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof UserApiKeyLink
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof UserApiKeyLink
     */
    expiresAt?: string;
    /**
     *
     * @type {boolean}
     * @memberof UserApiKeyLink
     */
    isActive?: boolean;
}
/**
 * UserCourseAssignment represents a user\'s assignment to a course
 * @export
 * @interface UserCourseAssignment
 */
export interface UserCourseAssignment {
    /**
     * The user who created.
     * @type {string}
     * @memberof UserCourseAssignment
     */
    createdBy?: string;
    /**
     * The date and time it was created.
     * @type {string}
     * @memberof UserCourseAssignment
     */
    createdAt?: string;
    /**
     * The user who last updated.
     * @type {string}
     * @memberof UserCourseAssignment
     */
    updatedBy?: string;
    /**
     * The date and time when it was last updated.
     * @type {string}
     * @memberof UserCourseAssignment
     */
    updatedAt?: string;
    /**
     * The workspace of the entity.
     * @type {string}
     * @memberof UserCourseAssignment
     */
    orgId?: string;
    /**
     * The ID of the user who is taking the course
     * @type {string}
     * @memberof UserCourseAssignment
     */
    userId: string;
    /**
     * The ID of the course
     * @type {string}
     * @memberof UserCourseAssignment
     */
    courseId: string;
    /**
     * The name of the course
     * @type {string}
     * @memberof UserCourseAssignment
     */
    courseName: string | null;
    /**
     * The completion status of the course
     * @type {CourseCompletionStatus}
     * @memberof UserCourseAssignment
     */
    courseCompletionStatus: CourseCompletionStatus;
    /**
     * The score of the course out of 100
     * @type {number}
     * @memberof UserCourseAssignment
     */
    courseScore: number;
    /**
     * The unique identifier of the user course assignment
     * @type {string}
     * @memberof UserCourseAssignment
     */
    id?: string;
}
/**
 *
 * @export
 * @interface UserCourseAssignmentAnalyticsResponse
 */
export interface UserCourseAssignmentAnalyticsResponse {
    /**
     * The course assignment
     * @type {UserCourseAssignment}
     * @memberof UserCourseAssignmentAnalyticsResponse
     */
    userCourseAssignment: UserCourseAssignment;
    /**
     * Analytics for the course for all modules
     * @type {Array<ModuleAnalytics>}
     * @memberof UserCourseAssignmentAnalyticsResponse
     */
    courseAnalytics: Array<ModuleAnalytics>;
}
/**
 * UserModuleAttempt represents a user\'s attempt at a module
 * @export
 * @interface UserModuleAttempt
 */
export interface UserModuleAttempt {
    /**
     * The user who created.
     * @type {string}
     * @memberof UserModuleAttempt
     */
    createdBy?: string;
    /**
     * The date and time it was created.
     * @type {string}
     * @memberof UserModuleAttempt
     */
    createdAt?: string;
    /**
     * The user who last updated.
     * @type {string}
     * @memberof UserModuleAttempt
     */
    updatedBy?: string;
    /**
     * The date and time when it was last updated.
     * @type {string}
     * @memberof UserModuleAttempt
     */
    updatedAt?: string;
    /**
     * The workspace of the entity.
     * @type {string}
     * @memberof UserModuleAttempt
     */
    orgId?: string;
    /**
     * The ID of the user who is taking the module
     * @type {string}
     * @memberof UserModuleAttempt
     */
    userId: string;
    /**
     * The ID of the course
     * @type {string}
     * @memberof UserModuleAttempt
     */
    courseId: string;
    /**
     * The ID of the module
     * @type {string}
     * @memberof UserModuleAttempt
     */
    moduleId: string;
    /**
     * The completion status of the module
     * @type {ModuleAttemptStatus}
     * @memberof UserModuleAttempt
     */
    attemptStatus: ModuleAttemptStatus;
    /**
     * The score of the module out of 100
     * @type {number}
     * @memberof UserModuleAttempt
     */
    attemptScore: number;
    /**
     * The ID of the feedback
     * @type {string}
     * @memberof UserModuleAttempt
     */
    feedbackId: string;
    /**
     * The unique identifier of the user module attempt
     * @type {string}
     * @memberof UserModuleAttempt
     */
    id?: string;
}
/**
 *
 * @export
 * @interface UserModuleAttemptCore
 */
export interface UserModuleAttemptCore {
    /**
     * The ID of the user who is taking the module
     * @type {string}
     * @memberof UserModuleAttemptCore
     */
    userId: string;
    /**
     * The ID of the course
     * @type {string}
     * @memberof UserModuleAttemptCore
     */
    courseId: string;
    /**
     * The ID of the module
     * @type {string}
     * @memberof UserModuleAttemptCore
     */
    moduleId: string;
    /**
     * The completion status of the module
     * @type {ModuleAttemptStatus}
     * @memberof UserModuleAttemptCore
     */
    attemptStatus: ModuleAttemptStatus;
    /**
     * The score of the module out of 100
     * @type {number}
     * @memberof UserModuleAttemptCore
     */
    attemptScore: number;
    /**
     * The ID of the feedback
     * @type {string}
     * @memberof UserModuleAttemptCore
     */
    feedbackId: string;
}
/**
 *
 * @export
 * @interface UserModuleAttemptResponse
 */
export interface UserModuleAttemptResponse {
    /**
     * The ID of the user who is taking the module
     * @type {string}
     * @memberof UserModuleAttemptResponse
     */
    userId: string;
    /**
     * The ID of the course
     * @type {string}
     * @memberof UserModuleAttemptResponse
     */
    courseId: string;
    /**
     * The ID of the module
     * @type {string}
     * @memberof UserModuleAttemptResponse
     */
    moduleId: string;
    /**
     * The completion status of the module
     * @type {ModuleAttemptStatus}
     * @memberof UserModuleAttemptResponse
     */
    attemptStatus: ModuleAttemptStatus;
    /**
     * The score of the module out of 100
     * @type {number}
     * @memberof UserModuleAttemptResponse
     */
    attemptScore: number;
    /**
     * The ID of the user module attempt
     * @type {string}
     * @memberof UserModuleAttemptResponse
     */
    id: string;
    /**
     * The ID of the feedback
     * @type {string}
     * @memberof UserModuleAttemptResponse
     */
    feedbackId: string;
    /**
     * The name of the module
     * @type {string}
     * @memberof UserModuleAttemptResponse
     */
    moduleName: string | null;
    /**
     * The passing score percentage of the module
     * @type {number}
     * @memberof UserModuleAttemptResponse
     */
    passingScorePercentage: number;
    /**
     * The difficulty level of the module
     * @type {string}
     * @memberof UserModuleAttemptResponse
     */
    difficultyLevel: string;
    /**
     * The name of the persona
     * @type {string}
     * @memberof UserModuleAttemptResponse
     */
    personaName: string | null;
    /**
     * The name of the scenario
     * @type {string}
     * @memberof UserModuleAttemptResponse
     */
    scenarioName: string | null;
    /**
     * The date and time the module was created
     * @type {string}
     * @memberof UserModuleAttemptResponse
     */
    createdAt: string;
    /**
     * The user who created the module
     * @type {string}
     * @memberof UserModuleAttemptResponse
     */
    createdBy: string | null;
    /**
     * The date and time the module was updated
     * @type {string}
     * @memberof UserModuleAttemptResponse
     */
    updatedAt: string | null;
    /**
     * The user who updated the module
     * @type {string}
     * @memberof UserModuleAttemptResponse
     */
    updatedBy: string | null;
}
/**
 * Payload for creating a new user
 * @export
 * @interface UserPayload
 */
export interface UserPayload {
    /**
     *
     * @type {string}
     * @memberof UserPayload
     */
    email?: string | null;
    /**
     *
     * @type {Role}
     * @memberof UserPayload
     */
    role?: Role | null;
    /**
     *
     * @type {string}
     * @memberof UserPayload
     */
    fullName?: string | null;
    /**
     *
     * @type {string}
     * @memberof UserPayload
     */
    phoneNumber?: string | null;
}
/**
 * Individual user performance summary
 * @export
 * @interface UserPerformanceSummary
 */
export interface UserPerformanceSummary {
    /**
     * User ID
     * @type {string}
     * @memberof UserPerformanceSummary
     */
    userId: string;
    /**
     * User name
     * @type {string}
     * @memberof UserPerformanceSummary
     */
    userName: string | null;
    /**
     * Average process adherence score
     * @type {number}
     * @memberof UserPerformanceSummary
     */
    avgProcessAdherenceScore: number | null;
    /**
     * Average skills score
     * @type {number}
     * @memberof UserPerformanceSummary
     */
    avgSkillsScore: number | null;
    /**
     * Average communication score
     * @type {number}
     * @memberof UserPerformanceSummary
     */
    avgCommunicationScore: number | null;
    /**
     * Average overall score
     * @type {number}
     * @memberof UserPerformanceSummary
     */
    avgOverallScore: number | null;
    /**
     * Total number of sessions/analytics records
     * @type {number}
     * @memberof UserPerformanceSummary
     */
    totalSessions: number;
}
/**
 * Request model for user performance summary API
 * @export
 * @interface UserPerformanceSummaryRequest
 */
export interface UserPerformanceSummaryRequest {
    /**
     * Start date for the analytics range
     * @type {string}
     * @memberof UserPerformanceSummaryRequest
     */
    startDate: string;
    /**
     * End date for the analytics range
     * @type {string}
     * @memberof UserPerformanceSummaryRequest
     */
    endDate: string;
    /**
     * Optional list of user IDs to filter by
     * @type {Array<string>}
     * @memberof UserPerformanceSummaryRequest
     */
    userIds?: Array<string> | null;
    /**
     * Column to sort by (userName, avgProcessAdherenceScore, avgSkillsScore, avgCommunicationScore, avgOverallScore)
     * @type {string}
     * @memberof UserPerformanceSummaryRequest
     */
    sortBy?: string;
    /**
     * Sort order - ascending or descending
     * @type {string}
     * @memberof UserPerformanceSummaryRequest
     */
    sortOrder?: UserPerformanceSummaryRequestSortOrderEnum;
    /**
     * Number of records to skip for pagination
     * @type {number}
     * @memberof UserPerformanceSummaryRequest
     */
    skip?: number;
    /**
     * Maximum number of records to return
     * @type {number}
     * @memberof UserPerformanceSummaryRequest
     */
    limit?: number;
}
/**
    * @export
    * @enum {string}
    */
export declare enum UserPerformanceSummaryRequestSortOrderEnum {
    Asc = "asc",
    Desc = "desc"
}
/**
 * Response model for user performance summary API
 * @export
 * @interface UserPerformanceSummaryResponse
 */
export interface UserPerformanceSummaryResponse {
    /**
     * Start date of the analytics range
     * @type {string}
     * @memberof UserPerformanceSummaryResponse
     */
    startDate: string;
    /**
     * End date of the analytics range
     * @type {string}
     * @memberof UserPerformanceSummaryResponse
     */
    endDate: string;
    /**
     * List of user performance summaries
     * @type {Array<UserPerformanceSummary>}
     * @memberof UserPerformanceSummaryResponse
     */
    users: Array<UserPerformanceSummary>;
    /**
     * Total number of users matching the criteria
     * @type {number}
     * @memberof UserPerformanceSummaryResponse
     */
    totalCount: number;
    /**
     * Number of records skipped
     * @type {number}
     * @memberof UserPerformanceSummaryResponse
     */
    skip: number;
    /**
     * Number of records requested
     * @type {number}
     * @memberof UserPerformanceSummaryResponse
     */
    limit: number;
    /**
     * Column used for sorting
     * @type {string}
     * @memberof UserPerformanceSummaryResponse
     */
    sortBy: string;
    /**
     * Sort order applied
     * @type {string}
     * @memberof UserPerformanceSummaryResponse
     */
    sortOrder: string;
}
/**
 *
 * @export
 * @interface UserRecentActivity
 */
export interface UserRecentActivity {
    /**
     *
     * @type {string}
     * @memberof UserRecentActivity
     */
    date: string;
    /**
     *
     * @type {string}
     * @memberof UserRecentActivity
     */
    sparr_persona_name: string;
    /**
     *
     * @type {string}
     * @memberof UserRecentActivity
     */
    sparr_scenario_name: string;
    /**
     *
     * @type {string}
     * @memberof UserRecentActivity
     */
    sentiment: string;
    /**
     *
     * @type {number}
     * @memberof UserRecentActivity
     */
    score: number;
}
/**
 *
 * @export
 * @interface UserStats
 */
export interface UserStats {
    /**
     *
     * @type {{ [key: string]: UserStatsItem; }}
     * @memberof UserStats
     */
    sparr_stats: {
        [key: string]: UserStatsItem;
    };
    /**
     *
     * @type {Array<UserRecentActivity>}
     * @memberof UserStats
     */
    recent_activity: Array<UserRecentActivity>;
}
/**
 *
 * @export
 * @interface UserStatsItem
 */
export interface UserStatsItem {
    /**
     *
     * @type {number}
     * @memberof UserStatsItem
     */
    total_calls: number;
    /**
     *
     * @type {number}
     * @memberof UserStatsItem
     */
    average_score: number;
    /**
     *
     * @type {number}
     * @memberof UserStatsItem
     */
    total_sparr_minutes: number;
}
/**
 *
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     *
     * @type {Array<string | number>}
     * @memberof ValidationError
     */
    loc: Array<string | number>;
    /**
     *
     * @type {string}
     * @memberof ValidationError
     */
    msg: string;
    /**
     *
     * @type {string}
     * @memberof ValidationError
     */
    type: string;
}
/**
 * Link table to store the list of ai agents accessible for each virtual prospect
 * @export
 * @interface VirtualProspectAIAgentLink
 */
export interface VirtualProspectAIAgentLink {
    /**
     *
     * @type {string}
     * @memberof VirtualProspectAIAgentLink
     */
    virtualProspectId?: string;
    /**
     *
     * @type {string}
     * @memberof VirtualProspectAIAgentLink
     */
    aiAgentId?: string;
}
/**
 *
 * @export
 * @interface VirtualProspectInput
 */
export interface VirtualProspectInput {
    /**
     * Name of the virtual prospect
     * @type {string}
     * @memberof VirtualProspectInput
     */
    name: string;
    /**
     * Description of the virtual prospect
     * @type {string}
     * @memberof VirtualProspectInput
     */
    description?: string | null;
    /**
     * Attributes of the virtual prospect
     * @type {PersonaAttributesAndTraits}
     * @memberof VirtualProspectInput
     */
    personaAttributes: PersonaAttributesAndTraits;
    /**
     * Additional information about the virtual prospect
     * @type {string}
     * @memberof VirtualProspectInput
     */
    additionalInfo?: string | null;
    /**
     * Voice of the virtual prospect
     * @type {VoiceInput}
     * @memberof VirtualProspectInput
     */
    voice?: VoiceInput | null;
    /**
     * Type of the virtual prospect
     * @type {VirtualProspectTypeEnum}
     * @memberof VirtualProspectInput
     */
    virtualProspectType?: VirtualProspectTypeEnum | null;
    /**
     * Context for the virtual prospect
     * @type {string}
     * @memberof VirtualProspectInput
     */
    context?: string | null;
}
/**
 * Virtual prospect details for sparring
 * @export
 * @interface VirtualProspectOutput
 */
export interface VirtualProspectOutput {
    /**
     *
     * @type {string}
     * @memberof VirtualProspectOutput
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof VirtualProspectOutput
     */
    orgId?: string;
    /**
     *
     * @type {string}
     * @memberof VirtualProspectOutput
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof VirtualProspectOutput
     */
    description?: string | null;
    /**
     *
     * @type {PersonaAttributesAndTraits}
     * @memberof VirtualProspectOutput
     */
    personaAttributes: PersonaAttributesAndTraits | null;
    /**
     * Additional information about the virtual prospect
     * @type {string}
     * @memberof VirtualProspectOutput
     */
    additionalInfo?: string | null;
    /**
     *
     * @type {VoiceOutput}
     * @memberof VirtualProspectOutput
     */
    voice?: VoiceOutput | null;
    /**
     * Context for the virtual prospect
     * @type {string}
     * @memberof VirtualProspectOutput
     */
    context?: string | null;
    /**
     * Type of the virtual prospect
     * @type {VirtualProspectTypeEnum}
     * @memberof VirtualProspectOutput
     */
    virtualProspectType?: VirtualProspectTypeEnum;
    /**
     *
     * @type {string}
     * @memberof VirtualProspectOutput
     */
    createdBy?: string;
    /**
     *
     * @type {string}
     * @memberof VirtualProspectOutput
     */
    createdAt?: string;
    /**
     *
     * @type {string}
     * @memberof VirtualProspectOutput
     */
    updatedBy?: string;
    /**
     *
     * @type {string}
     * @memberof VirtualProspectOutput
     */
    updatedAt?: string;
}
/**
 * Enum which stores the list of types of sparring calls
 * @export
 * @enum {string}
 */
export declare enum VirtualProspectTypeEnum {
    INBOUND = "INBOUND",
    OUTBOUND = "OUTBOUND"
}
/**
 *
 * @export
 * @interface VoiceInput
 */
export interface VoiceInput {
    /**
     *
     * @type {string}
     * @memberof VoiceInput
     */
    gender: VoiceInputGenderEnum;
    /**
     *
     * @type {LanguageAccentCombo}
     * @memberof VoiceInput
     */
    languageAccent: LanguageAccentCombo;
    /**
     *
     * @type {string}
     * @memberof VoiceInput
     */
    modelId: string;
    /**
     *
     * @type {string}
     * @memberof VoiceInput
     */
    playbackSpeed?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof VoiceInput
     */
    backgroundNoise?: boolean;
}
/**
    * @export
    * @enum {string}
    */
export declare enum VoiceInputGenderEnum {
    Male = "Male",
    Female = "Female",
    Neutral = "Neutral"
}
/**
 *
 * @export
 * @interface VoiceModel
 */
export interface VoiceModel {
    /**
     *
     * @type {VoiceOutput}
     * @memberof VoiceModel
     */
    voice: VoiceOutput;
    /**
     *
     * @type {string}
     * @memberof VoiceModel
     */
    previewUrl: string;
    /**
     *
     * @type {string}
     * @memberof VoiceModel
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof VoiceModel
     */
    voiceDescription: string;
}
/**
 *
 * @export
 * @interface VoiceOutput
 */
export interface VoiceOutput {
    /**
     *
     * @type {string}
     * @memberof VoiceOutput
     */
    gender: VoiceOutputGenderEnum;
    /**
     *
     * @type {LanguageAccentCombo}
     * @memberof VoiceOutput
     */
    languageAccent: LanguageAccentCombo;
    /**
     *
     * @type {string}
     * @memberof VoiceOutput
     */
    modelId: string;
    /**
     *
     * @type {string}
     * @memberof VoiceOutput
     */
    playbackSpeed?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof VoiceOutput
     */
    backgroundNoise?: boolean;
}
/**
    * @export
    * @enum {string}
    */
export declare enum VoiceOutputGenderEnum {
    Male = "Male",
    Female = "Female",
    Neutral = "Neutral"
}
/**
 * Workflow represents a sequence of steps that can be performed by an app
 * @export
 * @interface Workflow
 */
export interface Workflow {
    /**
     * The user who created.
     * @type {string}
     * @memberof Workflow
     */
    createdBy?: string;
    /**
     * The date and time it was created.
     * @type {string}
     * @memberof Workflow
     */
    createdAt?: string;
    /**
     * The user who last updated.
     * @type {string}
     * @memberof Workflow
     */
    updatedBy?: string;
    /**
     * The date and time when it was last updated.
     * @type {string}
     * @memberof Workflow
     */
    updatedAt?: string;
    /**
     * The workspace of the entity.
     * @type {string}
     * @memberof Workflow
     */
    orgId?: string;
    /**
     * The name of the workflow
     * @type {string}
     * @memberof Workflow
     */
    name?: string;
    /**
     * The description of the workflow
     * @type {string}
     * @memberof Workflow
     */
    description?: string | null;
    /**
     * The version of the workflow
     * @type {string}
     * @memberof Workflow
     */
    version?: string;
    /**
     * The steps of the workflow
     * @type {{ [key: string]: WorkflowStepOutput; }}
     * @memberof Workflow
     */
    steps: {
        [key: string]: WorkflowStepOutput;
    };
    /**
     * The id of the start step
     * @type {string}
     * @memberof Workflow
     */
    startStepId?: string;
    /**
     * The unique identifier of the workflow
     * @type {string}
     * @memberof Workflow
     */
    id?: string;
}
/**
 *
 * @export
 * @interface WorkflowActivityInfo
 */
export interface WorkflowActivityInfo {
    /**
     *
     * @type {string}
     * @memberof WorkflowActivityInfo
     */
    step_name: string;
    /**
     *
     * @type {string}
     * @memberof WorkflowActivityInfo
     */
    status: string;
    /**
     *
     * @type {object}
     * @memberof WorkflowActivityInfo
     */
    input: object;
    /**
     *
     * @type {object}
     * @memberof WorkflowActivityInfo
     */
    result: object;
    /**
     *
     * @type {string}
     * @memberof WorkflowActivityInfo
     */
    start_time?: string | null;
    /**
     *
     * @type {string}
     * @memberof WorkflowActivityInfo
     */
    end_time?: string | null;
}
/**
 * Workflow Context Model
 * @export
 * @interface WorkflowContext
 */
export interface WorkflowContext {
    /**
     * The ID of the organization
     * @type {string}
     * @memberof WorkflowContext
     */
    orgId: string;
    /**
     * The ID of the workflow
     * @type {string}
     * @memberof WorkflowContext
     */
    workflowId: string;
    /**
     * The ID of the run
     * @type {string}
     * @memberof WorkflowContext
     */
    runId: string;
    /**
     * The input of the step
     * @type {object}
     * @memberof WorkflowContext
     */
    stepInput: object;
    /**
     * The response of the step
     * @type {object}
     * @memberof WorkflowContext
     */
    stepResponse: object;
}
/**
 * Core Workflow Model
 * @export
 * @interface WorkflowCore
 */
export interface WorkflowCore {
    /**
     * The name of the workflow
     * @type {string}
     * @memberof WorkflowCore
     */
    name?: string;
    /**
     * The description of the workflow
     * @type {string}
     * @memberof WorkflowCore
     */
    description?: string | null;
    /**
     * The version of the workflow
     * @type {string}
     * @memberof WorkflowCore
     */
    version?: string;
    /**
     * The steps of the workflow
     * @type {{ [key: string]: WorkflowStepInput; }}
     * @memberof WorkflowCore
     */
    steps: {
        [key: string]: WorkflowStepInput;
    };
    /**
     * The id of the start step
     * @type {string}
     * @memberof WorkflowCore
     */
    startStepId?: string;
}
/**
 * Core Workflow Execution Model
 * @export
 * @interface WorkflowExecution
 */
export interface WorkflowExecution {
    /**
     * The name of the workflow
     * @type {string}
     * @memberof WorkflowExecution
     */
    workflowName: string;
    /**
     * The start timestamp of the workflow
     * @type {string}
     * @memberof WorkflowExecution
     */
    workflowStartTimestamp: string | null;
    /**
     * The end timestamp of the workflow
     * @type {string}
     * @memberof WorkflowExecution
     */
    workflowEndTimestamp: string | null;
    /**
     * The id of the workflow
     * @type {string}
     * @memberof WorkflowExecution
     */
    workflowId: string;
    /**
     * The run id of the workflow
     * @type {string}
     * @memberof WorkflowExecution
     */
    workflowRunId: string;
    /**
     * The status of the workflow execution
     * @type {string}
     * @memberof WorkflowExecution
     */
    status: string;
    /**
     * The activity info of the workflow execution
     * @type {Array<WorkflowActivityInfo>}
     * @memberof WorkflowExecution
     */
    activityInfo: Array<WorkflowActivityInfo>;
    /**
     * The final result of the workflow execution
     * @type {object}
     * @memberof WorkflowExecution
     */
    result: object;
}
/**
 * Flow Step Model
 * @export
 * @interface WorkflowStepInput
 */
export interface WorkflowStepInput {
    /**
     * The id of the step
     * @type {string}
     * @memberof WorkflowStepInput
     */
    stepId?: string;
    /**
     * The connection id of the app
     * @type {string}
     * @memberof WorkflowStepInput
     */
    appConnectionId?: string | null;
    /**
     * The app action id of the app
     * @type {string}
     * @memberof WorkflowStepInput
     */
    appActionId?: string;
    /**
     * The id of the app
     * @type {string}
     * @memberof WorkflowStepInput
     */
    appId?: string;
    /**
     * The name of the app. It must match the app name in AppDefinition implementation
     * @type {string}
     * @memberof WorkflowStepInput
     */
    appName?: string;
    /**
     * The version of the app. It must match the app version in AppDefinition implementation
     * @type {string}
     * @memberof WorkflowStepInput
     */
    appVersion?: string;
    /**
     * The data resolver on how to resolve the data for the step
     * @type {string}
     * @memberof WorkflowStepInput
     */
    dataResolver?: string | null;
    /**
     * Resolver for determining the next step
     * @type {NextStepResolver}
     * @memberof WorkflowStepInput
     */
    nextStepResolver: NextStepResolver;
}
/**
 * Flow Step Model
 * @export
 * @interface WorkflowStepOutput
 */
export interface WorkflowStepOutput {
    /**
     * The id of the step
     * @type {string}
     * @memberof WorkflowStepOutput
     */
    stepId?: string;
    /**
     * The connection id of the app
     * @type {string}
     * @memberof WorkflowStepOutput
     */
    appConnectionId?: string | null;
    /**
     * The app action id of the app
     * @type {string}
     * @memberof WorkflowStepOutput
     */
    appActionId?: string;
    /**
     * The id of the app
     * @type {string}
     * @memberof WorkflowStepOutput
     */
    appId?: string;
    /**
     * The name of the app. It must match the app name in AppDefinition implementation
     * @type {string}
     * @memberof WorkflowStepOutput
     */
    appName?: string;
    /**
     * The version of the app. It must match the app version in AppDefinition implementation
     * @type {string}
     * @memberof WorkflowStepOutput
     */
    appVersion?: string;
    /**
     * The data resolver on how to resolve the data for the step
     * @type {string}
     * @memberof WorkflowStepOutput
     */
    dataResolver?: string | null;
    /**
     * Resolver for determining the next step
     * @type {NextStepResolver}
     * @memberof WorkflowStepOutput
     */
    nextStepResolver: NextStepResolver;
}
/**
 *
 * @export
 * @interface WorkflowStepTriggerRequest
 */
export interface WorkflowStepTriggerRequest {
    /**
     *
     * @type {WorkflowContext}
     * @memberof WorkflowStepTriggerRequest
     */
    workflowContext: WorkflowContext;
    /**
     *
     * @type {WorkflowStepInput}
     * @memberof WorkflowStepTriggerRequest
     */
    workflowStep: WorkflowStepInput;
}
/**
 *
 * @export
 * @interface WorkflowStepTriggerResponse
 */
export interface WorkflowStepTriggerResponse {
    /**
     *
     * @type {object}
     * @memberof WorkflowStepTriggerResponse
     */
    input: object;
    /**
     *
     * @type {object}
     * @memberof WorkflowStepTriggerResponse
     */
    response: object;
}
/**
 * ActionAgentLinkApi - axios parameter creator
 * @export
 */
export declare const ActionAgentLinkApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a Link Between an Action and an Agent
     * @summary Create a Link Between an Action and an Agent
     * @param {string} actionId ID of the action
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createActionAgentLinkV1: (actionId: string, agentId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a Link Between an Action and an Agent
     * @summary Delete a Link Between an Action and an Agent
     * @param {string} actionId ID of the action
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteActionAgentLinkV1: (actionId: string, agentId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List All Actions Linked to a Specific Agent
     * @summary List All Actions Linked to a Specific Agent
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActionsOfAgentV1: (agentId: string, options?: any) => Promise<RequestArgs>;
};
/**
 * ActionAgentLinkApi - functional programming interface
 * @export
 */
export declare const ActionAgentLinkApiFp: (configuration?: Configuration) => {
    /**
     * Create a Link Between an Action and an Agent
     * @summary Create a Link Between an Action and an Agent
     * @param {string} actionId ID of the action
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createActionAgentLinkV1(actionId: string, agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * Delete a Link Between an Action and an Agent
     * @summary Delete a Link Between an Action and an Agent
     * @param {string} actionId ID of the action
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteActionAgentLinkV1(actionId: string, agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * List All Actions Linked to a Specific Agent
     * @summary List All Actions Linked to a Specific Agent
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActionsOfAgentV1(agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ActionOutput>>>;
};
/**
 * ActionAgentLinkApi - factory interface
 * @export
 */
export declare const ActionAgentLinkApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a Link Between an Action and an Agent
     * @summary Create a Link Between an Action and an Agent
     * @param {string} actionId ID of the action
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createActionAgentLinkV1(actionId: string, agentId: string, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * Delete a Link Between an Action and an Agent
     * @summary Delete a Link Between an Action and an Agent
     * @param {string} actionId ID of the action
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteActionAgentLinkV1(actionId: string, agentId: string, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * List All Actions Linked to a Specific Agent
     * @summary List All Actions Linked to a Specific Agent
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActionsOfAgentV1(agentId: string, options?: any): AxiosPromise<Array<ActionOutput>>;
};
/**
 * ActionAgentLinkApi - object-oriented interface
 * @export
 * @class ActionAgentLinkApi
 * @extends {BaseAPI}
 */
export declare class ActionAgentLinkApi extends BaseAPI {
    /**
     * Create a Link Between an Action and an Agent
     * @summary Create a Link Between an Action and an Agent
     * @param {string} actionId ID of the action
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionAgentLinkApi
     */
    createActionAgentLinkV1(actionId: string, agentId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * Delete a Link Between an Action and an Agent
     * @summary Delete a Link Between an Action and an Agent
     * @param {string} actionId ID of the action
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionAgentLinkApi
     */
    deleteActionAgentLinkV1(actionId: string, agentId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * List All Actions Linked to a Specific Agent
     * @summary List All Actions Linked to a Specific Agent
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionAgentLinkApi
     */
    listActionsOfAgentV1(agentId: string, options?: any): Promise<import("axios").AxiosResponse<ActionOutput[]>>;
}
/**
 * ActionsApi - axios parameter creator
 * @export
 */
export declare const ActionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a New Action
     * @summary Create a New Action
     * @param {ActionInput} actionInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createActionV1: (actionInput: ActionInput, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a Specific Action by ID
     * @summary Delete a Specific Action by ID
     * @param {string} actionId ID of the action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteActionV1: (actionId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a Specific Action by ID
     * @summary Get a Specific Action by ID
     * @param {string} actionId ID of the action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActionV1: (actionId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List All Actions
     * @summary List All Actions
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActionsV1: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Update a Specific Action by ID
     * @summary Update a Specific Action by ID
     * @param {string} actionId ID of the action
     * @param {ActionInput} actionInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateActionV1: (actionId: string, actionInput: ActionInput, options?: any) => Promise<RequestArgs>;
};
/**
 * ActionsApi - functional programming interface
 * @export
 */
export declare const ActionsApiFp: (configuration?: Configuration) => {
    /**
     * Create a New Action
     * @summary Create a New Action
     * @param {ActionInput} actionInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createActionV1(actionInput: ActionInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActionOutput>>;
    /**
     * Delete a Specific Action by ID
     * @summary Delete a Specific Action by ID
     * @param {string} actionId ID of the action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteActionV1(actionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * Get a Specific Action by ID
     * @summary Get a Specific Action by ID
     * @param {string} actionId ID of the action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActionV1(actionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActionOutput>>;
    /**
     * List All Actions
     * @summary List All Actions
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActionsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ActionOutput>>>;
    /**
     * Update a Specific Action by ID
     * @summary Update a Specific Action by ID
     * @param {string} actionId ID of the action
     * @param {ActionInput} actionInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateActionV1(actionId: string, actionInput: ActionInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActionOutput>>;
};
/**
 * ActionsApi - factory interface
 * @export
 */
export declare const ActionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a New Action
     * @summary Create a New Action
     * @param {ActionInput} actionInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createActionV1(actionInput: ActionInput, options?: any): AxiosPromise<ActionOutput>;
    /**
     * Delete a Specific Action by ID
     * @summary Delete a Specific Action by ID
     * @param {string} actionId ID of the action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteActionV1(actionId: string, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * Get a Specific Action by ID
     * @summary Get a Specific Action by ID
     * @param {string} actionId ID of the action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActionV1(actionId: string, options?: any): AxiosPromise<ActionOutput>;
    /**
     * List All Actions
     * @summary List All Actions
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActionsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): AxiosPromise<Array<ActionOutput>>;
    /**
     * Update a Specific Action by ID
     * @summary Update a Specific Action by ID
     * @param {string} actionId ID of the action
     * @param {ActionInput} actionInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateActionV1(actionId: string, actionInput: ActionInput, options?: any): AxiosPromise<ActionOutput>;
};
/**
 * ActionsApi - object-oriented interface
 * @export
 * @class ActionsApi
 * @extends {BaseAPI}
 */
export declare class ActionsApi extends BaseAPI {
    /**
     * Create a New Action
     * @summary Create a New Action
     * @param {ActionInput} actionInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    createActionV1(actionInput: ActionInput, options?: any): Promise<import("axios").AxiosResponse<ActionOutput>>;
    /**
     * Delete a Specific Action by ID
     * @summary Delete a Specific Action by ID
     * @param {string} actionId ID of the action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    deleteActionV1(actionId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * Get a Specific Action by ID
     * @summary Get a Specific Action by ID
     * @param {string} actionId ID of the action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    getActionV1(actionId: string, options?: any): Promise<import("axios").AxiosResponse<ActionOutput>>;
    /**
     * List All Actions
     * @summary List All Actions
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    listActionsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<import("axios").AxiosResponse<ActionOutput[]>>;
    /**
     * Update a Specific Action by ID
     * @summary Update a Specific Action by ID
     * @param {string} actionId ID of the action
     * @param {ActionInput} actionInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionsApi
     */
    updateActionV1(actionId: string, actionInput: ActionInput, options?: any): Promise<import("axios").AxiosResponse<ActionOutput>>;
}
/**
 * AgentsApi - axios parameter creator
 * @export
 */
export declare const AgentsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a New AI Agent
     * @summary Create a New AI Agent
     * @param {AIAgentInput} aIAgentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAIAgentV1: (aIAgentInput: AIAgentInput, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a Specific AI Agent by ID
     * @summary Delete a Specific AI Agent by ID
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAIAgentV1: (agentId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a Specific AI Agent by ID
     * @summary Get a Specific AI Agent by ID
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAIAgentV1: (agentId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List All AI Agents
     * @summary List All AI Agents
     * @param {AppEnumInput} [app]
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAIAgentsV1: (app?: AppEnumInput, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Update a Specific AI Agent by ID
     * @summary Update a Specific AI Agent by ID
     * @param {string} agentId ID of the agent
     * @param {AIAgentInput} aIAgentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAIAgentV1: (agentId: string, aIAgentInput: AIAgentInput, options?: any) => Promise<RequestArgs>;
};
/**
 * AgentsApi - functional programming interface
 * @export
 */
export declare const AgentsApiFp: (configuration?: Configuration) => {
    /**
     * Create a New AI Agent
     * @summary Create a New AI Agent
     * @param {AIAgentInput} aIAgentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAIAgentV1(aIAgentInput: AIAgentInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AIAgentOutput>>;
    /**
     * Delete a Specific AI Agent by ID
     * @summary Delete a Specific AI Agent by ID
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAIAgentV1(agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * Get a Specific AI Agent by ID
     * @summary Get a Specific AI Agent by ID
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAIAgentV1(agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AIAgentOutput>>;
    /**
     * List All AI Agents
     * @summary List All AI Agents
     * @param {AppEnumInput} [app]
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAIAgentsV1(app?: AppEnumInput, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AIAgentOutput>>>;
    /**
     * Update a Specific AI Agent by ID
     * @summary Update a Specific AI Agent by ID
     * @param {string} agentId ID of the agent
     * @param {AIAgentInput} aIAgentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAIAgentV1(agentId: string, aIAgentInput: AIAgentInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AIAgentOutput>>;
};
/**
 * AgentsApi - factory interface
 * @export
 */
export declare const AgentsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a New AI Agent
     * @summary Create a New AI Agent
     * @param {AIAgentInput} aIAgentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAIAgentV1(aIAgentInput: AIAgentInput, options?: any): AxiosPromise<AIAgentOutput>;
    /**
     * Delete a Specific AI Agent by ID
     * @summary Delete a Specific AI Agent by ID
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAIAgentV1(agentId: string, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * Get a Specific AI Agent by ID
     * @summary Get a Specific AI Agent by ID
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAIAgentV1(agentId: string, options?: any): AxiosPromise<AIAgentOutput>;
    /**
     * List All AI Agents
     * @summary List All AI Agents
     * @param {AppEnumInput} [app]
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAIAgentsV1(app?: AppEnumInput, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): AxiosPromise<Array<AIAgentOutput>>;
    /**
     * Update a Specific AI Agent by ID
     * @summary Update a Specific AI Agent by ID
     * @param {string} agentId ID of the agent
     * @param {AIAgentInput} aIAgentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAIAgentV1(agentId: string, aIAgentInput: AIAgentInput, options?: any): AxiosPromise<AIAgentOutput>;
};
/**
 * AgentsApi - object-oriented interface
 * @export
 * @class AgentsApi
 * @extends {BaseAPI}
 */
export declare class AgentsApi extends BaseAPI {
    /**
     * Create a New AI Agent
     * @summary Create a New AI Agent
     * @param {AIAgentInput} aIAgentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    createAIAgentV1(aIAgentInput: AIAgentInput, options?: any): Promise<import("axios").AxiosResponse<AIAgentOutput>>;
    /**
     * Delete a Specific AI Agent by ID
     * @summary Delete a Specific AI Agent by ID
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    deleteAIAgentV1(agentId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * Get a Specific AI Agent by ID
     * @summary Get a Specific AI Agent by ID
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    getAIAgentV1(agentId: string, options?: any): Promise<import("axios").AxiosResponse<AIAgentOutput>>;
    /**
     * List All AI Agents
     * @summary List All AI Agents
     * @param {AppEnumInput} [app]
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    listAIAgentsV1(app?: AppEnumInput, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<import("axios").AxiosResponse<AIAgentOutput[]>>;
    /**
     * Update a Specific AI Agent by ID
     * @summary Update a Specific AI Agent by ID
     * @param {string} agentId ID of the agent
     * @param {AIAgentInput} aIAgentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentsApi
     */
    updateAIAgentV1(agentId: string, aIAgentInput: AIAgentInput, options?: any): Promise<import("axios").AxiosResponse<AIAgentOutput>>;
}
/**
 * AnalyticsApi - axios parameter creator
 * @export
 */
export declare const AnalyticsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get fine grained analytics data from Trata AI like call, duration stats, etc.
     * @summary Get Metrics
     * @param {BatchMetricsRequestsInput} batchMetricsRequestsInput
     * @param {string} [app]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetricsV1MetricsPost: (batchMetricsRequestsInput: BatchMetricsRequestsInput, app?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get aggregated stats from Trata AI like call count, prospect count, etc.
     * @summary Get Aggregated Stats
     * @param {AppEnumInput} [app]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOverallStatsV1StatsGet: (app?: AppEnumInput, options?: any) => Promise<RequestArgs>;
    /**
     * Get simplified user analytics with custom metrics and single date range aggregation.  This endpoint aggregates metrics over the entire date range without time-based grouping. Perfect for getting summary statistics or single aggregated values.  Example request: ```json {     \"startDate\": \"2024-01-01\",     \"endDate\": \"2024-03-31\",     \"metrics\": [         {             \"name\": \"overallScore\",             \"aggregation\": \"AVG\",             \"alias\": \"average_performance\"         },         {             \"name\": \"callDuration\",             \"aggregation\": \"SUM\",             \"alias\": \"total_call_time\"         },         {             \"name\": \"modulesCompleted\",             \"aggregation\": \"COUNT\",             \"alias\": \"completion_count\"         }     ],     \"userIds\": [\"user_id_1\", \"user_id_2\"] } ```  Available metric names: - processAdherenceScore: Process adherence score metric - skillsScore: Skills assessment score metric - communicationScore: Communication effectiveness score metric - userTalkingRatio: Ratio of user talking time vs total conversation time - fillerWords: Count of filler words used - overallScore: Overall performance score metric - modulesCompleted: Number of modules completed - callDuration: Duration of the call in seconds - longestMonologue: Duration of the longest monologue in seconds - userId: User ID for counting unique users - feedbackId: Feedback ID for counting records  Note: Both camelCase and snake_case formats are supported for column names (e.g., \"processAdherenceScore\" or \"process_adherence_score\")  Available aggregations: - SUM: Total values - AVG: Average values - COUNT: Count of non-null values - MIN: Minimum value - MAX: Maximum value
     * @summary Get User Analytics
     * @param {AnalyticsRequest} analyticsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserAnalyticsV1: (analyticsRequest: AnalyticsRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Get user performance summary with aggregated metrics grouped by user.  This endpoint returns a list of users with their average performance scores: - Average Process Adherence Score - Average Skills Score - Average Communication Score - Average Overall Score - Total number of sessions  Features: - Date range filtering (startDate, endDate) - Optional user ID filtering - Sorting by any column (userName, avgProcessAdherenceScore, avgSkillsScore, avgCommunicationScore, avgOverallScore) - Sort order (asc/desc, default desc) - Pagination support (skip/limit)  Example request: ```json {     \"startDate\": \"2024-01-01\",     \"endDate\": \"2024-03-31\",     \"userIds\": [\"user_id_1\", \"user_id_2\"],     \"sortBy\": \"avgOverallScore\",     \"sortOrder\": \"desc\",     \"skip\": 0,     \"limit\": 50 } ```  Available sort columns: - userName: User name - avgProcessAdherenceScore: Average process adherence score - avgSkillsScore: Average skills assessment score - avgCommunicationScore: Average communication effectiveness score - avgOverallScore: Average overall performance score (default)  Returns: - List of user performance summaries - Total count of matching users - Pagination metadata
     * @summary Get User Performance Summary
     * @param {UserPerformanceSummaryRequest} userPerformanceSummaryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserPerformanceSummaryV1: (userPerformanceSummaryRequest: UserPerformanceSummaryRequest, options?: any) => Promise<RequestArgs>;
};
/**
 * AnalyticsApi - functional programming interface
 * @export
 */
export declare const AnalyticsApiFp: (configuration?: Configuration) => {
    /**
     * Get fine grained analytics data from Trata AI like call, duration stats, etc.
     * @summary Get Metrics
     * @param {BatchMetricsRequestsInput} batchMetricsRequestsInput
     * @param {string} [app]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetricsV1MetricsPost(batchMetricsRequestsInput: BatchMetricsRequestsInput, app?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchMetricsResponseInput>>;
    /**
     * Get aggregated stats from Trata AI like call count, prospect count, etc.
     * @summary Get Aggregated Stats
     * @param {AppEnumInput} [app]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOverallStatsV1StatsGet(app?: AppEnumInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatsResponse>>;
    /**
     * Get simplified user analytics with custom metrics and single date range aggregation.  This endpoint aggregates metrics over the entire date range without time-based grouping. Perfect for getting summary statistics or single aggregated values.  Example request: ```json {     \"startDate\": \"2024-01-01\",     \"endDate\": \"2024-03-31\",     \"metrics\": [         {             \"name\": \"overallScore\",             \"aggregation\": \"AVG\",             \"alias\": \"average_performance\"         },         {             \"name\": \"callDuration\",             \"aggregation\": \"SUM\",             \"alias\": \"total_call_time\"         },         {             \"name\": \"modulesCompleted\",             \"aggregation\": \"COUNT\",             \"alias\": \"completion_count\"         }     ],     \"userIds\": [\"user_id_1\", \"user_id_2\"] } ```  Available metric names: - processAdherenceScore: Process adherence score metric - skillsScore: Skills assessment score metric - communicationScore: Communication effectiveness score metric - userTalkingRatio: Ratio of user talking time vs total conversation time - fillerWords: Count of filler words used - overallScore: Overall performance score metric - modulesCompleted: Number of modules completed - callDuration: Duration of the call in seconds - longestMonologue: Duration of the longest monologue in seconds - userId: User ID for counting unique users - feedbackId: Feedback ID for counting records  Note: Both camelCase and snake_case formats are supported for column names (e.g., \"processAdherenceScore\" or \"process_adherence_score\")  Available aggregations: - SUM: Total values - AVG: Average values - COUNT: Count of non-null values - MIN: Minimum value - MAX: Maximum value
     * @summary Get User Analytics
     * @param {AnalyticsRequest} analyticsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserAnalyticsV1(analyticsRequest: AnalyticsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnalyticsResponse>>;
    /**
     * Get user performance summary with aggregated metrics grouped by user.  This endpoint returns a list of users with their average performance scores: - Average Process Adherence Score - Average Skills Score - Average Communication Score - Average Overall Score - Total number of sessions  Features: - Date range filtering (startDate, endDate) - Optional user ID filtering - Sorting by any column (userName, avgProcessAdherenceScore, avgSkillsScore, avgCommunicationScore, avgOverallScore) - Sort order (asc/desc, default desc) - Pagination support (skip/limit)  Example request: ```json {     \"startDate\": \"2024-01-01\",     \"endDate\": \"2024-03-31\",     \"userIds\": [\"user_id_1\", \"user_id_2\"],     \"sortBy\": \"avgOverallScore\",     \"sortOrder\": \"desc\",     \"skip\": 0,     \"limit\": 50 } ```  Available sort columns: - userName: User name - avgProcessAdherenceScore: Average process adherence score - avgSkillsScore: Average skills assessment score - avgCommunicationScore: Average communication effectiveness score - avgOverallScore: Average overall performance score (default)  Returns: - List of user performance summaries - Total count of matching users - Pagination metadata
     * @summary Get User Performance Summary
     * @param {UserPerformanceSummaryRequest} userPerformanceSummaryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserPerformanceSummaryV1(userPerformanceSummaryRequest: UserPerformanceSummaryRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPerformanceSummaryResponse>>;
};
/**
 * AnalyticsApi - factory interface
 * @export
 */
export declare const AnalyticsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get fine grained analytics data from Trata AI like call, duration stats, etc.
     * @summary Get Metrics
     * @param {BatchMetricsRequestsInput} batchMetricsRequestsInput
     * @param {string} [app]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetricsV1MetricsPost(batchMetricsRequestsInput: BatchMetricsRequestsInput, app?: string, options?: any): AxiosPromise<BatchMetricsResponseInput>;
    /**
     * Get aggregated stats from Trata AI like call count, prospect count, etc.
     * @summary Get Aggregated Stats
     * @param {AppEnumInput} [app]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOverallStatsV1StatsGet(app?: AppEnumInput, options?: any): AxiosPromise<StatsResponse>;
    /**
     * Get simplified user analytics with custom metrics and single date range aggregation.  This endpoint aggregates metrics over the entire date range without time-based grouping. Perfect for getting summary statistics or single aggregated values.  Example request: ```json {     \"startDate\": \"2024-01-01\",     \"endDate\": \"2024-03-31\",     \"metrics\": [         {             \"name\": \"overallScore\",             \"aggregation\": \"AVG\",             \"alias\": \"average_performance\"         },         {             \"name\": \"callDuration\",             \"aggregation\": \"SUM\",             \"alias\": \"total_call_time\"         },         {             \"name\": \"modulesCompleted\",             \"aggregation\": \"COUNT\",             \"alias\": \"completion_count\"         }     ],     \"userIds\": [\"user_id_1\", \"user_id_2\"] } ```  Available metric names: - processAdherenceScore: Process adherence score metric - skillsScore: Skills assessment score metric - communicationScore: Communication effectiveness score metric - userTalkingRatio: Ratio of user talking time vs total conversation time - fillerWords: Count of filler words used - overallScore: Overall performance score metric - modulesCompleted: Number of modules completed - callDuration: Duration of the call in seconds - longestMonologue: Duration of the longest monologue in seconds - userId: User ID for counting unique users - feedbackId: Feedback ID for counting records  Note: Both camelCase and snake_case formats are supported for column names (e.g., \"processAdherenceScore\" or \"process_adherence_score\")  Available aggregations: - SUM: Total values - AVG: Average values - COUNT: Count of non-null values - MIN: Minimum value - MAX: Maximum value
     * @summary Get User Analytics
     * @param {AnalyticsRequest} analyticsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserAnalyticsV1(analyticsRequest: AnalyticsRequest, options?: any): AxiosPromise<AnalyticsResponse>;
    /**
     * Get user performance summary with aggregated metrics grouped by user.  This endpoint returns a list of users with their average performance scores: - Average Process Adherence Score - Average Skills Score - Average Communication Score - Average Overall Score - Total number of sessions  Features: - Date range filtering (startDate, endDate) - Optional user ID filtering - Sorting by any column (userName, avgProcessAdherenceScore, avgSkillsScore, avgCommunicationScore, avgOverallScore) - Sort order (asc/desc, default desc) - Pagination support (skip/limit)  Example request: ```json {     \"startDate\": \"2024-01-01\",     \"endDate\": \"2024-03-31\",     \"userIds\": [\"user_id_1\", \"user_id_2\"],     \"sortBy\": \"avgOverallScore\",     \"sortOrder\": \"desc\",     \"skip\": 0,     \"limit\": 50 } ```  Available sort columns: - userName: User name - avgProcessAdherenceScore: Average process adherence score - avgSkillsScore: Average skills assessment score - avgCommunicationScore: Average communication effectiveness score - avgOverallScore: Average overall performance score (default)  Returns: - List of user performance summaries - Total count of matching users - Pagination metadata
     * @summary Get User Performance Summary
     * @param {UserPerformanceSummaryRequest} userPerformanceSummaryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserPerformanceSummaryV1(userPerformanceSummaryRequest: UserPerformanceSummaryRequest, options?: any): AxiosPromise<UserPerformanceSummaryResponse>;
};
/**
 * AnalyticsApi - object-oriented interface
 * @export
 * @class AnalyticsApi
 * @extends {BaseAPI}
 */
export declare class AnalyticsApi extends BaseAPI {
    /**
     * Get fine grained analytics data from Trata AI like call, duration stats, etc.
     * @summary Get Metrics
     * @param {BatchMetricsRequestsInput} batchMetricsRequestsInput
     * @param {string} [app]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    getMetricsV1MetricsPost(batchMetricsRequestsInput: BatchMetricsRequestsInput, app?: string, options?: any): Promise<import("axios").AxiosResponse<BatchMetricsResponseInput>>;
    /**
     * Get aggregated stats from Trata AI like call count, prospect count, etc.
     * @summary Get Aggregated Stats
     * @param {AppEnumInput} [app]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    getOverallStatsV1StatsGet(app?: AppEnumInput, options?: any): Promise<import("axios").AxiosResponse<StatsResponse>>;
    /**
     * Get simplified user analytics with custom metrics and single date range aggregation.  This endpoint aggregates metrics over the entire date range without time-based grouping. Perfect for getting summary statistics or single aggregated values.  Example request: ```json {     \"startDate\": \"2024-01-01\",     \"endDate\": \"2024-03-31\",     \"metrics\": [         {             \"name\": \"overallScore\",             \"aggregation\": \"AVG\",             \"alias\": \"average_performance\"         },         {             \"name\": \"callDuration\",             \"aggregation\": \"SUM\",             \"alias\": \"total_call_time\"         },         {             \"name\": \"modulesCompleted\",             \"aggregation\": \"COUNT\",             \"alias\": \"completion_count\"         }     ],     \"userIds\": [\"user_id_1\", \"user_id_2\"] } ```  Available metric names: - processAdherenceScore: Process adherence score metric - skillsScore: Skills assessment score metric - communicationScore: Communication effectiveness score metric - userTalkingRatio: Ratio of user talking time vs total conversation time - fillerWords: Count of filler words used - overallScore: Overall performance score metric - modulesCompleted: Number of modules completed - callDuration: Duration of the call in seconds - longestMonologue: Duration of the longest monologue in seconds - userId: User ID for counting unique users - feedbackId: Feedback ID for counting records  Note: Both camelCase and snake_case formats are supported for column names (e.g., \"processAdherenceScore\" or \"process_adherence_score\")  Available aggregations: - SUM: Total values - AVG: Average values - COUNT: Count of non-null values - MIN: Minimum value - MAX: Maximum value
     * @summary Get User Analytics
     * @param {AnalyticsRequest} analyticsRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    getUserAnalyticsV1(analyticsRequest: AnalyticsRequest, options?: any): Promise<import("axios").AxiosResponse<AnalyticsResponse>>;
    /**
     * Get user performance summary with aggregated metrics grouped by user.  This endpoint returns a list of users with their average performance scores: - Average Process Adherence Score - Average Skills Score - Average Communication Score - Average Overall Score - Total number of sessions  Features: - Date range filtering (startDate, endDate) - Optional user ID filtering - Sorting by any column (userName, avgProcessAdherenceScore, avgSkillsScore, avgCommunicationScore, avgOverallScore) - Sort order (asc/desc, default desc) - Pagination support (skip/limit)  Example request: ```json {     \"startDate\": \"2024-01-01\",     \"endDate\": \"2024-03-31\",     \"userIds\": [\"user_id_1\", \"user_id_2\"],     \"sortBy\": \"avgOverallScore\",     \"sortOrder\": \"desc\",     \"skip\": 0,     \"limit\": 50 } ```  Available sort columns: - userName: User name - avgProcessAdherenceScore: Average process adherence score - avgSkillsScore: Average skills assessment score - avgCommunicationScore: Average communication effectiveness score - avgOverallScore: Average overall performance score (default)  Returns: - List of user performance summaries - Total count of matching users - Pagination metadata
     * @summary Get User Performance Summary
     * @param {UserPerformanceSummaryRequest} userPerformanceSummaryRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnalyticsApi
     */
    getUserPerformanceSummaryV1(userPerformanceSummaryRequest: UserPerformanceSummaryRequest, options?: any): Promise<import("axios").AxiosResponse<UserPerformanceSummaryResponse>>;
}
/**
 * ApiKeyApi - axios parameter creator
 * @export
 */
export declare const ApiKeyApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create Api Key
     * @param {ApiKeyRequest} apiKeyRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createApiKeyV1: (apiKeyRequest: ApiKeyRequest, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete Api Key
     * @param {string} keyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApiKeyV1: (keyId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Call Key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCallKeyV1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary List Api Keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApiKeysV1: (options?: any) => Promise<RequestArgs>;
};
/**
 * ApiKeyApi - functional programming interface
 * @export
 */
export declare const ApiKeyApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create Api Key
     * @param {ApiKeyRequest} apiKeyRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createApiKeyV1(apiKeyRequest: ApiKeyRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserApiKeyLink>>;
    /**
     *
     * @summary Delete Api Key
     * @param {string} keyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApiKeyV1(keyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     *
     * @summary Get Call Key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCallKeyV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserApiKeyLink>>;
    /**
     *
     * @summary List Api Keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApiKeysV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserApiKeyLink>>>;
};
/**
 * ApiKeyApi - factory interface
 * @export
 */
export declare const ApiKeyApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create Api Key
     * @param {ApiKeyRequest} apiKeyRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createApiKeyV1(apiKeyRequest: ApiKeyRequest, options?: any): AxiosPromise<UserApiKeyLink>;
    /**
     *
     * @summary Delete Api Key
     * @param {string} keyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApiKeyV1(keyId: string, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     *
     * @summary Get Call Key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCallKeyV1(options?: any): AxiosPromise<UserApiKeyLink>;
    /**
     *
     * @summary List Api Keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApiKeysV1(options?: any): AxiosPromise<Array<UserApiKeyLink>>;
};
/**
 * ApiKeyApi - object-oriented interface
 * @export
 * @class ApiKeyApi
 * @extends {BaseAPI}
 */
export declare class ApiKeyApi extends BaseAPI {
    /**
     *
     * @summary Create Api Key
     * @param {ApiKeyRequest} apiKeyRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeyApi
     */
    createApiKeyV1(apiKeyRequest: ApiKeyRequest, options?: any): Promise<import("axios").AxiosResponse<UserApiKeyLink>>;
    /**
     *
     * @summary Delete Api Key
     * @param {string} keyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeyApi
     */
    deleteApiKeyV1(keyId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     *
     * @summary Get Call Key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeyApi
     */
    getCallKeyV1(options?: any): Promise<import("axios").AxiosResponse<UserApiKeyLink>>;
    /**
     *
     * @summary List Api Keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeyApi
     */
    listApiKeysV1(options?: any): Promise<import("axios").AxiosResponse<UserApiKeyLink[]>>;
}
/**
 * BillingApi - axios parameter creator
 * @export
 */
export declare const BillingApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create Checkout Session For Billable Product
     * @param {string} billableProductId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCheckoutSessionForBillableProductV1: (billableProductId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Customer Session Secret
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerSessionSecretV1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Subscription Billable Products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionBillableProductsV1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Subscription Portal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionPortalV1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Subscription
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionV1: (options?: any) => Promise<RequestArgs>;
};
/**
 * BillingApi - functional programming interface
 * @export
 */
export declare const BillingApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create Checkout Session For Billable Product
     * @param {string} billableProductId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCheckoutSessionForBillableProductV1(billableProductId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary Get Customer Session Secret
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerSessionSecretV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary Get Subscription Billable Products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionBillableProductsV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Price>>>;
    /**
     *
     * @summary Get Subscription Portal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionPortalV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary Get Subscription
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionInfo>>;
};
/**
 * BillingApi - factory interface
 * @export
 */
export declare const BillingApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create Checkout Session For Billable Product
     * @param {string} billableProductId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCheckoutSessionForBillableProductV1(billableProductId: string, options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Get Customer Session Secret
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerSessionSecretV1(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Get Subscription Billable Products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionBillableProductsV1(options?: any): AxiosPromise<Array<Price>>;
    /**
     *
     * @summary Get Subscription Portal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionPortalV1(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Get Subscription
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionV1(options?: any): AxiosPromise<SubscriptionInfo>;
};
/**
 * BillingApi - object-oriented interface
 * @export
 * @class BillingApi
 * @extends {BaseAPI}
 */
export declare class BillingApi extends BaseAPI {
    /**
     *
     * @summary Create Checkout Session For Billable Product
     * @param {string} billableProductId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    createCheckoutSessionForBillableProductV1(billableProductId: string, options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     *
     * @summary Get Customer Session Secret
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    getCustomerSessionSecretV1(options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     *
     * @summary Get Subscription Billable Products
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    getSubscriptionBillableProductsV1(options?: any): Promise<import("axios").AxiosResponse<Price[]>>;
    /**
     *
     * @summary Get Subscription Portal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    getSubscriptionPortalV1(options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     *
     * @summary Get Subscription
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApi
     */
    getSubscriptionV1(options?: any): Promise<import("axios").AxiosResponse<SubscriptionInfo>>;
}
/**
 * ConversationProspectLinkApi - axios parameter creator
 * @export
 */
export declare const ConversationProspectLinkApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a link between a conversation and a prospect
     * @summary Create a link between a conversation and a prospect
     * @param {string} conversationId ID of the conversation
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConversationProspectLinkV1: (conversationId: string, prospectId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a link between a conversation and a prospect
     * @summary Delete a link between a conversation and a prospect
     * @param {string} conversationId ID of the conversation
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConversationProspectLinkV1: (conversationId: string, prospectId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List all conversations linked to a specific prospect
     * @summary List all conversations linked to a specific prospect
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConversationsOfProspectsV1: (prospectId: string, options?: any) => Promise<RequestArgs>;
};
/**
 * ConversationProspectLinkApi - functional programming interface
 * @export
 */
export declare const ConversationProspectLinkApiFp: (configuration?: Configuration) => {
    /**
     * Create a link between a conversation and a prospect
     * @summary Create a link between a conversation and a prospect
     * @param {string} conversationId ID of the conversation
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConversationProspectLinkV1(conversationId: string, prospectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * Delete a link between a conversation and a prospect
     * @summary Delete a link between a conversation and a prospect
     * @param {string} conversationId ID of the conversation
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConversationProspectLinkV1(conversationId: string, prospectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * List all conversations linked to a specific prospect
     * @summary List all conversations linked to a specific prospect
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConversationsOfProspectsV1(prospectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConversationOutput>>>;
};
/**
 * ConversationProspectLinkApi - factory interface
 * @export
 */
export declare const ConversationProspectLinkApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a link between a conversation and a prospect
     * @summary Create a link between a conversation and a prospect
     * @param {string} conversationId ID of the conversation
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConversationProspectLinkV1(conversationId: string, prospectId: string, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * Delete a link between a conversation and a prospect
     * @summary Delete a link between a conversation and a prospect
     * @param {string} conversationId ID of the conversation
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConversationProspectLinkV1(conversationId: string, prospectId: string, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * List all conversations linked to a specific prospect
     * @summary List all conversations linked to a specific prospect
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConversationsOfProspectsV1(prospectId: string, options?: any): AxiosPromise<Array<ConversationOutput>>;
};
/**
 * ConversationProspectLinkApi - object-oriented interface
 * @export
 * @class ConversationProspectLinkApi
 * @extends {BaseAPI}
 */
export declare class ConversationProspectLinkApi extends BaseAPI {
    /**
     * Create a link between a conversation and a prospect
     * @summary Create a link between a conversation and a prospect
     * @param {string} conversationId ID of the conversation
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationProspectLinkApi
     */
    createConversationProspectLinkV1(conversationId: string, prospectId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * Delete a link between a conversation and a prospect
     * @summary Delete a link between a conversation and a prospect
     * @param {string} conversationId ID of the conversation
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationProspectLinkApi
     */
    deleteConversationProspectLinkV1(conversationId: string, prospectId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * List all conversations linked to a specific prospect
     * @summary List all conversations linked to a specific prospect
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationProspectLinkApi
     */
    listConversationsOfProspectsV1(prospectId: string, options?: any): Promise<import("axios").AxiosResponse<ConversationOutput[]>>;
}
/**
 * ConversationsApi - axios parameter creator
 * @export
 */
export declare const ConversationsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Add Feedback to a Specific Conversation
     * @summary Add Feedback to a Specific Conversation
     * @param {string} conversationId ID of the conversation
     * @param {Comment} comment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addFeedbackV1: (conversationId: string, comment: Comment, options?: any) => Promise<RequestArgs>;
    /**
     * Create a New Conversation
     * @summary Create a New Conversation
     * @param {ConversationInput} conversationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConversationV1: (conversationInput: ConversationInput, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a Specific Conversation by ID
     * @summary Delete a Specific Conversation by ID
     * @param {string} conversationId ID of the conversation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConversationV1: (conversationId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a Specific Conversation by ID
     * @summary Get a Specific Conversation by ID
     * @param {string} conversationId ID of the conversation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConversationV1: (conversationId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List All Conversations
     * @summary List All Conversations
     * @param {AppEnumInput} [app]
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConversationsV1: (app?: AppEnumInput, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Update a Specific Conversation by ID
     * @summary Update a Specific Conversation by ID
     * @param {string} conversationId ID of the conversation
     * @param {ConversationInput} conversationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConversationV1: (conversationId: string, conversationInput: ConversationInput, options?: any) => Promise<RequestArgs>;
};
/**
 * ConversationsApi - functional programming interface
 * @export
 */
export declare const ConversationsApiFp: (configuration?: Configuration) => {
    /**
     * Add Feedback to a Specific Conversation
     * @summary Add Feedback to a Specific Conversation
     * @param {string} conversationId ID of the conversation
     * @param {Comment} comment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addFeedbackV1(conversationId: string, comment: Comment, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationFeedback>>;
    /**
     * Create a New Conversation
     * @summary Create a New Conversation
     * @param {ConversationInput} conversationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConversationV1(conversationInput: ConversationInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationOutput>>;
    /**
     * Delete a Specific Conversation by ID
     * @summary Delete a Specific Conversation by ID
     * @param {string} conversationId ID of the conversation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConversationV1(conversationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * Get a Specific Conversation by ID
     * @summary Get a Specific Conversation by ID
     * @param {string} conversationId ID of the conversation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConversationV1(conversationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationOutput>>;
    /**
     * List All Conversations
     * @summary List All Conversations
     * @param {AppEnumInput} [app]
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConversationsV1(app?: AppEnumInput, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConversationOutput>>>;
    /**
     * Update a Specific Conversation by ID
     * @summary Update a Specific Conversation by ID
     * @param {string} conversationId ID of the conversation
     * @param {ConversationInput} conversationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConversationV1(conversationId: string, conversationInput: ConversationInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConversationOutput>>;
};
/**
 * ConversationsApi - factory interface
 * @export
 */
export declare const ConversationsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Add Feedback to a Specific Conversation
     * @summary Add Feedback to a Specific Conversation
     * @param {string} conversationId ID of the conversation
     * @param {Comment} comment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addFeedbackV1(conversationId: string, comment: Comment, options?: any): AxiosPromise<ConversationFeedback>;
    /**
     * Create a New Conversation
     * @summary Create a New Conversation
     * @param {ConversationInput} conversationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConversationV1(conversationInput: ConversationInput, options?: any): AxiosPromise<ConversationOutput>;
    /**
     * Delete a Specific Conversation by ID
     * @summary Delete a Specific Conversation by ID
     * @param {string} conversationId ID of the conversation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConversationV1(conversationId: string, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * Get a Specific Conversation by ID
     * @summary Get a Specific Conversation by ID
     * @param {string} conversationId ID of the conversation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConversationV1(conversationId: string, options?: any): AxiosPromise<ConversationOutput>;
    /**
     * List All Conversations
     * @summary List All Conversations
     * @param {AppEnumInput} [app]
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConversationsV1(app?: AppEnumInput, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): AxiosPromise<Array<ConversationOutput>>;
    /**
     * Update a Specific Conversation by ID
     * @summary Update a Specific Conversation by ID
     * @param {string} conversationId ID of the conversation
     * @param {ConversationInput} conversationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConversationV1(conversationId: string, conversationInput: ConversationInput, options?: any): AxiosPromise<ConversationOutput>;
};
/**
 * ConversationsApi - object-oriented interface
 * @export
 * @class ConversationsApi
 * @extends {BaseAPI}
 */
export declare class ConversationsApi extends BaseAPI {
    /**
     * Add Feedback to a Specific Conversation
     * @summary Add Feedback to a Specific Conversation
     * @param {string} conversationId ID of the conversation
     * @param {Comment} comment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    addFeedbackV1(conversationId: string, comment: Comment, options?: any): Promise<import("axios").AxiosResponse<ConversationFeedback>>;
    /**
     * Create a New Conversation
     * @summary Create a New Conversation
     * @param {ConversationInput} conversationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    createConversationV1(conversationInput: ConversationInput, options?: any): Promise<import("axios").AxiosResponse<ConversationOutput>>;
    /**
     * Delete a Specific Conversation by ID
     * @summary Delete a Specific Conversation by ID
     * @param {string} conversationId ID of the conversation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    deleteConversationV1(conversationId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * Get a Specific Conversation by ID
     * @summary Get a Specific Conversation by ID
     * @param {string} conversationId ID of the conversation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    getConversationV1(conversationId: string, options?: any): Promise<import("axios").AxiosResponse<ConversationOutput>>;
    /**
     * List All Conversations
     * @summary List All Conversations
     * @param {AppEnumInput} [app]
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    listConversationsV1(app?: AppEnumInput, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<import("axios").AxiosResponse<ConversationOutput[]>>;
    /**
     * Update a Specific Conversation by ID
     * @summary Update a Specific Conversation by ID
     * @param {string} conversationId ID of the conversation
     * @param {ConversationInput} conversationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConversationsApi
     */
    updateConversationV1(conversationId: string, conversationInput: ConversationInput, options?: any): Promise<import("axios").AxiosResponse<ConversationOutput>>;
}
/**
 * DataPlaneApi - axios parameter creator
 * @export
 */
export declare const DataPlaneApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a new connection for an AI Agent to start a voice conversation
     * @summary Create Connection
     * @param {string} agentId
     * @param {ConnectionSource} connectionSource
     * @param {string} [prospectId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConnection: (agentId: string, connectionSource: ConnectionSource, prospectId?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get the audio stream xml for Plivo to start a voice conversation
     * @summary Get Audio Stream XML For Plivo
     * @param {string} connectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlivoAudioStreamXml: (connectionId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List connections
     * @summary Listconnections
     * @param {string} [sourceName]
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConnections: (sourceName?: string, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any) => Promise<RequestArgs>;
};
/**
 * DataPlaneApi - functional programming interface
 * @export
 */
export declare const DataPlaneApiFp: (configuration?: Configuration) => {
    /**
     * Create a new connection for an AI Agent to start a voice conversation
     * @summary Create Connection
     * @param {string} agentId
     * @param {ConnectionSource} connectionSource
     * @param {string} [prospectId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConnection(agentId: string, connectionSource: ConnectionSource, prospectId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectionOutput>>;
    /**
     * Get the audio stream xml for Plivo to start a voice conversation
     * @summary Get Audio Stream XML For Plivo
     * @param {string} connectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlivoAudioStreamXml(connectionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * List connections
     * @summary Listconnections
     * @param {string} [sourceName]
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConnections(sourceName?: string, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConnectionOutput>>>;
};
/**
 * DataPlaneApi - factory interface
 * @export
 */
export declare const DataPlaneApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a new connection for an AI Agent to start a voice conversation
     * @summary Create Connection
     * @param {string} agentId
     * @param {ConnectionSource} connectionSource
     * @param {string} [prospectId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConnection(agentId: string, connectionSource: ConnectionSource, prospectId?: string, options?: any): AxiosPromise<ConnectionOutput>;
    /**
     * Get the audio stream xml for Plivo to start a voice conversation
     * @summary Get Audio Stream XML For Plivo
     * @param {string} connectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlivoAudioStreamXml(connectionId: string, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * List connections
     * @summary Listconnections
     * @param {string} [sourceName]
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listConnections(sourceName?: string, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): AxiosPromise<Array<ConnectionOutput>>;
};
/**
 * DataPlaneApi - object-oriented interface
 * @export
 * @class DataPlaneApi
 * @extends {BaseAPI}
 */
export declare class DataPlaneApi extends BaseAPI {
    /**
     * Create a new connection for an AI Agent to start a voice conversation
     * @summary Create Connection
     * @param {string} agentId
     * @param {ConnectionSource} connectionSource
     * @param {string} [prospectId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataPlaneApi
     */
    createConnection(agentId: string, connectionSource: ConnectionSource, prospectId?: string, options?: any): Promise<import("axios").AxiosResponse<ConnectionOutput>>;
    /**
     * Get the audio stream xml for Plivo to start a voice conversation
     * @summary Get Audio Stream XML For Plivo
     * @param {string} connectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataPlaneApi
     */
    getPlivoAudioStreamXml(connectionId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * List connections
     * @summary Listconnections
     * @param {string} [sourceName]
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataPlaneApi
     */
    listConnections(sourceName?: string, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<import("axios").AxiosResponse<ConnectionOutput[]>>;
}
/**
 * FilesApi - axios parameter creator
 * @export
 */
export declare const FilesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete files from Trata account
     * @summary Delete Files
     * @param {string} fileIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFileV1: (fileIds: string, options?: any) => Promise<RequestArgs>;
    /**
     * Upload file to Trata account to use in AI Agents
     * @summary Upload Files
     * @param {Array<any>} files
     * @param {string} [validator] Validator type to use for file validation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFileV1: (files: Array<any>, validator?: string, options?: any) => Promise<RequestArgs>;
};
/**
 * FilesApi - functional programming interface
 * @export
 */
export declare const FilesApiFp: (configuration?: Configuration) => {
    /**
     * Delete files from Trata account
     * @summary Delete Files
     * @param {string} fileIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFileV1(fileIds: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>>;
    /**
     * Upload file to Trata account to use in AI Agents
     * @summary Upload Files
     * @param {Array<any>} files
     * @param {string} [validator] Validator type to use for file validation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFileV1(files: Array<any>, validator?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Files>>>;
};
/**
 * FilesApi - factory interface
 * @export
 */
export declare const FilesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete files from Trata account
     * @summary Delete Files
     * @param {string} fileIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFileV1(fileIds: string, options?: any): AxiosPromise<boolean>;
    /**
     * Upload file to Trata account to use in AI Agents
     * @summary Upload Files
     * @param {Array<any>} files
     * @param {string} [validator] Validator type to use for file validation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFileV1(files: Array<any>, validator?: string, options?: any): AxiosPromise<Array<Files>>;
};
/**
 * FilesApi - object-oriented interface
 * @export
 * @class FilesApi
 * @extends {BaseAPI}
 */
export declare class FilesApi extends BaseAPI {
    /**
     * Delete files from Trata account
     * @summary Delete Files
     * @param {string} fileIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    deleteFileV1(fileIds: string, options?: any): Promise<import("axios").AxiosResponse<boolean>>;
    /**
     * Upload file to Trata account to use in AI Agents
     * @summary Upload Files
     * @param {Array<any>} files
     * @param {string} [validator] Validator type to use for file validation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    uploadFileV1(files: Array<any>, validator?: string, options?: any): Promise<import("axios").AxiosResponse<Files[]>>;
}
/**
 * HealthApi - axios parameter creator
 * @export
 */
export declare const HealthApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Heart Beat check to check the health of Trata Backend
     * @summary Heart Beat Status Of Trata Backend
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusStatusGet: (options?: any) => Promise<RequestArgs>;
    /**
     * Heart Beat check to check the health of Workflow Service
     * @summary Heart Beat Status Of Workflow Service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusWorkflowsStatusGet: (options?: any) => Promise<RequestArgs>;
};
/**
 * HealthApi - functional programming interface
 * @export
 */
export declare const HealthApiFp: (configuration?: Configuration) => {
    /**
     * Heart Beat check to check the health of Trata Backend
     * @summary Heart Beat Status Of Trata Backend
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusStatusGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Heart Beat check to check the health of Workflow Service
     * @summary Heart Beat Status Of Workflow Service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusWorkflowsStatusGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
};
/**
 * HealthApi - factory interface
 * @export
 */
export declare const HealthApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Heart Beat check to check the health of Trata Backend
     * @summary Heart Beat Status Of Trata Backend
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusStatusGet(options?: any): AxiosPromise<object>;
    /**
     * Heart Beat check to check the health of Workflow Service
     * @summary Heart Beat Status Of Workflow Service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusWorkflowsStatusGet(options?: any): AxiosPromise<object>;
};
/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export declare class HealthApi extends BaseAPI {
    /**
     * Heart Beat check to check the health of Trata Backend
     * @summary Heart Beat Status Of Trata Backend
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    statusStatusGet(options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     * Heart Beat check to check the health of Workflow Service
     * @summary Heart Beat Status Of Workflow Service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    statusWorkflowsStatusGet(options?: any): Promise<import("axios").AxiosResponse<object>>;
}
/**
 * HiveApi - axios parameter creator
 * @export
 */
export declare const HiveApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Hive is a collection of documents that are used to train the Agent. Hive can be a PDF, DOCX, TXT or a website URL
     * @summary Create a New Hive
     * @param {HiveContentInput} hiveContentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createHiveV1: (hiveContentInput: HiveContentInput, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a Specific Hive by ID
     * @summary Delete a Specific Hive by ID
     * @param {string} hiveId ID of the hive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteHiveV1: (hiveId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a Specific Hive by ID
     * @summary Get a Specific Hive by ID
     * @param {string} hiveId ID of the hive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHiveV1: (hiveId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List All Hives
     * @summary List All Hives
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listHivesV1: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Update a Specific Hive by ID
     * @summary Update a Specific Hive by ID
     * @param {string} hiveId ID of the hive
     * @param {HiveContentOutput} hiveContentOutput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateHiveV1: (hiveId: string, hiveContentOutput: HiveContentOutput, options?: any) => Promise<RequestArgs>;
};
/**
 * HiveApi - functional programming interface
 * @export
 */
export declare const HiveApiFp: (configuration?: Configuration) => {
    /**
     * Hive is a collection of documents that are used to train the Agent. Hive can be a PDF, DOCX, TXT or a website URL
     * @summary Create a New Hive
     * @param {HiveContentInput} hiveContentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createHiveV1(hiveContentInput: HiveContentInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Hive>>;
    /**
     * Delete a Specific Hive by ID
     * @summary Delete a Specific Hive by ID
     * @param {string} hiveId ID of the hive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteHiveV1(hiveId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * Get a Specific Hive by ID
     * @summary Get a Specific Hive by ID
     * @param {string} hiveId ID of the hive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHiveV1(hiveId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Hive>>;
    /**
     * List All Hives
     * @summary List All Hives
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listHivesV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Hive>>>;
    /**
     * Update a Specific Hive by ID
     * @summary Update a Specific Hive by ID
     * @param {string} hiveId ID of the hive
     * @param {HiveContentOutput} hiveContentOutput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateHiveV1(hiveId: string, hiveContentOutput: HiveContentOutput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Hive>>;
};
/**
 * HiveApi - factory interface
 * @export
 */
export declare const HiveApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Hive is a collection of documents that are used to train the Agent. Hive can be a PDF, DOCX, TXT or a website URL
     * @summary Create a New Hive
     * @param {HiveContentInput} hiveContentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createHiveV1(hiveContentInput: HiveContentInput, options?: any): AxiosPromise<Hive>;
    /**
     * Delete a Specific Hive by ID
     * @summary Delete a Specific Hive by ID
     * @param {string} hiveId ID of the hive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteHiveV1(hiveId: string, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * Get a Specific Hive by ID
     * @summary Get a Specific Hive by ID
     * @param {string} hiveId ID of the hive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHiveV1(hiveId: string, options?: any): AxiosPromise<Hive>;
    /**
     * List All Hives
     * @summary List All Hives
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listHivesV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): AxiosPromise<Array<Hive>>;
    /**
     * Update a Specific Hive by ID
     * @summary Update a Specific Hive by ID
     * @param {string} hiveId ID of the hive
     * @param {HiveContentOutput} hiveContentOutput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateHiveV1(hiveId: string, hiveContentOutput: HiveContentOutput, options?: any): AxiosPromise<Hive>;
};
/**
 * HiveApi - object-oriented interface
 * @export
 * @class HiveApi
 * @extends {BaseAPI}
 */
export declare class HiveApi extends BaseAPI {
    /**
     * Hive is a collection of documents that are used to train the Agent. Hive can be a PDF, DOCX, TXT or a website URL
     * @summary Create a New Hive
     * @param {HiveContentInput} hiveContentInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HiveApi
     */
    createHiveV1(hiveContentInput: HiveContentInput, options?: any): Promise<import("axios").AxiosResponse<Hive>>;
    /**
     * Delete a Specific Hive by ID
     * @summary Delete a Specific Hive by ID
     * @param {string} hiveId ID of the hive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HiveApi
     */
    deleteHiveV1(hiveId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * Get a Specific Hive by ID
     * @summary Get a Specific Hive by ID
     * @param {string} hiveId ID of the hive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HiveApi
     */
    getHiveV1(hiveId: string, options?: any): Promise<import("axios").AxiosResponse<Hive>>;
    /**
     * List All Hives
     * @summary List All Hives
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HiveApi
     */
    listHivesV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<import("axios").AxiosResponse<Hive[]>>;
    /**
     * Update a Specific Hive by ID
     * @summary Update a Specific Hive by ID
     * @param {string} hiveId ID of the hive
     * @param {HiveContentOutput} hiveContentOutput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HiveApi
     */
    updateHiveV1(hiveId: string, hiveContentOutput: HiveContentOutput, options?: any): Promise<import("axios").AxiosResponse<Hive>>;
}
/**
 * HiveAgentLinkApi - axios parameter creator
 * @export
 */
export declare const HiveAgentLinkApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a Link Between a Hive and an Agent
     * @summary Create a Link Between a Hive and an Agent
     * @param {string} hiveId ID of the hive
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createHiveAgentLinkV1: (hiveId: string, agentId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a Link Between a Hive and an Agent
     * @summary Delete a Link Between a Hive and an Agent
     * @param {string} hiveId ID of the hive
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteHiveAgentLinkV1: (hiveId: string, agentId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List All Agents Linked to a Specific Hive
     * @summary List All Agents Linked to a Specific Hive
     * @param {string} hiveId ID of the hive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAgentsOfHiveV1: (hiveId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List All Hives Linked to a Specific Agent
     * @summary List All Hives Linked to a Specific Agent
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listHivesOfAgentV1: (agentId: string, options?: any) => Promise<RequestArgs>;
};
/**
 * HiveAgentLinkApi - functional programming interface
 * @export
 */
export declare const HiveAgentLinkApiFp: (configuration?: Configuration) => {
    /**
     * Create a Link Between a Hive and an Agent
     * @summary Create a Link Between a Hive and an Agent
     * @param {string} hiveId ID of the hive
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createHiveAgentLinkV1(hiveId: string, agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * Delete a Link Between a Hive and an Agent
     * @summary Delete a Link Between a Hive and an Agent
     * @param {string} hiveId ID of the hive
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteHiveAgentLinkV1(hiveId: string, agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * List All Agents Linked to a Specific Hive
     * @summary List All Agents Linked to a Specific Hive
     * @param {string} hiveId ID of the hive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAgentsOfHiveV1(hiveId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AIAgentOutput>>>;
    /**
     * List All Hives Linked to a Specific Agent
     * @summary List All Hives Linked to a Specific Agent
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listHivesOfAgentV1(agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Hive>>>;
};
/**
 * HiveAgentLinkApi - factory interface
 * @export
 */
export declare const HiveAgentLinkApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a Link Between a Hive and an Agent
     * @summary Create a Link Between a Hive and an Agent
     * @param {string} hiveId ID of the hive
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createHiveAgentLinkV1(hiveId: string, agentId: string, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * Delete a Link Between a Hive and an Agent
     * @summary Delete a Link Between a Hive and an Agent
     * @param {string} hiveId ID of the hive
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteHiveAgentLinkV1(hiveId: string, agentId: string, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * List All Agents Linked to a Specific Hive
     * @summary List All Agents Linked to a Specific Hive
     * @param {string} hiveId ID of the hive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAgentsOfHiveV1(hiveId: string, options?: any): AxiosPromise<Array<AIAgentOutput>>;
    /**
     * List All Hives Linked to a Specific Agent
     * @summary List All Hives Linked to a Specific Agent
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listHivesOfAgentV1(agentId: string, options?: any): AxiosPromise<Array<Hive>>;
};
/**
 * HiveAgentLinkApi - object-oriented interface
 * @export
 * @class HiveAgentLinkApi
 * @extends {BaseAPI}
 */
export declare class HiveAgentLinkApi extends BaseAPI {
    /**
     * Create a Link Between a Hive and an Agent
     * @summary Create a Link Between a Hive and an Agent
     * @param {string} hiveId ID of the hive
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HiveAgentLinkApi
     */
    createHiveAgentLinkV1(hiveId: string, agentId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * Delete a Link Between a Hive and an Agent
     * @summary Delete a Link Between a Hive and an Agent
     * @param {string} hiveId ID of the hive
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HiveAgentLinkApi
     */
    deleteHiveAgentLinkV1(hiveId: string, agentId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * List All Agents Linked to a Specific Hive
     * @summary List All Agents Linked to a Specific Hive
     * @param {string} hiveId ID of the hive
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HiveAgentLinkApi
     */
    listAgentsOfHiveV1(hiveId: string, options?: any): Promise<import("axios").AxiosResponse<AIAgentOutput[]>>;
    /**
     * List All Hives Linked to a Specific Agent
     * @summary List All Hives Linked to a Specific Agent
     * @param {string} agentId ID of the agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HiveAgentLinkApi
     */
    listHivesOfAgentV1(agentId: string, options?: any): Promise<import("axios").AxiosResponse<Hive[]>>;
}
/**
 * InternalApi - axios parameter creator
 * @export
 */
export declare const InternalApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Accept invite and add new user to organization
     * @summary Acceptinvite
     * @param {AcceptInviteRequest} acceptInviteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptInviteV1: (acceptInviteRequest: AcceptInviteRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a new organization and adds the user as the \"ADMIN\" user for the org
     * @summary Createorganization
     * @param {BodyCreateOrganizationV1} bodyCreateOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganizationV1: (bodyCreateOrganizationV1: BodyCreateOrganizationV1, options?: any) => Promise<RequestArgs>;
    /**
     * Create a new user
     * @summary Createuser
     * @param {UserPayload} userPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserV1: (userPayload: UserPayload, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Deleteorganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganizationV1: (options?: any) => Promise<RequestArgs>;
    /**
     * Delete a user
     * @summary Deleteuser
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserV1: (userId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get customer credits
     * @summary Get Customer Credits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerCreditsV1: (options?: any) => Promise<RequestArgs>;
    /**
     * Get customer pricing
     * @summary Get Customer Pricing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerPricingV1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Getorganizationbranding
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationBrandingV1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Getorganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationV1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Getuserbyid
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserByIdV1: (userId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List of all open invites from the organization
     * @summary Listinvites
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listInvitesV1: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Lists all users under the user\'s organization
     * @summary Listusers
     * @param {boolean} [showResellerOwner] Show owner users
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsersV1: (showResellerOwner?: boolean, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Invite a new user to an organization or resend invite to the user if the user is already invited
     * @summary Inviteusers
     * @param {GuestInput} guestInput
     * @param {string} [app] The app to use for the invite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendInviteV1: (guestInput: GuestInput, app?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Updateorganization
     * @param {string} orgId ID of the organization
     * @param {OrganizationInput} organizationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationV1: (orgId: string, organizationInput: OrganizationInput, options?: any) => Promise<RequestArgs>;
    /**
     * Update user details
     * @summary Updateuser
     * @param {string} userId
     * @param {UserPayload} userPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserV1: (userId: string, userPayload: UserPayload, options?: any) => Promise<RequestArgs>;
};
/**
 * InternalApi - functional programming interface
 * @export
 */
export declare const InternalApiFp: (configuration?: Configuration) => {
    /**
     * Accept invite and add new user to organization
     * @summary Acceptinvite
     * @param {AcceptInviteRequest} acceptInviteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptInviteV1(acceptInviteRequest: AcceptInviteRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     * Creates a new organization and adds the user as the \"ADMIN\" user for the org
     * @summary Createorganization
     * @param {BodyCreateOrganizationV1} bodyCreateOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganizationV1(bodyCreateOrganizationV1: BodyCreateOrganizationV1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     * Create a new user
     * @summary Createuser
     * @param {UserPayload} userPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserV1(userPayload: UserPayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     *
     * @summary Deleteorganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganizationV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * Delete a user
     * @summary Deleteuser
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserV1(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     * Get customer credits
     * @summary Get Customer Credits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerCreditsV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Credit>>>;
    /**
     * Get customer pricing
     * @summary Get Customer Pricing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerPricingV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Price>>>;
    /**
     *
     * @summary Getorganizationbranding
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationBrandingV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerBranding | object>>;
    /**
     *
     * @summary Getorganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationOutput>>;
    /**
     *
     * @summary Getuserbyid
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserByIdV1(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     * List of all open invites from the organization
     * @summary Listinvites
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listInvitesV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GuestOutput>>>;
    /**
     * Lists all users under the user\'s organization
     * @summary Listusers
     * @param {boolean} [showResellerOwner] Show owner users
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsersV1(showResellerOwner?: boolean, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>>;
    /**
     * Invite a new user to an organization or resend invite to the user if the user is already invited
     * @summary Inviteusers
     * @param {GuestInput} guestInput
     * @param {string} [app] The app to use for the invite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendInviteV1(guestInput: GuestInput, app?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GuestOutput>>;
    /**
     *
     * @summary Updateorganization
     * @param {string} orgId ID of the organization
     * @param {OrganizationInput} organizationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationV1(orgId: string, organizationInput: OrganizationInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationOutput>>;
    /**
     * Update user details
     * @summary Updateuser
     * @param {string} userId
     * @param {UserPayload} userPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserV1(userId: string, userPayload: UserPayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
};
/**
 * InternalApi - factory interface
 * @export
 */
export declare const InternalApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Accept invite and add new user to organization
     * @summary Acceptinvite
     * @param {AcceptInviteRequest} acceptInviteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptInviteV1(acceptInviteRequest: AcceptInviteRequest, options?: any): AxiosPromise<User>;
    /**
     * Creates a new organization and adds the user as the \"ADMIN\" user for the org
     * @summary Createorganization
     * @param {BodyCreateOrganizationV1} bodyCreateOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganizationV1(bodyCreateOrganizationV1: BodyCreateOrganizationV1, options?: any): AxiosPromise<User>;
    /**
     * Create a new user
     * @summary Createuser
     * @param {UserPayload} userPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserV1(userPayload: UserPayload, options?: any): AxiosPromise<User>;
    /**
     *
     * @summary Deleteorganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganizationV1(options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * Delete a user
     * @summary Deleteuser
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserV1(userId: string, options?: any): AxiosPromise<User>;
    /**
     * Get customer credits
     * @summary Get Customer Credits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerCreditsV1(options?: any): AxiosPromise<Array<Credit>>;
    /**
     * Get customer pricing
     * @summary Get Customer Pricing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerPricingV1(options?: any): AxiosPromise<Array<Price>>;
    /**
     *
     * @summary Getorganizationbranding
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationBrandingV1(options?: any): AxiosPromise<CustomerBranding | object>;
    /**
     *
     * @summary Getorganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationV1(options?: any): AxiosPromise<OrganizationOutput>;
    /**
     *
     * @summary Getuserbyid
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserByIdV1(userId: string, options?: any): AxiosPromise<User>;
    /**
     * List of all open invites from the organization
     * @summary Listinvites
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listInvitesV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): AxiosPromise<Array<GuestOutput>>;
    /**
     * Lists all users under the user\'s organization
     * @summary Listusers
     * @param {boolean} [showResellerOwner] Show owner users
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsersV1(showResellerOwner?: boolean, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): AxiosPromise<Array<User>>;
    /**
     * Invite a new user to an organization or resend invite to the user if the user is already invited
     * @summary Inviteusers
     * @param {GuestInput} guestInput
     * @param {string} [app] The app to use for the invite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendInviteV1(guestInput: GuestInput, app?: string, options?: any): AxiosPromise<GuestOutput>;
    /**
     *
     * @summary Updateorganization
     * @param {string} orgId ID of the organization
     * @param {OrganizationInput} organizationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationV1(orgId: string, organizationInput: OrganizationInput, options?: any): AxiosPromise<OrganizationOutput>;
    /**
     * Update user details
     * @summary Updateuser
     * @param {string} userId
     * @param {UserPayload} userPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserV1(userId: string, userPayload: UserPayload, options?: any): AxiosPromise<User>;
};
/**
 * InternalApi - object-oriented interface
 * @export
 * @class InternalApi
 * @extends {BaseAPI}
 */
export declare class InternalApi extends BaseAPI {
    /**
     * Accept invite and add new user to organization
     * @summary Acceptinvite
     * @param {AcceptInviteRequest} acceptInviteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    acceptInviteV1(acceptInviteRequest: AcceptInviteRequest, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     * Creates a new organization and adds the user as the \"ADMIN\" user for the org
     * @summary Createorganization
     * @param {BodyCreateOrganizationV1} bodyCreateOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    createOrganizationV1(bodyCreateOrganizationV1: BodyCreateOrganizationV1, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     * Create a new user
     * @summary Createuser
     * @param {UserPayload} userPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    createUserV1(userPayload: UserPayload, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     *
     * @summary Deleteorganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    deleteOrganizationV1(options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * Delete a user
     * @summary Deleteuser
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    deleteUserV1(userId: string, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     * Get customer credits
     * @summary Get Customer Credits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    getCustomerCreditsV1(options?: any): Promise<import("axios").AxiosResponse<Credit[]>>;
    /**
     * Get customer pricing
     * @summary Get Customer Pricing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    getCustomerPricingV1(options?: any): Promise<import("axios").AxiosResponse<Price[]>>;
    /**
     *
     * @summary Getorganizationbranding
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    getOrganizationBrandingV1(options?: any): Promise<import("axios").AxiosResponse<object | CustomerBranding>>;
    /**
     *
     * @summary Getorganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    getOrganizationV1(options?: any): Promise<import("axios").AxiosResponse<OrganizationOutput>>;
    /**
     *
     * @summary Getuserbyid
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    getUserByIdV1(userId: string, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     * List of all open invites from the organization
     * @summary Listinvites
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    listInvitesV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<import("axios").AxiosResponse<GuestOutput[]>>;
    /**
     * Lists all users under the user\'s organization
     * @summary Listusers
     * @param {boolean} [showResellerOwner] Show owner users
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    listUsersV1(showResellerOwner?: boolean, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<import("axios").AxiosResponse<User[]>>;
    /**
     * Invite a new user to an organization or resend invite to the user if the user is already invited
     * @summary Inviteusers
     * @param {GuestInput} guestInput
     * @param {string} [app] The app to use for the invite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    sendInviteV1(guestInput: GuestInput, app?: string, options?: any): Promise<import("axios").AxiosResponse<GuestOutput>>;
    /**
     *
     * @summary Updateorganization
     * @param {string} orgId ID of the organization
     * @param {OrganizationInput} organizationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    updateOrganizationV1(orgId: string, organizationInput: OrganizationInput, options?: any): Promise<import("axios").AxiosResponse<OrganizationOutput>>;
    /**
     * Update user details
     * @summary Updateuser
     * @param {string} userId
     * @param {UserPayload} userPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    updateUserV1(userId: string, userPayload: UserPayload, options?: any): Promise<import("axios").AxiosResponse<User>>;
}
/**
 * ProductsApi - axios parameter creator
 * @export
 */
export declare const ProductsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a New Product
     * @summary Create a New Product
     * @param {ProductInput} productInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProductV1: (productInput: ProductInput, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a Specific Product by ID
     * @summary Delete a Specific Product by ID
     * @param {string} productId ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductV1: (productId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a Specific Product by ID
     * @summary Get a Specific Product by ID
     * @param {string} productId ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductV1: (productId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List All Agents Linked to a Specific Product
     * @summary List All Agents Linked to a Specific Product
     * @param {string} productId ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAgentsOfProductV1: (productId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List All Products
     * @summary List All Products
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {string} [tags]
     * @param {string} [productIds]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProductsV1: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, tags?: string, productIds?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Update a Specific Product by ID
     * @summary Update a Specific Product by ID
     * @param {string} productId ID of the product
     * @param {ProductInput} productInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProductV1: (productId: string, productInput: ProductInput, options?: any) => Promise<RequestArgs>;
};
/**
 * ProductsApi - functional programming interface
 * @export
 */
export declare const ProductsApiFp: (configuration?: Configuration) => {
    /**
     * Create a New Product
     * @summary Create a New Product
     * @param {ProductInput} productInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProductV1(productInput: ProductInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductOutput>>;
    /**
     * Delete a Specific Product by ID
     * @summary Delete a Specific Product by ID
     * @param {string} productId ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductV1(productId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * Get a Specific Product by ID
     * @summary Get a Specific Product by ID
     * @param {string} productId ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductV1(productId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductOutput>>;
    /**
     * List All Agents Linked to a Specific Product
     * @summary List All Agents Linked to a Specific Product
     * @param {string} productId ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAgentsOfProductV1(productId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AIAgentOutput>>>;
    /**
     * List All Products
     * @summary List All Products
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {string} [tags]
     * @param {string} [productIds]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProductsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, tags?: string, productIds?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductOutput>>>;
    /**
     * Update a Specific Product by ID
     * @summary Update a Specific Product by ID
     * @param {string} productId ID of the product
     * @param {ProductInput} productInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProductV1(productId: string, productInput: ProductInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductOutput>>;
};
/**
 * ProductsApi - factory interface
 * @export
 */
export declare const ProductsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a New Product
     * @summary Create a New Product
     * @param {ProductInput} productInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProductV1(productInput: ProductInput, options?: any): AxiosPromise<ProductOutput>;
    /**
     * Delete a Specific Product by ID
     * @summary Delete a Specific Product by ID
     * @param {string} productId ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProductV1(productId: string, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * Get a Specific Product by ID
     * @summary Get a Specific Product by ID
     * @param {string} productId ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductV1(productId: string, options?: any): AxiosPromise<ProductOutput>;
    /**
     * List All Agents Linked to a Specific Product
     * @summary List All Agents Linked to a Specific Product
     * @param {string} productId ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAgentsOfProductV1(productId: string, options?: any): AxiosPromise<Array<AIAgentOutput>>;
    /**
     * List All Products
     * @summary List All Products
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {string} [tags]
     * @param {string} [productIds]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProductsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, tags?: string, productIds?: string, options?: any): AxiosPromise<Array<ProductOutput>>;
    /**
     * Update a Specific Product by ID
     * @summary Update a Specific Product by ID
     * @param {string} productId ID of the product
     * @param {ProductInput} productInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProductV1(productId: string, productInput: ProductInput, options?: any): AxiosPromise<ProductOutput>;
};
/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export declare class ProductsApi extends BaseAPI {
    /**
     * Create a New Product
     * @summary Create a New Product
     * @param {ProductInput} productInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    createProductV1(productInput: ProductInput, options?: any): Promise<import("axios").AxiosResponse<ProductOutput>>;
    /**
     * Delete a Specific Product by ID
     * @summary Delete a Specific Product by ID
     * @param {string} productId ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    deleteProductV1(productId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * Get a Specific Product by ID
     * @summary Get a Specific Product by ID
     * @param {string} productId ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    getProductV1(productId: string, options?: any): Promise<import("axios").AxiosResponse<ProductOutput>>;
    /**
     * List All Agents Linked to a Specific Product
     * @summary List All Agents Linked to a Specific Product
     * @param {string} productId ID of the product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    listAgentsOfProductV1(productId: string, options?: any): Promise<import("axios").AxiosResponse<AIAgentOutput[]>>;
    /**
     * List All Products
     * @summary List All Products
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {string} [tags]
     * @param {string} [productIds]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    listProductsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, tags?: string, productIds?: string, options?: any): Promise<import("axios").AxiosResponse<ProductOutput[]>>;
    /**
     * Update a Specific Product by ID
     * @summary Update a Specific Product by ID
     * @param {string} productId ID of the product
     * @param {ProductInput} productInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    updateProductV1(productId: string, productInput: ProductInput, options?: any): Promise<import("axios").AxiosResponse<ProductOutput>>;
}
/**
 * ProspectsApi - axios parameter creator
 * @export
 */
export declare const ProspectsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a New Prospect
     * @summary Create a New Prospect
     * @param {ProspectInput} prospectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProspectV1: (prospectInput: ProspectInput, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a Specific Prospect by ID
     * @summary Delete a Specific Prospect by ID
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProspectV1: (prospectId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a Specific Prospect by ID
     * @summary Get a Specific Prospect by ID
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProspectV1: (prospectId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List All Prospects
     * @summary List All Prospects
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProspectsV1: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Update a Specific Prospect by ID
     * @summary Update a Specific Prospect by ID
     * @param {string} prospectId ID of the prospect
     * @param {ProspectInput} prospectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProspectV1: (prospectId: string, prospectInput: ProspectInput, options?: any) => Promise<RequestArgs>;
};
/**
 * ProspectsApi - functional programming interface
 * @export
 */
export declare const ProspectsApiFp: (configuration?: Configuration) => {
    /**
     * Create a New Prospect
     * @summary Create a New Prospect
     * @param {ProspectInput} prospectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProspectV1(prospectInput: ProspectInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProspectOutput>>;
    /**
     * Delete a Specific Prospect by ID
     * @summary Delete a Specific Prospect by ID
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProspectV1(prospectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * Get a Specific Prospect by ID
     * @summary Get a Specific Prospect by ID
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProspectV1(prospectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProspectOutput>>;
    /**
     * List All Prospects
     * @summary List All Prospects
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProspectsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProspectOutput>>>;
    /**
     * Update a Specific Prospect by ID
     * @summary Update a Specific Prospect by ID
     * @param {string} prospectId ID of the prospect
     * @param {ProspectInput} prospectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProspectV1(prospectId: string, prospectInput: ProspectInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProspectOutput>>;
};
/**
 * ProspectsApi - factory interface
 * @export
 */
export declare const ProspectsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a New Prospect
     * @summary Create a New Prospect
     * @param {ProspectInput} prospectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProspectV1(prospectInput: ProspectInput, options?: any): AxiosPromise<ProspectOutput>;
    /**
     * Delete a Specific Prospect by ID
     * @summary Delete a Specific Prospect by ID
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProspectV1(prospectId: string, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * Get a Specific Prospect by ID
     * @summary Get a Specific Prospect by ID
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProspectV1(prospectId: string, options?: any): AxiosPromise<ProspectOutput>;
    /**
     * List All Prospects
     * @summary List All Prospects
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProspectsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): AxiosPromise<Array<ProspectOutput>>;
    /**
     * Update a Specific Prospect by ID
     * @summary Update a Specific Prospect by ID
     * @param {string} prospectId ID of the prospect
     * @param {ProspectInput} prospectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProspectV1(prospectId: string, prospectInput: ProspectInput, options?: any): AxiosPromise<ProspectOutput>;
};
/**
 * ProspectsApi - object-oriented interface
 * @export
 * @class ProspectsApi
 * @extends {BaseAPI}
 */
export declare class ProspectsApi extends BaseAPI {
    /**
     * Create a New Prospect
     * @summary Create a New Prospect
     * @param {ProspectInput} prospectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProspectsApi
     */
    createProspectV1(prospectInput: ProspectInput, options?: any): Promise<import("axios").AxiosResponse<ProspectOutput>>;
    /**
     * Delete a Specific Prospect by ID
     * @summary Delete a Specific Prospect by ID
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProspectsApi
     */
    deleteProspectV1(prospectId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * Get a Specific Prospect by ID
     * @summary Get a Specific Prospect by ID
     * @param {string} prospectId ID of the prospect
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProspectsApi
     */
    getProspectV1(prospectId: string, options?: any): Promise<import("axios").AxiosResponse<ProspectOutput>>;
    /**
     * List All Prospects
     * @summary List All Prospects
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProspectsApi
     */
    listProspectsV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<import("axios").AxiosResponse<ProspectOutput[]>>;
    /**
     * Update a Specific Prospect by ID
     * @summary Update a Specific Prospect by ID
     * @param {string} prospectId ID of the prospect
     * @param {ProspectInput} prospectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProspectsApi
     */
    updateProspectV1(prospectId: string, prospectInput: ProspectInput, options?: any): Promise<import("axios").AxiosResponse<ProspectOutput>>;
}
/**
 * ResellerCourseAssignmentsApi - axios parameter creator
 * @export
 */
export declare const ResellerCourseAssignmentsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Assign or remove courses for reseller customers
     * @summary Change Reseller Course Assignments
     * @param {ChangeAssignmentRequest} changeAssignmentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeResellerCourseAssignmentsV1: (changeAssignmentRequest: ChangeAssignmentRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Get all courses that have been assigned to a specific customer
     * @summary Get Assigned Courses By Customer V1
     * @param {string} customerOrgId
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAssignedCoursesByCustomerV1: (customerOrgId: string, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get all customers with their course assignment status
     * @summary Get Customers By Assigned Course V1
     * @param {string} courseId
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomersByAssignedCourseV1: (courseId: string, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any) => Promise<RequestArgs>;
};
/**
 * ResellerCourseAssignmentsApi - functional programming interface
 * @export
 */
export declare const ResellerCourseAssignmentsApiFp: (configuration?: Configuration) => {
    /**
     * Assign or remove courses for reseller customers
     * @summary Change Reseller Course Assignments
     * @param {ChangeAssignmentRequest} changeAssignmentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeResellerCourseAssignmentsV1(changeAssignmentRequest: ChangeAssignmentRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * Get all courses that have been assigned to a specific customer
     * @summary Get Assigned Courses By Customer V1
     * @param {string} customerOrgId
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAssignedCoursesByCustomerV1(customerOrgId: string, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CourseWithAssignmentStatus>>>;
    /**
     * Get all customers with their course assignment status
     * @summary Get Customers By Assigned Course V1
     * @param {string} courseId
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomersByAssignedCourseV1(courseId: string, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrgWithCourseAssignment>>>;
};
/**
 * ResellerCourseAssignmentsApi - factory interface
 * @export
 */
export declare const ResellerCourseAssignmentsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Assign or remove courses for reseller customers
     * @summary Change Reseller Course Assignments
     * @param {ChangeAssignmentRequest} changeAssignmentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeResellerCourseAssignmentsV1(changeAssignmentRequest: ChangeAssignmentRequest, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * Get all courses that have been assigned to a specific customer
     * @summary Get Assigned Courses By Customer V1
     * @param {string} customerOrgId
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAssignedCoursesByCustomerV1(customerOrgId: string, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): AxiosPromise<Array<CourseWithAssignmentStatus>>;
    /**
     * Get all customers with their course assignment status
     * @summary Get Customers By Assigned Course V1
     * @param {string} courseId
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomersByAssignedCourseV1(courseId: string, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): AxiosPromise<Array<OrgWithCourseAssignment>>;
};
/**
 * ResellerCourseAssignmentsApi - object-oriented interface
 * @export
 * @class ResellerCourseAssignmentsApi
 * @extends {BaseAPI}
 */
export declare class ResellerCourseAssignmentsApi extends BaseAPI {
    /**
     * Assign or remove courses for reseller customers
     * @summary Change Reseller Course Assignments
     * @param {ChangeAssignmentRequest} changeAssignmentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerCourseAssignmentsApi
     */
    changeResellerCourseAssignmentsV1(changeAssignmentRequest: ChangeAssignmentRequest, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * Get all courses that have been assigned to a specific customer
     * @summary Get Assigned Courses By Customer V1
     * @param {string} customerOrgId
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerCourseAssignmentsApi
     */
    getAssignedCoursesByCustomerV1(customerOrgId: string, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<import("axios").AxiosResponse<CourseWithAssignmentStatus[]>>;
    /**
     * Get all customers with their course assignment status
     * @summary Get Customers By Assigned Course V1
     * @param {string} courseId
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerCourseAssignmentsApi
     */
    getCustomersByAssignedCourseV1(courseId: string, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<import("axios").AxiosResponse<OrgWithCourseAssignment[]>>;
}
/**
 * ResellerCustomerApi - axios parameter creator
 * @export
 */
export declare const ResellerCustomerApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a new customer organization under a reseller organization
     * @summary Create Customer V1
     * @param {BodyCreateCustomerOrganizationV1} bodyCreateCustomerOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerOrganizationV1: (bodyCreateCustomerOrganizationV1: BodyCreateCustomerOrganizationV1, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a reseller\'s customer and all associated data
     * @summary Delete Customer V1
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResellerCustomerV1: (customerOrgId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get the basic credentials of a customer organization under a reseller organization.
     * @summary Get Customer Basic Credentials V1
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerBasicCredentialsV1: (customerOrgId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get the customer org credentials for a customer organization under a reseller organization. NOTE: This will only return the custom token of the reseller admin user present in the customer org. Exchange this token with the id token to use it as a firebase credential in the client side.
     * @summary Get Customer Credentials V1
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerCredentialsV1: (customerOrgId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get reseller customer by id
     * @summary Get Reseller Customer By Id V1
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerCustomerByIdV1: (customerOrgId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List reseller customers with prices, users and credits
     * @summary List Reseller Customers V1
     * @param {string} [searchQuery] Search query
     * @param {boolean} [expandPrices] Whether to expand the prices
     * @param {boolean} [expandUsers] Whether to expand the users
     * @param {boolean} [expandCredits] Whether to expand the credits
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResellerCustomersV1: (searchQuery?: string, expandPrices?: boolean, expandUsers?: boolean, expandCredits?: boolean, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Update a customer organization under a reseller organization
     * @summary Update Customer V1
     * @param {string} customerOrgId
     * @param {OrganizationInput} organizationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerOrganizationV1: (customerOrgId: string, organizationInput: OrganizationInput, options?: any) => Promise<RequestArgs>;
};
/**
 * ResellerCustomerApi - functional programming interface
 * @export
 */
export declare const ResellerCustomerApiFp: (configuration?: Configuration) => {
    /**
     * Creates a new customer organization under a reseller organization
     * @summary Create Customer V1
     * @param {BodyCreateCustomerOrganizationV1} bodyCreateCustomerOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerOrganizationV1(bodyCreateCustomerOrganizationV1: BodyCreateCustomerOrganizationV1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * Delete a reseller\'s customer and all associated data
     * @summary Delete Customer V1
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResellerCustomerV1(customerOrgId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * Get the basic credentials of a customer organization under a reseller organization.
     * @summary Get Customer Basic Credentials V1
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerBasicCredentialsV1(customerOrgId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasicCredentials>>;
    /**
     * Get the customer org credentials for a customer organization under a reseller organization. NOTE: This will only return the custom token of the reseller admin user present in the customer org. Exchange this token with the id token to use it as a firebase credential in the client side.
     * @summary Get Customer Credentials V1
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerCredentialsV1(customerOrgId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     * Get reseller customer by id
     * @summary Get Reseller Customer By Id V1
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerCustomerByIdV1(customerOrgId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgUsersPriceCredits>>;
    /**
     * List reseller customers with prices, users and credits
     * @summary List Reseller Customers V1
     * @param {string} [searchQuery] Search query
     * @param {boolean} [expandPrices] Whether to expand the prices
     * @param {boolean} [expandUsers] Whether to expand the users
     * @param {boolean} [expandCredits] Whether to expand the credits
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResellerCustomersV1(searchQuery?: string, expandPrices?: boolean, expandUsers?: boolean, expandCredits?: boolean, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrgUsersPriceCredits>>>;
    /**
     * Update a customer organization under a reseller organization
     * @summary Update Customer V1
     * @param {string} customerOrgId
     * @param {OrganizationInput} organizationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerOrganizationV1(customerOrgId: string, organizationInput: OrganizationInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationOutput>>;
};
/**
 * ResellerCustomerApi - factory interface
 * @export
 */
export declare const ResellerCustomerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a new customer organization under a reseller organization
     * @summary Create Customer V1
     * @param {BodyCreateCustomerOrganizationV1} bodyCreateCustomerOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerOrganizationV1(bodyCreateCustomerOrganizationV1: BodyCreateCustomerOrganizationV1, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * Delete a reseller\'s customer and all associated data
     * @summary Delete Customer V1
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResellerCustomerV1(customerOrgId: string, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * Get the basic credentials of a customer organization under a reseller organization.
     * @summary Get Customer Basic Credentials V1
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerBasicCredentialsV1(customerOrgId: string, options?: any): AxiosPromise<BasicCredentials>;
    /**
     * Get the customer org credentials for a customer organization under a reseller organization. NOTE: This will only return the custom token of the reseller admin user present in the customer org. Exchange this token with the id token to use it as a firebase credential in the client side.
     * @summary Get Customer Credentials V1
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerCredentialsV1(customerOrgId: string, options?: any): AxiosPromise<string>;
    /**
     * Get reseller customer by id
     * @summary Get Reseller Customer By Id V1
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerCustomerByIdV1(customerOrgId: string, options?: any): AxiosPromise<OrgUsersPriceCredits>;
    /**
     * List reseller customers with prices, users and credits
     * @summary List Reseller Customers V1
     * @param {string} [searchQuery] Search query
     * @param {boolean} [expandPrices] Whether to expand the prices
     * @param {boolean} [expandUsers] Whether to expand the users
     * @param {boolean} [expandCredits] Whether to expand the credits
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResellerCustomersV1(searchQuery?: string, expandPrices?: boolean, expandUsers?: boolean, expandCredits?: boolean, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): AxiosPromise<Array<OrgUsersPriceCredits>>;
    /**
     * Update a customer organization under a reseller organization
     * @summary Update Customer V1
     * @param {string} customerOrgId
     * @param {OrganizationInput} organizationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerOrganizationV1(customerOrgId: string, organizationInput: OrganizationInput, options?: any): AxiosPromise<OrganizationOutput>;
};
/**
 * ResellerCustomerApi - object-oriented interface
 * @export
 * @class ResellerCustomerApi
 * @extends {BaseAPI}
 */
export declare class ResellerCustomerApi extends BaseAPI {
    /**
     * Creates a new customer organization under a reseller organization
     * @summary Create Customer V1
     * @param {BodyCreateCustomerOrganizationV1} bodyCreateCustomerOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerCustomerApi
     */
    createCustomerOrganizationV1(bodyCreateCustomerOrganizationV1: BodyCreateCustomerOrganizationV1, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * Delete a reseller\'s customer and all associated data
     * @summary Delete Customer V1
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerCustomerApi
     */
    deleteResellerCustomerV1(customerOrgId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * Get the basic credentials of a customer organization under a reseller organization.
     * @summary Get Customer Basic Credentials V1
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerCustomerApi
     */
    getCustomerBasicCredentialsV1(customerOrgId: string, options?: any): Promise<import("axios").AxiosResponse<BasicCredentials>>;
    /**
     * Get the customer org credentials for a customer organization under a reseller organization. NOTE: This will only return the custom token of the reseller admin user present in the customer org. Exchange this token with the id token to use it as a firebase credential in the client side.
     * @summary Get Customer Credentials V1
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerCustomerApi
     */
    getCustomerCredentialsV1(customerOrgId: string, options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     * Get reseller customer by id
     * @summary Get Reseller Customer By Id V1
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerCustomerApi
     */
    getResellerCustomerByIdV1(customerOrgId: string, options?: any): Promise<import("axios").AxiosResponse<OrgUsersPriceCredits>>;
    /**
     * List reseller customers with prices, users and credits
     * @summary List Reseller Customers V1
     * @param {string} [searchQuery] Search query
     * @param {boolean} [expandPrices] Whether to expand the prices
     * @param {boolean} [expandUsers] Whether to expand the users
     * @param {boolean} [expandCredits] Whether to expand the credits
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerCustomerApi
     */
    listResellerCustomersV1(searchQuery?: string, expandPrices?: boolean, expandUsers?: boolean, expandCredits?: boolean, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<import("axios").AxiosResponse<OrgUsersPriceCredits[]>>;
    /**
     * Update a customer organization under a reseller organization
     * @summary Update Customer V1
     * @param {string} customerOrgId
     * @param {OrganizationInput} organizationInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerCustomerApi
     */
    updateCustomerOrganizationV1(customerOrgId: string, organizationInput: OrganizationInput, options?: any): Promise<import("axios").AxiosResponse<OrganizationOutput>>;
}
/**
 * ResellerCustomerAuditLogsApi - axios parameter creator
 * @export
 */
export declare const ResellerCustomerAuditLogsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get Reseller Customer Audit Logs
     * @param {string} customerOrgId
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerCustomerAuditLogsV1ResellersCustomersCustomerOrgIdAuditLogsGet: (customerOrgId: string, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any) => Promise<RequestArgs>;
};
/**
 * ResellerCustomerAuditLogsApi - functional programming interface
 * @export
 */
export declare const ResellerCustomerAuditLogsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get Reseller Customer Audit Logs
     * @param {string} customerOrgId
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerCustomerAuditLogsV1ResellersCustomersCustomerOrgIdAuditLogsGet(customerOrgId: string, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuditLog>>>;
};
/**
 * ResellerCustomerAuditLogsApi - factory interface
 * @export
 */
export declare const ResellerCustomerAuditLogsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get Reseller Customer Audit Logs
     * @param {string} customerOrgId
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerCustomerAuditLogsV1ResellersCustomersCustomerOrgIdAuditLogsGet(customerOrgId: string, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): AxiosPromise<Array<AuditLog>>;
};
/**
 * ResellerCustomerAuditLogsApi - object-oriented interface
 * @export
 * @class ResellerCustomerAuditLogsApi
 * @extends {BaseAPI}
 */
export declare class ResellerCustomerAuditLogsApi extends BaseAPI {
    /**
     *
     * @summary Get Reseller Customer Audit Logs
     * @param {string} customerOrgId
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerCustomerAuditLogsApi
     */
    getResellerCustomerAuditLogsV1ResellersCustomersCustomerOrgIdAuditLogsGet(customerOrgId: string, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<import("axios").AxiosResponse<AuditLog[]>>;
}
/**
 * ResellerCustomerCheckoutApi - axios parameter creator
 * @export
 */
export declare const ResellerCustomerCheckoutApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a checkout session for a reseller customer
     * @summary Create Checkout Session For Reseller Customer
     * @param {string} customerOrgId
     * @param {string} priceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCheckoutSessionForResellerCustomerV1: (customerOrgId: string, priceId: string, options?: any) => Promise<RequestArgs>;
};
/**
 * ResellerCustomerCheckoutApi - functional programming interface
 * @export
 */
export declare const ResellerCustomerCheckoutApiFp: (configuration?: Configuration) => {
    /**
     * Create a checkout session for a reseller customer
     * @summary Create Checkout Session For Reseller Customer
     * @param {string} customerOrgId
     * @param {string} priceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCheckoutSessionForResellerCustomerV1(customerOrgId: string, priceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
};
/**
 * ResellerCustomerCheckoutApi - factory interface
 * @export
 */
export declare const ResellerCustomerCheckoutApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a checkout session for a reseller customer
     * @summary Create Checkout Session For Reseller Customer
     * @param {string} customerOrgId
     * @param {string} priceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCheckoutSessionForResellerCustomerV1(customerOrgId: string, priceId: string, options?: any): AxiosPromise<string>;
};
/**
 * ResellerCustomerCheckoutApi - object-oriented interface
 * @export
 * @class ResellerCustomerCheckoutApi
 * @extends {BaseAPI}
 */
export declare class ResellerCustomerCheckoutApi extends BaseAPI {
    /**
     * Create a checkout session for a reseller customer
     * @summary Create Checkout Session For Reseller Customer
     * @param {string} customerOrgId
     * @param {string} priceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerCustomerCheckoutApi
     */
    createCheckoutSessionForResellerCustomerV1(customerOrgId: string, priceId: string, options?: any): Promise<import("axios").AxiosResponse<string>>;
}
/**
 * ResellerCustomerDefaultPricingApi - axios parameter creator
 * @export
 */
export declare const ResellerCustomerDefaultPricingApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get the default pricing for all customers under the reseller organization
     * @summary Get Customer Default Pricing V1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerDefaultPricingV1: (options?: any) => Promise<RequestArgs>;
    /**
     * Update customer default pricing
     * @summary Update Customer Default Pricing V1
     * @param {string} priceId
     * @param {PricingRequest} pricingRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerDefaultPricingV1: (priceId: string, pricingRequest: PricingRequest, options?: any) => Promise<RequestArgs>;
};
/**
 * ResellerCustomerDefaultPricingApi - functional programming interface
 * @export
 */
export declare const ResellerCustomerDefaultPricingApiFp: (configuration?: Configuration) => {
    /**
     * Get the default pricing for all customers under the reseller organization
     * @summary Get Customer Default Pricing V1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerDefaultPricingV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Price>>>;
    /**
     * Update customer default pricing
     * @summary Update Customer Default Pricing V1
     * @param {string} priceId
     * @param {PricingRequest} pricingRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerDefaultPricingV1(priceId: string, pricingRequest: PricingRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Price>>;
};
/**
 * ResellerCustomerDefaultPricingApi - factory interface
 * @export
 */
export declare const ResellerCustomerDefaultPricingApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get the default pricing for all customers under the reseller organization
     * @summary Get Customer Default Pricing V1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomerDefaultPricingV1(options?: any): AxiosPromise<Array<Price>>;
    /**
     * Update customer default pricing
     * @summary Update Customer Default Pricing V1
     * @param {string} priceId
     * @param {PricingRequest} pricingRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerDefaultPricingV1(priceId: string, pricingRequest: PricingRequest, options?: any): AxiosPromise<Price>;
};
/**
 * ResellerCustomerDefaultPricingApi - object-oriented interface
 * @export
 * @class ResellerCustomerDefaultPricingApi
 * @extends {BaseAPI}
 */
export declare class ResellerCustomerDefaultPricingApi extends BaseAPI {
    /**
     * Get the default pricing for all customers under the reseller organization
     * @summary Get Customer Default Pricing V1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerCustomerDefaultPricingApi
     */
    getCustomerDefaultPricingV1(options?: any): Promise<import("axios").AxiosResponse<Price[]>>;
    /**
     * Update customer default pricing
     * @summary Update Customer Default Pricing V1
     * @param {string} priceId
     * @param {PricingRequest} pricingRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerCustomerDefaultPricingApi
     */
    updateCustomerDefaultPricingV1(priceId: string, pricingRequest: PricingRequest, options?: any): Promise<import("axios").AxiosResponse<Price>>;
}
/**
 * ResellerCustomerPortalApi - axios parameter creator
 * @export
 */
export declare const ResellerCustomerPortalApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a customer portal for a reseller customer
     * @summary Create Customer Portal For Reseller Customer
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerPortalForResellerCustomerV1: (customerOrgId: string, options?: any) => Promise<RequestArgs>;
};
/**
 * ResellerCustomerPortalApi - functional programming interface
 * @export
 */
export declare const ResellerCustomerPortalApiFp: (configuration?: Configuration) => {
    /**
     * Create a customer portal for a reseller customer
     * @summary Create Customer Portal For Reseller Customer
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerPortalForResellerCustomerV1(customerOrgId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
};
/**
 * ResellerCustomerPortalApi - factory interface
 * @export
 */
export declare const ResellerCustomerPortalApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a customer portal for a reseller customer
     * @summary Create Customer Portal For Reseller Customer
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerPortalForResellerCustomerV1(customerOrgId: string, options?: any): AxiosPromise<string>;
};
/**
 * ResellerCustomerPortalApi - object-oriented interface
 * @export
 * @class ResellerCustomerPortalApi
 * @extends {BaseAPI}
 */
export declare class ResellerCustomerPortalApi extends BaseAPI {
    /**
     * Create a customer portal for a reseller customer
     * @summary Create Customer Portal For Reseller Customer
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerCustomerPortalApi
     */
    createCustomerPortalForResellerCustomerV1(customerOrgId: string, options?: any): Promise<import("axios").AxiosResponse<string>>;
}
/**
 * ResellerCustomerPricingApi - axios parameter creator
 * @export
 */
export declare const ResellerCustomerPricingApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Override pricing for customer
     * @summary Create Customer Pricing V1
     * @param {string} customerOrgId
     * @param {PricingRequest} pricingRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerPricingV1: (customerOrgId: string, pricingRequest: PricingRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Get resellers customer credits
     * @summary Get Reseller Customer Credits V1
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerCustomerCreditsV1: (customerOrgId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get resellers customer pricing
     * @summary Get Reseller Customer Pricing V1
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerCustomerPricingV1: (customerOrgId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Update customer pricing
     * @summary Update Customer Pricing V1
     * @param {string} customerOrgId
     * @param {string} priceId
     * @param {PricingRequest} pricingRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerPricingV1: (customerOrgId: string, priceId: string, pricingRequest: PricingRequest, options?: any) => Promise<RequestArgs>;
};
/**
 * ResellerCustomerPricingApi - functional programming interface
 * @export
 */
export declare const ResellerCustomerPricingApiFp: (configuration?: Configuration) => {
    /**
     * Override pricing for customer
     * @summary Create Customer Pricing V1
     * @param {string} customerOrgId
     * @param {PricingRequest} pricingRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerPricingV1(customerOrgId: string, pricingRequest: PricingRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Price>>;
    /**
     * Get resellers customer credits
     * @summary Get Reseller Customer Credits V1
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerCustomerCreditsV1(customerOrgId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Credit>>>;
    /**
     * Get resellers customer pricing
     * @summary Get Reseller Customer Pricing V1
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerCustomerPricingV1(customerOrgId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Price>>>;
    /**
     * Update customer pricing
     * @summary Update Customer Pricing V1
     * @param {string} customerOrgId
     * @param {string} priceId
     * @param {PricingRequest} pricingRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerPricingV1(customerOrgId: string, priceId: string, pricingRequest: PricingRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Price>>;
};
/**
 * ResellerCustomerPricingApi - factory interface
 * @export
 */
export declare const ResellerCustomerPricingApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Override pricing for customer
     * @summary Create Customer Pricing V1
     * @param {string} customerOrgId
     * @param {PricingRequest} pricingRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerPricingV1(customerOrgId: string, pricingRequest: PricingRequest, options?: any): AxiosPromise<Price>;
    /**
     * Get resellers customer credits
     * @summary Get Reseller Customer Credits V1
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerCustomerCreditsV1(customerOrgId: string, options?: any): AxiosPromise<Array<Credit>>;
    /**
     * Get resellers customer pricing
     * @summary Get Reseller Customer Pricing V1
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerCustomerPricingV1(customerOrgId: string, options?: any): AxiosPromise<Array<Price>>;
    /**
     * Update customer pricing
     * @summary Update Customer Pricing V1
     * @param {string} customerOrgId
     * @param {string} priceId
     * @param {PricingRequest} pricingRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCustomerPricingV1(customerOrgId: string, priceId: string, pricingRequest: PricingRequest, options?: any): AxiosPromise<Price>;
};
/**
 * ResellerCustomerPricingApi - object-oriented interface
 * @export
 * @class ResellerCustomerPricingApi
 * @extends {BaseAPI}
 */
export declare class ResellerCustomerPricingApi extends BaseAPI {
    /**
     * Override pricing for customer
     * @summary Create Customer Pricing V1
     * @param {string} customerOrgId
     * @param {PricingRequest} pricingRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerCustomerPricingApi
     */
    createCustomerPricingV1(customerOrgId: string, pricingRequest: PricingRequest, options?: any): Promise<import("axios").AxiosResponse<Price>>;
    /**
     * Get resellers customer credits
     * @summary Get Reseller Customer Credits V1
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerCustomerPricingApi
     */
    getResellerCustomerCreditsV1(customerOrgId: string, options?: any): Promise<import("axios").AxiosResponse<Credit[]>>;
    /**
     * Get resellers customer pricing
     * @summary Get Reseller Customer Pricing V1
     * @param {string} customerOrgId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerCustomerPricingApi
     */
    getResellerCustomerPricingV1(customerOrgId: string, options?: any): Promise<import("axios").AxiosResponse<Price[]>>;
    /**
     * Update customer pricing
     * @summary Update Customer Pricing V1
     * @param {string} customerOrgId
     * @param {string} priceId
     * @param {PricingRequest} pricingRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerCustomerPricingApi
     */
    updateCustomerPricingV1(customerOrgId: string, priceId: string, pricingRequest: PricingRequest, options?: any): Promise<import("axios").AxiosResponse<Price>>;
}
/**
 * ResellerCustomerUserApi - axios parameter creator
 * @export
 */
export declare const ResellerCustomerUserApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete reseller customer user
     * @summary Delete Reseller Customer User V1
     * @param {string} customerOrgId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResellerCustomerUserV1: (customerOrgId: string, userId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get resellers customer users and invites by id
     * @summary Get Reseller Customer User And Invites V1
     * @param {string} customerOrgId
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerCustomerUserAndInvitesV1: (customerOrgId: string, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get resellers customer user by id
     * @summary Get Reseller Customer User By Id V1
     * @param {string} customerOrgId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerCustomerUserByIdV1: (customerOrgId: string, userId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List all invites for a customer organization
     * @summary List Customer Invites V1
     * @param {string} customerOrgId
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCustomerInvitesV1: (customerOrgId: string, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any) => Promise<RequestArgs>;
    /**
     * List resellers customer users
     * @summary List Reseller Customer Users V1
     * @param {string} customerOrgId
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResellerCustomerUsersV1: (customerOrgId: string, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Revoke an invite for a customer organization
     * @summary Revoke Customer Invite V1
     * @param {string} customerOrgId
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeCustomerInviteV1: (customerOrgId: string, email: string, options?: any) => Promise<RequestArgs>;
    /**
     * Send invite to a user on behalf of a customer organization
     * @summary Invite Customer Users V1
     * @param {string} customerOrgId
     * @param {GuestInput} guestInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendCustomerUserInviteV1: (customerOrgId: string, guestInput: GuestInput, options?: any) => Promise<RequestArgs>;
    /**
     * Update reseller customer user
     * @summary Update Reseller Customer User V1
     * @param {string} customerOrgId
     * @param {string} userId
     * @param {UpdateUserRequest} updateUserRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResellerCustomerUserV1: (customerOrgId: string, userId: string, updateUserRequest: UpdateUserRequest, options?: any) => Promise<RequestArgs>;
};
/**
 * ResellerCustomerUserApi - functional programming interface
 * @export
 */
export declare const ResellerCustomerUserApiFp: (configuration?: Configuration) => {
    /**
     * Delete reseller customer user
     * @summary Delete Reseller Customer User V1
     * @param {string} customerOrgId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResellerCustomerUserV1(customerOrgId: string, userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * Get resellers customer users and invites by id
     * @summary Get Reseller Customer User And Invites V1
     * @param {string} customerOrgId
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerCustomerUserAndInvitesV1(customerOrgId: string, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>>;
    /**
     * Get resellers customer user by id
     * @summary Get Reseller Customer User By Id V1
     * @param {string} customerOrgId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerCustomerUserByIdV1(customerOrgId: string, userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     * List all invites for a customer organization
     * @summary List Customer Invites V1
     * @param {string} customerOrgId
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCustomerInvitesV1(customerOrgId: string, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GuestOutput>>>;
    /**
     * List resellers customer users
     * @summary List Reseller Customer Users V1
     * @param {string} customerOrgId
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResellerCustomerUsersV1(customerOrgId: string, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>>;
    /**
     * Revoke an invite for a customer organization
     * @summary Revoke Customer Invite V1
     * @param {string} customerOrgId
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeCustomerInviteV1(customerOrgId: string, email: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * Send invite to a user on behalf of a customer organization
     * @summary Invite Customer Users V1
     * @param {string} customerOrgId
     * @param {GuestInput} guestInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendCustomerUserInviteV1(customerOrgId: string, guestInput: GuestInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * Update reseller customer user
     * @summary Update Reseller Customer User V1
     * @param {string} customerOrgId
     * @param {string} userId
     * @param {UpdateUserRequest} updateUserRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResellerCustomerUserV1(customerOrgId: string, userId: string, updateUserRequest: UpdateUserRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
};
/**
 * ResellerCustomerUserApi - factory interface
 * @export
 */
export declare const ResellerCustomerUserApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete reseller customer user
     * @summary Delete Reseller Customer User V1
     * @param {string} customerOrgId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResellerCustomerUserV1(customerOrgId: string, userId: string, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * Get resellers customer users and invites by id
     * @summary Get Reseller Customer User And Invites V1
     * @param {string} customerOrgId
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerCustomerUserAndInvitesV1(customerOrgId: string, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): AxiosPromise<Array<User>>;
    /**
     * Get resellers customer user by id
     * @summary Get Reseller Customer User By Id V1
     * @param {string} customerOrgId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerCustomerUserByIdV1(customerOrgId: string, userId: string, options?: any): AxiosPromise<User>;
    /**
     * List all invites for a customer organization
     * @summary List Customer Invites V1
     * @param {string} customerOrgId
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCustomerInvitesV1(customerOrgId: string, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): AxiosPromise<Array<GuestOutput>>;
    /**
     * List resellers customer users
     * @summary List Reseller Customer Users V1
     * @param {string} customerOrgId
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResellerCustomerUsersV1(customerOrgId: string, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): AxiosPromise<Array<User>>;
    /**
     * Revoke an invite for a customer organization
     * @summary Revoke Customer Invite V1
     * @param {string} customerOrgId
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeCustomerInviteV1(customerOrgId: string, email: string, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * Send invite to a user on behalf of a customer organization
     * @summary Invite Customer Users V1
     * @param {string} customerOrgId
     * @param {GuestInput} guestInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendCustomerUserInviteV1(customerOrgId: string, guestInput: GuestInput, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * Update reseller customer user
     * @summary Update Reseller Customer User V1
     * @param {string} customerOrgId
     * @param {string} userId
     * @param {UpdateUserRequest} updateUserRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResellerCustomerUserV1(customerOrgId: string, userId: string, updateUserRequest: UpdateUserRequest, options?: any): AxiosPromise<User>;
};
/**
 * ResellerCustomerUserApi - object-oriented interface
 * @export
 * @class ResellerCustomerUserApi
 * @extends {BaseAPI}
 */
export declare class ResellerCustomerUserApi extends BaseAPI {
    /**
     * Delete reseller customer user
     * @summary Delete Reseller Customer User V1
     * @param {string} customerOrgId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerCustomerUserApi
     */
    deleteResellerCustomerUserV1(customerOrgId: string, userId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * Get resellers customer users and invites by id
     * @summary Get Reseller Customer User And Invites V1
     * @param {string} customerOrgId
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerCustomerUserApi
     */
    getResellerCustomerUserAndInvitesV1(customerOrgId: string, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<import("axios").AxiosResponse<User[]>>;
    /**
     * Get resellers customer user by id
     * @summary Get Reseller Customer User By Id V1
     * @param {string} customerOrgId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerCustomerUserApi
     */
    getResellerCustomerUserByIdV1(customerOrgId: string, userId: string, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     * List all invites for a customer organization
     * @summary List Customer Invites V1
     * @param {string} customerOrgId
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerCustomerUserApi
     */
    listCustomerInvitesV1(customerOrgId: string, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<import("axios").AxiosResponse<GuestOutput[]>>;
    /**
     * List resellers customer users
     * @summary List Reseller Customer Users V1
     * @param {string} customerOrgId
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerCustomerUserApi
     */
    listResellerCustomerUsersV1(customerOrgId: string, searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<import("axios").AxiosResponse<User[]>>;
    /**
     * Revoke an invite for a customer organization
     * @summary Revoke Customer Invite V1
     * @param {string} customerOrgId
     * @param {string} email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerCustomerUserApi
     */
    revokeCustomerInviteV1(customerOrgId: string, email: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * Send invite to a user on behalf of a customer organization
     * @summary Invite Customer Users V1
     * @param {string} customerOrgId
     * @param {GuestInput} guestInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerCustomerUserApi
     */
    sendCustomerUserInviteV1(customerOrgId: string, guestInput: GuestInput, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * Update reseller customer user
     * @summary Update Reseller Customer User V1
     * @param {string} customerOrgId
     * @param {string} userId
     * @param {UpdateUserRequest} updateUserRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerCustomerUserApi
     */
    updateResellerCustomerUserV1(customerOrgId: string, userId: string, updateUserRequest: UpdateUserRequest, options?: any): Promise<import("axios").AxiosResponse<User>>;
}
/**
 * ResellerFilesApi - axios parameter creator
 * @export
 */
export declare const ResellerFilesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete files from Trata reseller account
     * @summary Delete Files
     * @param {string} fileIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResellerFilesV1: (fileIds: string, options?: any) => Promise<RequestArgs>;
    /**
     * Upload file to Trata account to use in AI Agents
     * @summary Upload Files
     * @param {Array<any>} files
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadResellerFilesV1: (files: Array<any>, options?: any) => Promise<RequestArgs>;
};
/**
 * ResellerFilesApi - functional programming interface
 * @export
 */
export declare const ResellerFilesApiFp: (configuration?: Configuration) => {
    /**
     * Delete files from Trata reseller account
     * @summary Delete Files
     * @param {string} fileIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResellerFilesV1(fileIds: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>>;
    /**
     * Upload file to Trata account to use in AI Agents
     * @summary Upload Files
     * @param {Array<any>} files
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadResellerFilesV1(files: Array<any>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Files>>>;
};
/**
 * ResellerFilesApi - factory interface
 * @export
 */
export declare const ResellerFilesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete files from Trata reseller account
     * @summary Delete Files
     * @param {string} fileIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResellerFilesV1(fileIds: string, options?: any): AxiosPromise<boolean>;
    /**
     * Upload file to Trata account to use in AI Agents
     * @summary Upload Files
     * @param {Array<any>} files
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadResellerFilesV1(files: Array<any>, options?: any): AxiosPromise<Array<Files>>;
};
/**
 * ResellerFilesApi - object-oriented interface
 * @export
 * @class ResellerFilesApi
 * @extends {BaseAPI}
 */
export declare class ResellerFilesApi extends BaseAPI {
    /**
     * Delete files from Trata reseller account
     * @summary Delete Files
     * @param {string} fileIds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerFilesApi
     */
    deleteResellerFilesV1(fileIds: string, options?: any): Promise<import("axios").AxiosResponse<boolean>>;
    /**
     * Upload file to Trata account to use in AI Agents
     * @summary Upload Files
     * @param {Array<any>} files
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerFilesApi
     */
    uploadResellerFilesV1(files: Array<any>, options?: any): Promise<import("axios").AxiosResponse<Files[]>>;
}
/**
 * ResellerMetricsApi - axios parameter creator
 * @export
 */
export declare const ResellerMetricsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get analytics data for Reseller
     * @summary Get Reseller Metrics
     * @param {ResellerBatchMetricsRequests} resellerBatchMetricsRequests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerMetricsV1: (resellerBatchMetricsRequests: ResellerBatchMetricsRequests, options?: any) => Promise<RequestArgs>;
};
/**
 * ResellerMetricsApi - functional programming interface
 * @export
 */
export declare const ResellerMetricsApiFp: (configuration?: Configuration) => {
    /**
     * Get analytics data for Reseller
     * @summary Get Reseller Metrics
     * @param {ResellerBatchMetricsRequests} resellerBatchMetricsRequests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerMetricsV1(resellerBatchMetricsRequests: ResellerBatchMetricsRequests, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BatchMetricsResponseInput>>;
};
/**
 * ResellerMetricsApi - factory interface
 * @export
 */
export declare const ResellerMetricsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get analytics data for Reseller
     * @summary Get Reseller Metrics
     * @param {ResellerBatchMetricsRequests} resellerBatchMetricsRequests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerMetricsV1(resellerBatchMetricsRequests: ResellerBatchMetricsRequests, options?: any): AxiosPromise<BatchMetricsResponseInput>;
};
/**
 * ResellerMetricsApi - object-oriented interface
 * @export
 * @class ResellerMetricsApi
 * @extends {BaseAPI}
 */
export declare class ResellerMetricsApi extends BaseAPI {
    /**
     * Get analytics data for Reseller
     * @summary Get Reseller Metrics
     * @param {ResellerBatchMetricsRequests} resellerBatchMetricsRequests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerMetricsApi
     */
    getResellerMetricsV1(resellerBatchMetricsRequests: ResellerBatchMetricsRequests, options?: any): Promise<import("axios").AxiosResponse<BatchMetricsResponseInput>>;
}
/**
 * ResellerOrganizationApi - axios parameter creator
 * @export
 */
export declare const ResellerOrganizationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a new reseller organization and adds the created user as the \'ADMIN\' user for the org
     * @summary Create Reseller Organization V1
     * @param {BodyCreateResellerOrganizationV1} bodyCreateResellerOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResellerOrganizationV1: (bodyCreateResellerOrganizationV1: BodyCreateResellerOrganizationV1, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a reseller organization
     * @summary Delete Reseller Organization V1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResellerOrganizationV1: (options?: any) => Promise<RequestArgs>;
    /**
     * Get a reseller organization by id
     * @summary Get Reseller Organization V1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerOrganizationV1: (options?: any) => Promise<RequestArgs>;
    /**
     * Update a reseller organization
     * @summary Update Reseller Organization V1
     * @param {UpdateResellerOrganizationRequest} updateResellerOrganizationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResellerOrganizationV1: (updateResellerOrganizationRequest: UpdateResellerOrganizationRequest, options?: any) => Promise<RequestArgs>;
};
/**
 * ResellerOrganizationApi - functional programming interface
 * @export
 */
export declare const ResellerOrganizationApiFp: (configuration?: Configuration) => {
    /**
     * Creates a new reseller organization and adds the created user as the \'ADMIN\' user for the org
     * @summary Create Reseller Organization V1
     * @param {BodyCreateResellerOrganizationV1} bodyCreateResellerOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResellerOrganizationV1(bodyCreateResellerOrganizationV1: BodyCreateResellerOrganizationV1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     * Delete a reseller organization
     * @summary Delete Reseller Organization V1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResellerOrganizationV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * Get a reseller organization by id
     * @summary Get Reseller Organization V1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerOrganizationV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgWithUsers>>;
    /**
     * Update a reseller organization
     * @summary Update Reseller Organization V1
     * @param {UpdateResellerOrganizationRequest} updateResellerOrganizationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResellerOrganizationV1(updateResellerOrganizationRequest: UpdateResellerOrganizationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationOutput>>;
};
/**
 * ResellerOrganizationApi - factory interface
 * @export
 */
export declare const ResellerOrganizationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a new reseller organization and adds the created user as the \'ADMIN\' user for the org
     * @summary Create Reseller Organization V1
     * @param {BodyCreateResellerOrganizationV1} bodyCreateResellerOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createResellerOrganizationV1(bodyCreateResellerOrganizationV1: BodyCreateResellerOrganizationV1, options?: any): AxiosPromise<User>;
    /**
     * Delete a reseller organization
     * @summary Delete Reseller Organization V1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResellerOrganizationV1(options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * Get a reseller organization by id
     * @summary Get Reseller Organization V1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerOrganizationV1(options?: any): AxiosPromise<OrgWithUsers>;
    /**
     * Update a reseller organization
     * @summary Update Reseller Organization V1
     * @param {UpdateResellerOrganizationRequest} updateResellerOrganizationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResellerOrganizationV1(updateResellerOrganizationRequest: UpdateResellerOrganizationRequest, options?: any): AxiosPromise<OrganizationOutput>;
};
/**
 * ResellerOrganizationApi - object-oriented interface
 * @export
 * @class ResellerOrganizationApi
 * @extends {BaseAPI}
 */
export declare class ResellerOrganizationApi extends BaseAPI {
    /**
     * Creates a new reseller organization and adds the created user as the \'ADMIN\' user for the org
     * @summary Create Reseller Organization V1
     * @param {BodyCreateResellerOrganizationV1} bodyCreateResellerOrganizationV1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerOrganizationApi
     */
    createResellerOrganizationV1(bodyCreateResellerOrganizationV1: BodyCreateResellerOrganizationV1, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     * Delete a reseller organization
     * @summary Delete Reseller Organization V1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerOrganizationApi
     */
    deleteResellerOrganizationV1(options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * Get a reseller organization by id
     * @summary Get Reseller Organization V1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerOrganizationApi
     */
    getResellerOrganizationV1(options?: any): Promise<import("axios").AxiosResponse<OrgWithUsers>>;
    /**
     * Update a reseller organization
     * @summary Update Reseller Organization V1
     * @param {UpdateResellerOrganizationRequest} updateResellerOrganizationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerOrganizationApi
     */
    updateResellerOrganizationV1(updateResellerOrganizationRequest: UpdateResellerOrganizationRequest, options?: any): Promise<import("axios").AxiosResponse<OrganizationOutput>>;
}
/**
 * ResellerPricingApi - axios parameter creator
 * @export
 */
export declare const ResellerPricingApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Adds a new account link to the reseller organization
     * @summary Add Stripe Account Link To Reseller Org
     * @param {string} code
     * @param {string} state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addStripeAccountLinkToResellerOrgV1: (code: string, state: string, options?: any) => Promise<RequestArgs>;
    /**
     * Creates a new account link URL for the reseller
     * @summary Create Stripe Account Link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createStripeAccountLinkV1: (options?: any) => Promise<RequestArgs>;
    /**
     * Get stripe account details
     * @summary Get Stripe Account Details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStripeAccountDetailsV1: (options?: any) => Promise<RequestArgs>;
    /**
     * Disconnect reseller stripe account connection
     * @summary Revoke Stripe Connection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stripeDisconnectV1: (options?: any) => Promise<RequestArgs>;
};
/**
 * ResellerPricingApi - functional programming interface
 * @export
 */
export declare const ResellerPricingApiFp: (configuration?: Configuration) => {
    /**
     * Adds a new account link to the reseller organization
     * @summary Add Stripe Account Link To Reseller Org
     * @param {string} code
     * @param {string} state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addStripeAccountLinkToResellerOrgV1(code: string, state: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * Creates a new account link URL for the reseller
     * @summary Create Stripe Account Link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createStripeAccountLinkV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     * Get stripe account details
     * @summary Get Stripe Account Details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStripeAccountDetailsV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResellerPaymentAccountDetails>>;
    /**
     * Disconnect reseller stripe account connection
     * @summary Revoke Stripe Connection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stripeDisconnectV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
};
/**
 * ResellerPricingApi - factory interface
 * @export
 */
export declare const ResellerPricingApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Adds a new account link to the reseller organization
     * @summary Add Stripe Account Link To Reseller Org
     * @param {string} code
     * @param {string} state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addStripeAccountLinkToResellerOrgV1(code: string, state: string, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * Creates a new account link URL for the reseller
     * @summary Create Stripe Account Link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createStripeAccountLinkV1(options?: any): AxiosPromise<string>;
    /**
     * Get stripe account details
     * @summary Get Stripe Account Details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStripeAccountDetailsV1(options?: any): AxiosPromise<ResellerPaymentAccountDetails>;
    /**
     * Disconnect reseller stripe account connection
     * @summary Revoke Stripe Connection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stripeDisconnectV1(options?: any): AxiosPromise<BaseResponseInput>;
};
/**
 * ResellerPricingApi - object-oriented interface
 * @export
 * @class ResellerPricingApi
 * @extends {BaseAPI}
 */
export declare class ResellerPricingApi extends BaseAPI {
    /**
     * Adds a new account link to the reseller organization
     * @summary Add Stripe Account Link To Reseller Org
     * @param {string} code
     * @param {string} state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerPricingApi
     */
    addStripeAccountLinkToResellerOrgV1(code: string, state: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * Creates a new account link URL for the reseller
     * @summary Create Stripe Account Link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerPricingApi
     */
    createStripeAccountLinkV1(options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     * Get stripe account details
     * @summary Get Stripe Account Details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerPricingApi
     */
    getStripeAccountDetailsV1(options?: any): Promise<import("axios").AxiosResponse<ResellerPaymentAccountDetails>>;
    /**
     * Disconnect reseller stripe account connection
     * @summary Revoke Stripe Connection
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerPricingApi
     */
    stripeDisconnectV1(options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
}
/**
 * ResellerSettingsApi - axios parameter creator
 * @export
 */
export declare const ResellerSettingsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Add Reseller settings
     * @summary Organization Settings V1
     * @param {OrganizationSettings} organizationSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addResellerSettingsV1: (organizationSettings: OrganizationSettings, options?: any) => Promise<RequestArgs>;
    /**
     * Get organization settings
     * @summary Get Organization Settings V1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationSettingsV1: (options?: any) => Promise<RequestArgs>;
    /**
     * Update organization settings
     * @summary Organization Settings Update V1
     * @param {OrganizationSettings} organizationSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResellerSettingsV1: (organizationSettings: OrganizationSettings, options?: any) => Promise<RequestArgs>;
};
/**
 * ResellerSettingsApi - functional programming interface
 * @export
 */
export declare const ResellerSettingsApiFp: (configuration?: Configuration) => {
    /**
     * Add Reseller settings
     * @summary Organization Settings V1
     * @param {OrganizationSettings} organizationSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addResellerSettingsV1(organizationSettings: OrganizationSettings, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationSettings>>;
    /**
     * Get organization settings
     * @summary Get Organization Settings V1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationSettingsV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationSettings>>;
    /**
     * Update organization settings
     * @summary Organization Settings Update V1
     * @param {OrganizationSettings} organizationSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResellerSettingsV1(organizationSettings: OrganizationSettings, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationSettings>>;
};
/**
 * ResellerSettingsApi - factory interface
 * @export
 */
export declare const ResellerSettingsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Add Reseller settings
     * @summary Organization Settings V1
     * @param {OrganizationSettings} organizationSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addResellerSettingsV1(organizationSettings: OrganizationSettings, options?: any): AxiosPromise<OrganizationSettings>;
    /**
     * Get organization settings
     * @summary Get Organization Settings V1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationSettingsV1(options?: any): AxiosPromise<OrganizationSettings>;
    /**
     * Update organization settings
     * @summary Organization Settings Update V1
     * @param {OrganizationSettings} organizationSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResellerSettingsV1(organizationSettings: OrganizationSettings, options?: any): AxiosPromise<OrganizationSettings>;
};
/**
 * ResellerSettingsApi - object-oriented interface
 * @export
 * @class ResellerSettingsApi
 * @extends {BaseAPI}
 */
export declare class ResellerSettingsApi extends BaseAPI {
    /**
     * Add Reseller settings
     * @summary Organization Settings V1
     * @param {OrganizationSettings} organizationSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerSettingsApi
     */
    addResellerSettingsV1(organizationSettings: OrganizationSettings, options?: any): Promise<import("axios").AxiosResponse<OrganizationSettings>>;
    /**
     * Get organization settings
     * @summary Get Organization Settings V1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerSettingsApi
     */
    getOrganizationSettingsV1(options?: any): Promise<import("axios").AxiosResponse<OrganizationSettings>>;
    /**
     * Update organization settings
     * @summary Organization Settings Update V1
     * @param {OrganizationSettings} organizationSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerSettingsApi
     */
    updateResellerSettingsV1(organizationSettings: OrganizationSettings, options?: any): Promise<import("axios").AxiosResponse<OrganizationSettings>>;
}
/**
 * ResellerUserApi - axios parameter creator
 * @export
 */
export declare const ResellerUserApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Accept invite and add new user to organization
     * @summary Accept Invite V1
     * @param {AcceptInviteRequest} acceptInviteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptResellerUserInviteV1: (acceptInviteRequest: AcceptInviteRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a user
     * @summary Delete Reseller User V1
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResellerUserV1: (userId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Reseller User By Id V1
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerUserByIdV1: (userId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List of all open invites from the organization
     * @summary List Reseller User Invites V1
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResellerUserInvitesV1: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Lists all users under the user\'s organization
     * @summary List Reseller Users V1
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResellerUsersV1: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Invite a new user to an organization or resend invite to the user if the user is already invited
     * @summary Invite Users V1
     * @param {GuestInput} guestInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendResellerUserInviteV1: (guestInput: GuestInput, options?: any) => Promise<RequestArgs>;
    /**
     * Update user details
     * @summary Update Reseller User V1
     * @param {string} userId
     * @param {UserPayload} userPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResellerUserV1: (userId: string, userPayload: UserPayload, options?: any) => Promise<RequestArgs>;
};
/**
 * ResellerUserApi - functional programming interface
 * @export
 */
export declare const ResellerUserApiFp: (configuration?: Configuration) => {
    /**
     * Accept invite and add new user to organization
     * @summary Accept Invite V1
     * @param {AcceptInviteRequest} acceptInviteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptResellerUserInviteV1(acceptInviteRequest: AcceptInviteRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     * Delete a user
     * @summary Delete Reseller User V1
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResellerUserV1(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     *
     * @summary Get Reseller User By Id V1
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerUserByIdV1(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     * List of all open invites from the organization
     * @summary List Reseller User Invites V1
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResellerUserInvitesV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GuestOutput>>>;
    /**
     * Lists all users under the user\'s organization
     * @summary List Reseller Users V1
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResellerUsersV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>>;
    /**
     * Invite a new user to an organization or resend invite to the user if the user is already invited
     * @summary Invite Users V1
     * @param {GuestInput} guestInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendResellerUserInviteV1(guestInput: GuestInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GuestOutput>>;
    /**
     * Update user details
     * @summary Update Reseller User V1
     * @param {string} userId
     * @param {UserPayload} userPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResellerUserV1(userId: string, userPayload: UserPayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
};
/**
 * ResellerUserApi - factory interface
 * @export
 */
export declare const ResellerUserApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Accept invite and add new user to organization
     * @summary Accept Invite V1
     * @param {AcceptInviteRequest} acceptInviteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptResellerUserInviteV1(acceptInviteRequest: AcceptInviteRequest, options?: any): AxiosPromise<User>;
    /**
     * Delete a user
     * @summary Delete Reseller User V1
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteResellerUserV1(userId: string, options?: any): AxiosPromise<User>;
    /**
     *
     * @summary Get Reseller User By Id V1
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getResellerUserByIdV1(userId: string, options?: any): AxiosPromise<User>;
    /**
     * List of all open invites from the organization
     * @summary List Reseller User Invites V1
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResellerUserInvitesV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): AxiosPromise<Array<GuestOutput>>;
    /**
     * Lists all users under the user\'s organization
     * @summary List Reseller Users V1
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listResellerUsersV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): AxiosPromise<Array<User>>;
    /**
     * Invite a new user to an organization or resend invite to the user if the user is already invited
     * @summary Invite Users V1
     * @param {GuestInput} guestInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sendResellerUserInviteV1(guestInput: GuestInput, options?: any): AxiosPromise<GuestOutput>;
    /**
     * Update user details
     * @summary Update Reseller User V1
     * @param {string} userId
     * @param {UserPayload} userPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateResellerUserV1(userId: string, userPayload: UserPayload, options?: any): AxiosPromise<User>;
};
/**
 * ResellerUserApi - object-oriented interface
 * @export
 * @class ResellerUserApi
 * @extends {BaseAPI}
 */
export declare class ResellerUserApi extends BaseAPI {
    /**
     * Accept invite and add new user to organization
     * @summary Accept Invite V1
     * @param {AcceptInviteRequest} acceptInviteRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerUserApi
     */
    acceptResellerUserInviteV1(acceptInviteRequest: AcceptInviteRequest, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     * Delete a user
     * @summary Delete Reseller User V1
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerUserApi
     */
    deleteResellerUserV1(userId: string, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     *
     * @summary Get Reseller User By Id V1
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerUserApi
     */
    getResellerUserByIdV1(userId: string, options?: any): Promise<import("axios").AxiosResponse<User>>;
    /**
     * List of all open invites from the organization
     * @summary List Reseller User Invites V1
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerUserApi
     */
    listResellerUserInvitesV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<import("axios").AxiosResponse<GuestOutput[]>>;
    /**
     * Lists all users under the user\'s organization
     * @summary List Reseller Users V1
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerUserApi
     */
    listResellerUsersV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<import("axios").AxiosResponse<User[]>>;
    /**
     * Invite a new user to an organization or resend invite to the user if the user is already invited
     * @summary Invite Users V1
     * @param {GuestInput} guestInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerUserApi
     */
    sendResellerUserInviteV1(guestInput: GuestInput, options?: any): Promise<import("axios").AxiosResponse<GuestOutput>>;
    /**
     * Update user details
     * @summary Update Reseller User V1
     * @param {string} userId
     * @param {UserPayload} userPayload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResellerUserApi
     */
    updateResellerUserV1(userId: string, userPayload: UserPayload, options?: any): Promise<import("axios").AxiosResponse<User>>;
}
/**
 * SparrApi - axios parameter creator
 * @export
 */
export declare const SparrApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Add a module attempt for a user
     * @summary Add Module Attempt
     * @param {string} moduleId
     * @param {UserModuleAttemptCore} userModuleAttemptCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addModuleAttemptV1: (moduleId: string, userModuleAttemptCore: UserModuleAttemptCore, options?: any) => Promise<RequestArgs>;
    /**
     * Assign a course to a user
     * @summary Assign Course
     * @param {string} courseId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assignCourseV1: (courseId: string, userId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Attach a tag to an entity
     * @summary Attach Tag
     * @param {string} entityType
     * @param {string} entityId
     * @param {TagCreate} tagCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachTagV1SparrEntityTagsEntityTypeEntityIdTagsPost: (entityType: string, entityId: string, tagCreate: TagCreate, options?: any) => Promise<RequestArgs>;
    /**
     * Create a checkout session for a price
     * @summary Create Checkout Session For Price
     * @param {string} priceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCheckoutSessionForPriceV1: (priceId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Create a new course
     * @summary Create Course
     * @param {CourseRequest} courseRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCourseV1: (courseRequest: CourseRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Create a customer portal for customer
     * @summary Create Customer Portal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerPortalV1: (options?: any) => Promise<RequestArgs>;
    /**
     * Create a new feedback
     * @summary Create Feedback
     * @param {FeedbackCore} feedbackCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFeedbackV1: (feedbackCore: FeedbackCore, options?: any) => Promise<RequestArgs>;
    /**
     * Create a new goals collection
     * @summary Create Goals
     * @param {GoalCore} goalCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGoalsV1: (goalCore: GoalCore, options?: any) => Promise<RequestArgs>;
    /**
     * Create a new persona
     * @summary Create Persona
     * @param {PersonaCore} personaCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPersonaV1: (personaCore: PersonaCore, options?: any) => Promise<RequestArgs>;
    /**
     * Create a new evaluator
     * @summary Create Evaluator
     * @param {EvaluatorCore} evaluatorCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPostCallEvaluationParamsV1: (evaluatorCore: EvaluatorCore, options?: any) => Promise<RequestArgs>;
    /**
     * Create a new scenario
     * @summary Create Scenario
     * @param {ScenarioCore} scenarioCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createScenarioV1: (scenarioCore: ScenarioCore, options?: any) => Promise<RequestArgs>;
    /**
     * Create a new tracker
     * @summary Create Tracker
     * @param {TrackerCore} trackerCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTrackerV1: (trackerCore: TrackerCore, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a course
     * @summary Delete Course
     * @param {string} courseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCourseV1: (courseId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Delete evaluator
     * @summary Delete Evaluator
     * @param {string} paramsId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEvaluatorV1: (paramsId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a feedback
     * @summary Delete Feedback
     * @param {string} feedbackId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFeedbackV1: (feedbackId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a file
     * @summary Delete File
     * @param {string} fileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFileV1: (fileId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a goals collection
     * @summary Delete Goals
     * @param {string} goalsId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGoalsV1: (goalsId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a persona
     * @summary Delete Persona
     * @param {string} personaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePersonaV1: (personaId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a scenario
     * @summary Delete Scenario
     * @param {string} scenarioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteScenarioV1: (scenarioId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a tracker
     * @summary Delete Tracker
     * @param {string} trackerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTrackerV1: (trackerId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Detach a tag from an entity
     * @summary Detach Tag
     * @param {string} entityType
     * @param {string} entityId
     * @param {string} tagName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    detachTagV1SparrEntityTagsEntityTypeEntityIdTagsTagNameDelete: (entityType: string, entityId: string, tagName: string, options?: any) => Promise<RequestArgs>;
    /**
     * Generate evaluator data from files and/or existing core components
     * @summary Generate Evaluator
     * @param {FlexibleGenerationRequest} flexibleGenerationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateEvaluatorV1: (flexibleGenerationRequest: FlexibleGenerationRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Get a specific course by ID
     * @summary Get Course
     * @param {string} courseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCourseV1: (courseId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get credits
     * @summary Get Credits V1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCreditsV1: (options?: any) => Promise<RequestArgs>;
    /**
     * Get all entities of a type that have a specific tag
     * @summary Get Entities By Tag
     * @param {string} entityType
     * @param {string} tagName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntitiesByTagV1SparrEntityTagsEntityTypeByTagTagNameGet: (entityType: string, tagName: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get all tags for an entity
     * @summary Get Entity Tags
     * @param {string} entityType
     * @param {string} entityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityTagsV1SparrEntityTagsEntityTypeEntityIdTagsGet: (entityType: string, entityId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a specific evaluator by ID that is either directly owned or available through reseller course assignments
     * @summary Get Evaluator By Id
     * @param {string} paramsId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvaluatorV1: (paramsId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a specific feedback by ID
     * @summary Get Feedback
     * @param {string} feedbackId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeedbackV1: (feedbackId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a specific file by ID
     * @summary Get File
     * @param {string} fileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFileV1: (fileId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a specific goals collection by ID that is either directly owned or available through reseller course assignments
     * @summary Get Goals By Id
     * @param {string} goalsId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGoalsV1: (goalsId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get metrics for a given batch of metrics requests
     * @summary Get Metrics
     * @param {SparrModelsAnalyticsBatchMetricsRequests} sparrModelsAnalyticsBatchMetricsRequests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetricsV1: (sparrModelsAnalyticsBatchMetricsRequests: SparrModelsAnalyticsBatchMetricsRequests, options?: any) => Promise<RequestArgs>;
    /**
     * Get a specific persona by ID that is either directly owned or available through reseller course assignments
     * @summary Get Persona
     * @param {string} personaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPersonaV1: (personaId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get pricing
     * @summary Get Pricing V1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingV1: (options?: any) => Promise<RequestArgs>;
    /**
     * Get a specific scenario by ID that is either directly owned or available through reseller course assignments
     * @summary Get Scenario
     * @param {string} scenarioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScenarioV1: (scenarioId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a specific tracker by ID that is either directly owned or available through reseller course assignments
     * @summary Get Tracker By Id
     * @param {string} trackerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTrackerV1: (trackerId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Search personas by name, title and company
     * @summary Get User Stats
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserStatsV1: (userId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Import a persona from LinkedIn URL
     * @summary Import Linkedin Persona
     * @param {string} linkedinUrl
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    importLinkedinPersonaV1: (linkedinUrl: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get all courses including reseller assignments
     * @summary Get Courses
     * @param {number} [skip] Skip for pagination
     * @param {number} [limit] Limit for pagination
     * @param {string} [status] Filter by status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCoursesV1: (skip?: number, limit?: number, status?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get all evaluator that are either directly owned or available through reseller course assignments
     * @summary Get Evaluator
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEvaluatorV1: (skip?: number, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Get all feedbacks
     * @summary Get Feedbacks
     * @param {number} [skip] Skip for pagination
     * @param {number} [limit] Limit for pagination
     * @param {string} [fromDate] Start date for filtering feedbacks
     * @param {string} [toDate] End date for filtering feedbacks
     * @param {string} [userFilter] User filter for filtering feedbacks. Comma separated list of user ids.
     * @param {string} [statusFilter] Status filter for filtering feedbacks. Comma separated list of statuses.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFeedbacksV1: (skip?: number, limit?: number, fromDate?: string, toDate?: string, userFilter?: string, statusFilter?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get all goals that are either directly owned or available through reseller course assignments
     * @summary Get Goals
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listGoalsV1: (skip?: number, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Get all personas that are either directly owned or available through reseller course assignments
     * @summary Get Personas
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [tags] Filter personas by tag, comma separated names
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPersonasV1: (skip?: number, limit?: number, tags?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get all scenarios that are either directly owned or available through reseller course assignments
     * @summary Get Scenarios
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [tags] Filter scenarios by tag, comma separated names
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listScenariosV1: (skip?: number, limit?: number, tags?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get all trackers that are either directly owned or available through reseller course assignments
     * @summary Get Trackers
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTrackerV1: (skip?: number, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Get all course assignments for a user with analytics
     * @summary Get User Assignments
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserAssignmentsV1: (userId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get all module attempts with module information for a user in a specific course
     * @summary Get User Course Attempts
     * @param {string} courseId
     * @param {string} userId
     * @param {number} [skip] Skip for pagination
     * @param {number} [limit] Limit for pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserCourseAttemptsV1: (courseId: string, userId: string, skip?: number, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Get all module attempts for a user
     * @summary Get User Module Attempts
     * @param {string} moduleId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserModuleAttemptsV1: (moduleId: string, userId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Revoke a course from a user
     * @summary Revoke Course
     * @param {string} courseId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeCourseV1: (courseId: string, userId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Search goals by name and description
     * @summary Search Goals
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchGoalsV1: (query: string, page?: number, size?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Search personas by name, title and company
     * @summary Search Personas
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchPersonasV1: (query: string, page?: number, size?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Search scenarios by name and description
     * @summary Search Scenarios
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchScenariosV1: (query: string, page?: number, size?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Search trackers by name and description
     * @summary Search Tracker
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTrackerV1: (query: string, page?: number, size?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Heart Beat check to check the health of Sparr Service
     * @summary Heart Beat Status Of Sparr Service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusSparrStatusGet: (options?: any) => Promise<RequestArgs>;
    /**
     * Update course completion status
     * @summary Update Course Completion Status
     * @param {string} courseId
     * @param {string} userId
     * @param {CourseCompletionStatus} completionStatus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCourseCompletionStatusV1: (courseId: string, userId: string, completionStatus: CourseCompletionStatus, options?: any) => Promise<RequestArgs>;
    /**
     * Update a course
     * @summary Update Course
     * @param {string} courseId
     * @param {CourseUpdateRequest} courseUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCourseV1: (courseId: string, courseUpdateRequest: CourseUpdateRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Update evaluator
     * @summary Update Evaluator
     * @param {string} paramsId
     * @param {EvaluatorCore} evaluatorCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEvaluatorV1: (paramsId: string, evaluatorCore: EvaluatorCore, options?: any) => Promise<RequestArgs>;
    /**
     * Update a feedback
     * @summary Update Feedback
     * @param {string} feedbackId
     * @param {FeedbackCore} feedbackCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFeedbackV1: (feedbackId: string, feedbackCore: FeedbackCore, options?: any) => Promise<RequestArgs>;
    /**
     * Update a goals collection
     * @summary Update Goals
     * @param {string} goalsId
     * @param {GoalCore} goalCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGoalsV1: (goalsId: string, goalCore: GoalCore, options?: any) => Promise<RequestArgs>;
    /**
     * Update a persona
     * @summary Update Persona
     * @param {string} personaId
     * @param {PersonaCore} personaCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePersonaV1: (personaId: string, personaCore: PersonaCore, options?: any) => Promise<RequestArgs>;
    /**
     * Update a scenario
     * @summary Update Scenario
     * @param {string} scenarioId
     * @param {ScenarioCore} scenarioCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateScenarioV1: (scenarioId: string, scenarioCore: ScenarioCore, options?: any) => Promise<RequestArgs>;
    /**
     * Update a tracker
     * @summary Update Tracker
     * @param {string} trackerId
     * @param {TrackerCore} trackerCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTrackerV1: (trackerId: string, trackerCore: TrackerCore, options?: any) => Promise<RequestArgs>;
    /**
     * Upload multiple files and create file records. Maximum 5 files per request, each file max 10MB.
     * @summary Upload Files
     * @param {Array<any>} files
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFilesV1: (files: Array<any>, options?: any) => Promise<RequestArgs>;
};
/**
 * SparrApi - functional programming interface
 * @export
 */
export declare const SparrApiFp: (configuration?: Configuration) => {
    /**
     * Add a module attempt for a user
     * @summary Add Module Attempt
     * @param {string} moduleId
     * @param {UserModuleAttemptCore} userModuleAttemptCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addModuleAttemptV1(moduleId: string, userModuleAttemptCore: UserModuleAttemptCore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserModuleAttempt>>;
    /**
     * Assign a course to a user
     * @summary Assign Course
     * @param {string} courseId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assignCourseV1(courseId: string, userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserCourseAssignment>>;
    /**
     * Attach a tag to an entity
     * @summary Attach Tag
     * @param {string} entityType
     * @param {string} entityId
     * @param {TagCreate} tagCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachTagV1SparrEntityTagsEntityTypeEntityIdTagsPost(entityType: string, entityId: string, tagCreate: TagCreate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityTag>>;
    /**
     * Create a checkout session for a price
     * @summary Create Checkout Session For Price
     * @param {string} priceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCheckoutSessionForPriceV1(priceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     * Create a new course
     * @summary Create Course
     * @param {CourseRequest} courseRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCourseV1(courseRequest: CourseRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseResponse>>;
    /**
     * Create a customer portal for customer
     * @summary Create Customer Portal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerPortalV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     * Create a new feedback
     * @summary Create Feedback
     * @param {FeedbackCore} feedbackCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFeedbackV1(feedbackCore: FeedbackCore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feedback>>;
    /**
     * Create a new goals collection
     * @summary Create Goals
     * @param {GoalCore} goalCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGoalsV1(goalCore: GoalCore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SparrDbModelsGoal>>;
    /**
     * Create a new persona
     * @summary Create Persona
     * @param {PersonaCore} personaCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPersonaV1(personaCore: PersonaCore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Persona>>;
    /**
     * Create a new evaluator
     * @summary Create Evaluator
     * @param {EvaluatorCore} evaluatorCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPostCallEvaluationParamsV1(evaluatorCore: EvaluatorCore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Evaluator>>;
    /**
     * Create a new scenario
     * @summary Create Scenario
     * @param {ScenarioCore} scenarioCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createScenarioV1(scenarioCore: ScenarioCore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Scenario>>;
    /**
     * Create a new tracker
     * @summary Create Tracker
     * @param {TrackerCore} trackerCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTrackerV1(trackerCore: TrackerCore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tracker>>;
    /**
     * Delete a course
     * @summary Delete Course
     * @param {string} courseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCourseV1(courseId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SparrModelsBaseBaseResponse>>;
    /**
     * Delete evaluator
     * @summary Delete Evaluator
     * @param {string} paramsId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEvaluatorV1(paramsId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SparrModelsBaseBaseResponse>>;
    /**
     * Delete a feedback
     * @summary Delete Feedback
     * @param {string} feedbackId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFeedbackV1(feedbackId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SparrModelsBaseBaseResponse>>;
    /**
     * Delete a file
     * @summary Delete File
     * @param {string} fileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFileV1(fileId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SparrModelsBaseBaseResponse>>;
    /**
     * Delete a goals collection
     * @summary Delete Goals
     * @param {string} goalsId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGoalsV1(goalsId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SparrModelsBaseBaseResponse>>;
    /**
     * Delete a persona
     * @summary Delete Persona
     * @param {string} personaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePersonaV1(personaId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SparrModelsBaseBaseResponse>>;
    /**
     * Delete a scenario
     * @summary Delete Scenario
     * @param {string} scenarioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteScenarioV1(scenarioId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SparrModelsBaseBaseResponse>>;
    /**
     * Delete a tracker
     * @summary Delete Tracker
     * @param {string} trackerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTrackerV1(trackerId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SparrModelsBaseBaseResponse>>;
    /**
     * Detach a tag from an entity
     * @summary Detach Tag
     * @param {string} entityType
     * @param {string} entityId
     * @param {string} tagName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    detachTagV1SparrEntityTagsEntityTypeEntityIdTagsTagNameDelete(entityType: string, entityId: string, tagName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SparrModelsBaseBaseResponse>>;
    /**
     * Generate evaluator data from files and/or existing core components
     * @summary Generate Evaluator
     * @param {FlexibleGenerationRequest} flexibleGenerationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateEvaluatorV1(flexibleGenerationRequest: FlexibleGenerationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CombinedEvaluatorResponse>>;
    /**
     * Get a specific course by ID
     * @summary Get Course
     * @param {string} courseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCourseV1(courseId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseResponse>>;
    /**
     * Get credits
     * @summary Get Credits V1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCreditsV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Credit>>>;
    /**
     * Get all entities of a type that have a specific tag
     * @summary Get Entities By Tag
     * @param {string} entityType
     * @param {string} tagName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntitiesByTagV1SparrEntityTagsEntityTypeByTagTagNameGet(entityType: string, tagName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EntityTag>>>;
    /**
     * Get all tags for an entity
     * @summary Get Entity Tags
     * @param {string} entityType
     * @param {string} entityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityTagsV1SparrEntityTagsEntityTypeEntityIdTagsGet(entityType: string, entityId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EntityTag>>>;
    /**
     * Get a specific evaluator by ID that is either directly owned or available through reseller course assignments
     * @summary Get Evaluator By Id
     * @param {string} paramsId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvaluatorV1(paramsId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Evaluator>>;
    /**
     * Get a specific feedback by ID
     * @summary Get Feedback
     * @param {string} feedbackId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeedbackV1(feedbackId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feedback>>;
    /**
     * Get a specific file by ID
     * @summary Get File
     * @param {string} fileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFileV1(fileId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Get a specific goals collection by ID that is either directly owned or available through reseller course assignments
     * @summary Get Goals By Id
     * @param {string} goalsId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGoalsV1(goalsId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SparrDbModelsGoal>>;
    /**
     * Get metrics for a given batch of metrics requests
     * @summary Get Metrics
     * @param {SparrModelsAnalyticsBatchMetricsRequests} sparrModelsAnalyticsBatchMetricsRequests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetricsV1(sparrModelsAnalyticsBatchMetricsRequests: SparrModelsAnalyticsBatchMetricsRequests, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SparrModelsAnalyticsBatchMetricsResponse>>;
    /**
     * Get a specific persona by ID that is either directly owned or available through reseller course assignments
     * @summary Get Persona
     * @param {string} personaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPersonaV1(personaId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Persona>>;
    /**
     * Get pricing
     * @summary Get Pricing V1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Price>>>;
    /**
     * Get a specific scenario by ID that is either directly owned or available through reseller course assignments
     * @summary Get Scenario
     * @param {string} scenarioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScenarioV1(scenarioId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Scenario>>;
    /**
     * Get a specific tracker by ID that is either directly owned or available through reseller course assignments
     * @summary Get Tracker By Id
     * @param {string} trackerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTrackerV1(trackerId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tracker>>;
    /**
     * Search personas by name, title and company
     * @summary Get User Stats
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserStatsV1(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserStats>>;
    /**
     * Import a persona from LinkedIn URL
     * @summary Import Linkedin Persona
     * @param {string} linkedinUrl
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    importLinkedinPersonaV1(linkedinUrl: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Persona>>;
    /**
     * Get all courses including reseller assignments
     * @summary Get Courses
     * @param {number} [skip] Skip for pagination
     * @param {number} [limit] Limit for pagination
     * @param {string} [status] Filter by status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCoursesV1(skip?: number, limit?: number, status?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CourseResponse>>>;
    /**
     * Get all evaluator that are either directly owned or available through reseller course assignments
     * @summary Get Evaluator
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEvaluatorV1(skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Evaluator>>>;
    /**
     * Get all feedbacks
     * @summary Get Feedbacks
     * @param {number} [skip] Skip for pagination
     * @param {number} [limit] Limit for pagination
     * @param {string} [fromDate] Start date for filtering feedbacks
     * @param {string} [toDate] End date for filtering feedbacks
     * @param {string} [userFilter] User filter for filtering feedbacks. Comma separated list of user ids.
     * @param {string} [statusFilter] Status filter for filtering feedbacks. Comma separated list of statuses.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFeedbacksV1(skip?: number, limit?: number, fromDate?: string, toDate?: string, userFilter?: string, statusFilter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Feedback>>>;
    /**
     * Get all goals that are either directly owned or available through reseller course assignments
     * @summary Get Goals
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listGoalsV1(skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SparrDbModelsGoal>>>;
    /**
     * Get all personas that are either directly owned or available through reseller course assignments
     * @summary Get Personas
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [tags] Filter personas by tag, comma separated names
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPersonasV1(skip?: number, limit?: number, tags?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Persona>>>;
    /**
     * Get all scenarios that are either directly owned or available through reseller course assignments
     * @summary Get Scenarios
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [tags] Filter scenarios by tag, comma separated names
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listScenariosV1(skip?: number, limit?: number, tags?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Scenario>>>;
    /**
     * Get all trackers that are either directly owned or available through reseller course assignments
     * @summary Get Trackers
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTrackerV1(skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tracker>>>;
    /**
     * Get all course assignments for a user with analytics
     * @summary Get User Assignments
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserAssignmentsV1(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserCourseAssignmentAnalyticsResponse>>>;
    /**
     * Get all module attempts with module information for a user in a specific course
     * @summary Get User Course Attempts
     * @param {string} courseId
     * @param {string} userId
     * @param {number} [skip] Skip for pagination
     * @param {number} [limit] Limit for pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserCourseAttemptsV1(courseId: string, userId: string, skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserModuleAttemptResponse>>>;
    /**
     * Get all module attempts for a user
     * @summary Get User Module Attempts
     * @param {string} moduleId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserModuleAttemptsV1(moduleId: string, userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserModuleAttemptResponse>>>;
    /**
     * Revoke a course from a user
     * @summary Revoke Course
     * @param {string} courseId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeCourseV1(courseId: string, userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SparrModelsBaseBaseResponse>>;
    /**
     * Search goals by name and description
     * @summary Search Goals
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchGoalsV1(query: string, page?: number, size?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalsSearchResponse>>;
    /**
     * Search personas by name, title and company
     * @summary Search Personas
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchPersonasV1(query: string, page?: number, size?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonaSearchResponse>>;
    /**
     * Search scenarios by name and description
     * @summary Search Scenarios
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchScenariosV1(query: string, page?: number, size?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScenarioSearchResponse>>;
    /**
     * Search trackers by name and description
     * @summary Search Tracker
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTrackerV1(query: string, page?: number, size?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrackerSearchResponse>>;
    /**
     * Heart Beat check to check the health of Sparr Service
     * @summary Heart Beat Status Of Sparr Service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusSparrStatusGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Update course completion status
     * @summary Update Course Completion Status
     * @param {string} courseId
     * @param {string} userId
     * @param {CourseCompletionStatus} completionStatus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCourseCompletionStatusV1(courseId: string, userId: string, completionStatus: CourseCompletionStatus, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserCourseAssignment>>;
    /**
     * Update a course
     * @summary Update Course
     * @param {string} courseId
     * @param {CourseUpdateRequest} courseUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCourseV1(courseId: string, courseUpdateRequest: CourseUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseResponse>>;
    /**
     * Update evaluator
     * @summary Update Evaluator
     * @param {string} paramsId
     * @param {EvaluatorCore} evaluatorCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEvaluatorV1(paramsId: string, evaluatorCore: EvaluatorCore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Evaluator>>;
    /**
     * Update a feedback
     * @summary Update Feedback
     * @param {string} feedbackId
     * @param {FeedbackCore} feedbackCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFeedbackV1(feedbackId: string, feedbackCore: FeedbackCore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feedback>>;
    /**
     * Update a goals collection
     * @summary Update Goals
     * @param {string} goalsId
     * @param {GoalCore} goalCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGoalsV1(goalsId: string, goalCore: GoalCore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SparrDbModelsGoal>>;
    /**
     * Update a persona
     * @summary Update Persona
     * @param {string} personaId
     * @param {PersonaCore} personaCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePersonaV1(personaId: string, personaCore: PersonaCore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Persona>>;
    /**
     * Update a scenario
     * @summary Update Scenario
     * @param {string} scenarioId
     * @param {ScenarioCore} scenarioCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateScenarioV1(scenarioId: string, scenarioCore: ScenarioCore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Scenario>>;
    /**
     * Update a tracker
     * @summary Update Tracker
     * @param {string} trackerId
     * @param {TrackerCore} trackerCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTrackerV1(trackerId: string, trackerCore: TrackerCore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tracker>>;
    /**
     * Upload multiple files and create file records. Maximum 5 files per request, each file max 10MB.
     * @summary Upload Files
     * @param {Array<any>} files
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFilesV1(files: Array<any>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>>;
};
/**
 * SparrApi - factory interface
 * @export
 */
export declare const SparrApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Add a module attempt for a user
     * @summary Add Module Attempt
     * @param {string} moduleId
     * @param {UserModuleAttemptCore} userModuleAttemptCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addModuleAttemptV1(moduleId: string, userModuleAttemptCore: UserModuleAttemptCore, options?: any): AxiosPromise<UserModuleAttempt>;
    /**
     * Assign a course to a user
     * @summary Assign Course
     * @param {string} courseId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    assignCourseV1(courseId: string, userId: string, options?: any): AxiosPromise<UserCourseAssignment>;
    /**
     * Attach a tag to an entity
     * @summary Attach Tag
     * @param {string} entityType
     * @param {string} entityId
     * @param {TagCreate} tagCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    attachTagV1SparrEntityTagsEntityTypeEntityIdTagsPost(entityType: string, entityId: string, tagCreate: TagCreate, options?: any): AxiosPromise<EntityTag>;
    /**
     * Create a checkout session for a price
     * @summary Create Checkout Session For Price
     * @param {string} priceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCheckoutSessionForPriceV1(priceId: string, options?: any): AxiosPromise<string>;
    /**
     * Create a new course
     * @summary Create Course
     * @param {CourseRequest} courseRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCourseV1(courseRequest: CourseRequest, options?: any): AxiosPromise<CourseResponse>;
    /**
     * Create a customer portal for customer
     * @summary Create Customer Portal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCustomerPortalV1(options?: any): AxiosPromise<string>;
    /**
     * Create a new feedback
     * @summary Create Feedback
     * @param {FeedbackCore} feedbackCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFeedbackV1(feedbackCore: FeedbackCore, options?: any): AxiosPromise<Feedback>;
    /**
     * Create a new goals collection
     * @summary Create Goals
     * @param {GoalCore} goalCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGoalsV1(goalCore: GoalCore, options?: any): AxiosPromise<SparrDbModelsGoal>;
    /**
     * Create a new persona
     * @summary Create Persona
     * @param {PersonaCore} personaCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPersonaV1(personaCore: PersonaCore, options?: any): AxiosPromise<Persona>;
    /**
     * Create a new evaluator
     * @summary Create Evaluator
     * @param {EvaluatorCore} evaluatorCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPostCallEvaluationParamsV1(evaluatorCore: EvaluatorCore, options?: any): AxiosPromise<Evaluator>;
    /**
     * Create a new scenario
     * @summary Create Scenario
     * @param {ScenarioCore} scenarioCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createScenarioV1(scenarioCore: ScenarioCore, options?: any): AxiosPromise<Scenario>;
    /**
     * Create a new tracker
     * @summary Create Tracker
     * @param {TrackerCore} trackerCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTrackerV1(trackerCore: TrackerCore, options?: any): AxiosPromise<Tracker>;
    /**
     * Delete a course
     * @summary Delete Course
     * @param {string} courseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCourseV1(courseId: string, options?: any): AxiosPromise<SparrModelsBaseBaseResponse>;
    /**
     * Delete evaluator
     * @summary Delete Evaluator
     * @param {string} paramsId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEvaluatorV1(paramsId: string, options?: any): AxiosPromise<SparrModelsBaseBaseResponse>;
    /**
     * Delete a feedback
     * @summary Delete Feedback
     * @param {string} feedbackId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFeedbackV1(feedbackId: string, options?: any): AxiosPromise<SparrModelsBaseBaseResponse>;
    /**
     * Delete a file
     * @summary Delete File
     * @param {string} fileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFileV1(fileId: string, options?: any): AxiosPromise<SparrModelsBaseBaseResponse>;
    /**
     * Delete a goals collection
     * @summary Delete Goals
     * @param {string} goalsId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGoalsV1(goalsId: string, options?: any): AxiosPromise<SparrModelsBaseBaseResponse>;
    /**
     * Delete a persona
     * @summary Delete Persona
     * @param {string} personaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePersonaV1(personaId: string, options?: any): AxiosPromise<SparrModelsBaseBaseResponse>;
    /**
     * Delete a scenario
     * @summary Delete Scenario
     * @param {string} scenarioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteScenarioV1(scenarioId: string, options?: any): AxiosPromise<SparrModelsBaseBaseResponse>;
    /**
     * Delete a tracker
     * @summary Delete Tracker
     * @param {string} trackerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTrackerV1(trackerId: string, options?: any): AxiosPromise<SparrModelsBaseBaseResponse>;
    /**
     * Detach a tag from an entity
     * @summary Detach Tag
     * @param {string} entityType
     * @param {string} entityId
     * @param {string} tagName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    detachTagV1SparrEntityTagsEntityTypeEntityIdTagsTagNameDelete(entityType: string, entityId: string, tagName: string, options?: any): AxiosPromise<SparrModelsBaseBaseResponse>;
    /**
     * Generate evaluator data from files and/or existing core components
     * @summary Generate Evaluator
     * @param {FlexibleGenerationRequest} flexibleGenerationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateEvaluatorV1(flexibleGenerationRequest: FlexibleGenerationRequest, options?: any): AxiosPromise<CombinedEvaluatorResponse>;
    /**
     * Get a specific course by ID
     * @summary Get Course
     * @param {string} courseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCourseV1(courseId: string, options?: any): AxiosPromise<CourseResponse>;
    /**
     * Get credits
     * @summary Get Credits V1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCreditsV1(options?: any): AxiosPromise<Array<Credit>>;
    /**
     * Get all entities of a type that have a specific tag
     * @summary Get Entities By Tag
     * @param {string} entityType
     * @param {string} tagName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntitiesByTagV1SparrEntityTagsEntityTypeByTagTagNameGet(entityType: string, tagName: string, options?: any): AxiosPromise<Array<EntityTag>>;
    /**
     * Get all tags for an entity
     * @summary Get Entity Tags
     * @param {string} entityType
     * @param {string} entityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEntityTagsV1SparrEntityTagsEntityTypeEntityIdTagsGet(entityType: string, entityId: string, options?: any): AxiosPromise<Array<EntityTag>>;
    /**
     * Get a specific evaluator by ID that is either directly owned or available through reseller course assignments
     * @summary Get Evaluator By Id
     * @param {string} paramsId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvaluatorV1(paramsId: string, options?: any): AxiosPromise<Evaluator>;
    /**
     * Get a specific feedback by ID
     * @summary Get Feedback
     * @param {string} feedbackId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeedbackV1(feedbackId: string, options?: any): AxiosPromise<Feedback>;
    /**
     * Get a specific file by ID
     * @summary Get File
     * @param {string} fileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFileV1(fileId: string, options?: any): AxiosPromise<any>;
    /**
     * Get a specific goals collection by ID that is either directly owned or available through reseller course assignments
     * @summary Get Goals By Id
     * @param {string} goalsId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGoalsV1(goalsId: string, options?: any): AxiosPromise<SparrDbModelsGoal>;
    /**
     * Get metrics for a given batch of metrics requests
     * @summary Get Metrics
     * @param {SparrModelsAnalyticsBatchMetricsRequests} sparrModelsAnalyticsBatchMetricsRequests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMetricsV1(sparrModelsAnalyticsBatchMetricsRequests: SparrModelsAnalyticsBatchMetricsRequests, options?: any): AxiosPromise<SparrModelsAnalyticsBatchMetricsResponse>;
    /**
     * Get a specific persona by ID that is either directly owned or available through reseller course assignments
     * @summary Get Persona
     * @param {string} personaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPersonaV1(personaId: string, options?: any): AxiosPromise<Persona>;
    /**
     * Get pricing
     * @summary Get Pricing V1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPricingV1(options?: any): AxiosPromise<Array<Price>>;
    /**
     * Get a specific scenario by ID that is either directly owned or available through reseller course assignments
     * @summary Get Scenario
     * @param {string} scenarioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScenarioV1(scenarioId: string, options?: any): AxiosPromise<Scenario>;
    /**
     * Get a specific tracker by ID that is either directly owned or available through reseller course assignments
     * @summary Get Tracker By Id
     * @param {string} trackerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTrackerV1(trackerId: string, options?: any): AxiosPromise<Tracker>;
    /**
     * Search personas by name, title and company
     * @summary Get User Stats
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserStatsV1(userId: string, options?: any): AxiosPromise<UserStats>;
    /**
     * Import a persona from LinkedIn URL
     * @summary Import Linkedin Persona
     * @param {string} linkedinUrl
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    importLinkedinPersonaV1(linkedinUrl: string, options?: any): AxiosPromise<Persona>;
    /**
     * Get all courses including reseller assignments
     * @summary Get Courses
     * @param {number} [skip] Skip for pagination
     * @param {number} [limit] Limit for pagination
     * @param {string} [status] Filter by status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCoursesV1(skip?: number, limit?: number, status?: string, options?: any): AxiosPromise<Array<CourseResponse>>;
    /**
     * Get all evaluator that are either directly owned or available through reseller course assignments
     * @summary Get Evaluator
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEvaluatorV1(skip?: number, limit?: number, options?: any): AxiosPromise<Array<Evaluator>>;
    /**
     * Get all feedbacks
     * @summary Get Feedbacks
     * @param {number} [skip] Skip for pagination
     * @param {number} [limit] Limit for pagination
     * @param {string} [fromDate] Start date for filtering feedbacks
     * @param {string} [toDate] End date for filtering feedbacks
     * @param {string} [userFilter] User filter for filtering feedbacks. Comma separated list of user ids.
     * @param {string} [statusFilter] Status filter for filtering feedbacks. Comma separated list of statuses.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFeedbacksV1(skip?: number, limit?: number, fromDate?: string, toDate?: string, userFilter?: string, statusFilter?: string, options?: any): AxiosPromise<Array<Feedback>>;
    /**
     * Get all goals that are either directly owned or available through reseller course assignments
     * @summary Get Goals
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listGoalsV1(skip?: number, limit?: number, options?: any): AxiosPromise<Array<SparrDbModelsGoal>>;
    /**
     * Get all personas that are either directly owned or available through reseller course assignments
     * @summary Get Personas
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [tags] Filter personas by tag, comma separated names
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPersonasV1(skip?: number, limit?: number, tags?: string, options?: any): AxiosPromise<Array<Persona>>;
    /**
     * Get all scenarios that are either directly owned or available through reseller course assignments
     * @summary Get Scenarios
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [tags] Filter scenarios by tag, comma separated names
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listScenariosV1(skip?: number, limit?: number, tags?: string, options?: any): AxiosPromise<Array<Scenario>>;
    /**
     * Get all trackers that are either directly owned or available through reseller course assignments
     * @summary Get Trackers
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTrackerV1(skip?: number, limit?: number, options?: any): AxiosPromise<Array<Tracker>>;
    /**
     * Get all course assignments for a user with analytics
     * @summary Get User Assignments
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserAssignmentsV1(userId: string, options?: any): AxiosPromise<Array<UserCourseAssignmentAnalyticsResponse>>;
    /**
     * Get all module attempts with module information for a user in a specific course
     * @summary Get User Course Attempts
     * @param {string} courseId
     * @param {string} userId
     * @param {number} [skip] Skip for pagination
     * @param {number} [limit] Limit for pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserCourseAttemptsV1(courseId: string, userId: string, skip?: number, limit?: number, options?: any): AxiosPromise<Array<UserModuleAttemptResponse>>;
    /**
     * Get all module attempts for a user
     * @summary Get User Module Attempts
     * @param {string} moduleId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserModuleAttemptsV1(moduleId: string, userId: string, options?: any): AxiosPromise<Array<UserModuleAttemptResponse>>;
    /**
     * Revoke a course from a user
     * @summary Revoke Course
     * @param {string} courseId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeCourseV1(courseId: string, userId: string, options?: any): AxiosPromise<SparrModelsBaseBaseResponse>;
    /**
     * Search goals by name and description
     * @summary Search Goals
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchGoalsV1(query: string, page?: number, size?: number, options?: any): AxiosPromise<GoalsSearchResponse>;
    /**
     * Search personas by name, title and company
     * @summary Search Personas
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchPersonasV1(query: string, page?: number, size?: number, options?: any): AxiosPromise<PersonaSearchResponse>;
    /**
     * Search scenarios by name and description
     * @summary Search Scenarios
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchScenariosV1(query: string, page?: number, size?: number, options?: any): AxiosPromise<ScenarioSearchResponse>;
    /**
     * Search trackers by name and description
     * @summary Search Tracker
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTrackerV1(query: string, page?: number, size?: number, options?: any): AxiosPromise<TrackerSearchResponse>;
    /**
     * Heart Beat check to check the health of Sparr Service
     * @summary Heart Beat Status Of Sparr Service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    statusSparrStatusGet(options?: any): AxiosPromise<object>;
    /**
     * Update course completion status
     * @summary Update Course Completion Status
     * @param {string} courseId
     * @param {string} userId
     * @param {CourseCompletionStatus} completionStatus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCourseCompletionStatusV1(courseId: string, userId: string, completionStatus: CourseCompletionStatus, options?: any): AxiosPromise<UserCourseAssignment>;
    /**
     * Update a course
     * @summary Update Course
     * @param {string} courseId
     * @param {CourseUpdateRequest} courseUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCourseV1(courseId: string, courseUpdateRequest: CourseUpdateRequest, options?: any): AxiosPromise<CourseResponse>;
    /**
     * Update evaluator
     * @summary Update Evaluator
     * @param {string} paramsId
     * @param {EvaluatorCore} evaluatorCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEvaluatorV1(paramsId: string, evaluatorCore: EvaluatorCore, options?: any): AxiosPromise<Evaluator>;
    /**
     * Update a feedback
     * @summary Update Feedback
     * @param {string} feedbackId
     * @param {FeedbackCore} feedbackCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFeedbackV1(feedbackId: string, feedbackCore: FeedbackCore, options?: any): AxiosPromise<Feedback>;
    /**
     * Update a goals collection
     * @summary Update Goals
     * @param {string} goalsId
     * @param {GoalCore} goalCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGoalsV1(goalsId: string, goalCore: GoalCore, options?: any): AxiosPromise<SparrDbModelsGoal>;
    /**
     * Update a persona
     * @summary Update Persona
     * @param {string} personaId
     * @param {PersonaCore} personaCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePersonaV1(personaId: string, personaCore: PersonaCore, options?: any): AxiosPromise<Persona>;
    /**
     * Update a scenario
     * @summary Update Scenario
     * @param {string} scenarioId
     * @param {ScenarioCore} scenarioCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateScenarioV1(scenarioId: string, scenarioCore: ScenarioCore, options?: any): AxiosPromise<Scenario>;
    /**
     * Update a tracker
     * @summary Update Tracker
     * @param {string} trackerId
     * @param {TrackerCore} trackerCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTrackerV1(trackerId: string, trackerCore: TrackerCore, options?: any): AxiosPromise<Tracker>;
    /**
     * Upload multiple files and create file records. Maximum 5 files per request, each file max 10MB.
     * @summary Upload Files
     * @param {Array<any>} files
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFilesV1(files: Array<any>, options?: any): AxiosPromise<Array<any>>;
};
/**
 * SparrApi - object-oriented interface
 * @export
 * @class SparrApi
 * @extends {BaseAPI}
 */
export declare class SparrApi extends BaseAPI {
    /**
     * Add a module attempt for a user
     * @summary Add Module Attempt
     * @param {string} moduleId
     * @param {UserModuleAttemptCore} userModuleAttemptCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    addModuleAttemptV1(moduleId: string, userModuleAttemptCore: UserModuleAttemptCore, options?: any): Promise<import("axios").AxiosResponse<UserModuleAttempt>>;
    /**
     * Assign a course to a user
     * @summary Assign Course
     * @param {string} courseId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    assignCourseV1(courseId: string, userId: string, options?: any): Promise<import("axios").AxiosResponse<UserCourseAssignment>>;
    /**
     * Attach a tag to an entity
     * @summary Attach Tag
     * @param {string} entityType
     * @param {string} entityId
     * @param {TagCreate} tagCreate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    attachTagV1SparrEntityTagsEntityTypeEntityIdTagsPost(entityType: string, entityId: string, tagCreate: TagCreate, options?: any): Promise<import("axios").AxiosResponse<EntityTag>>;
    /**
     * Create a checkout session for a price
     * @summary Create Checkout Session For Price
     * @param {string} priceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    createCheckoutSessionForPriceV1(priceId: string, options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     * Create a new course
     * @summary Create Course
     * @param {CourseRequest} courseRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    createCourseV1(courseRequest: CourseRequest, options?: any): Promise<import("axios").AxiosResponse<CourseResponse>>;
    /**
     * Create a customer portal for customer
     * @summary Create Customer Portal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    createCustomerPortalV1(options?: any): Promise<import("axios").AxiosResponse<string>>;
    /**
     * Create a new feedback
     * @summary Create Feedback
     * @param {FeedbackCore} feedbackCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    createFeedbackV1(feedbackCore: FeedbackCore, options?: any): Promise<import("axios").AxiosResponse<Feedback>>;
    /**
     * Create a new goals collection
     * @summary Create Goals
     * @param {GoalCore} goalCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    createGoalsV1(goalCore: GoalCore, options?: any): Promise<import("axios").AxiosResponse<SparrDbModelsGoal>>;
    /**
     * Create a new persona
     * @summary Create Persona
     * @param {PersonaCore} personaCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    createPersonaV1(personaCore: PersonaCore, options?: any): Promise<import("axios").AxiosResponse<Persona>>;
    /**
     * Create a new evaluator
     * @summary Create Evaluator
     * @param {EvaluatorCore} evaluatorCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    createPostCallEvaluationParamsV1(evaluatorCore: EvaluatorCore, options?: any): Promise<import("axios").AxiosResponse<Evaluator>>;
    /**
     * Create a new scenario
     * @summary Create Scenario
     * @param {ScenarioCore} scenarioCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    createScenarioV1(scenarioCore: ScenarioCore, options?: any): Promise<import("axios").AxiosResponse<Scenario>>;
    /**
     * Create a new tracker
     * @summary Create Tracker
     * @param {TrackerCore} trackerCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    createTrackerV1(trackerCore: TrackerCore, options?: any): Promise<import("axios").AxiosResponse<Tracker>>;
    /**
     * Delete a course
     * @summary Delete Course
     * @param {string} courseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    deleteCourseV1(courseId: string, options?: any): Promise<import("axios").AxiosResponse<SparrModelsBaseBaseResponse>>;
    /**
     * Delete evaluator
     * @summary Delete Evaluator
     * @param {string} paramsId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    deleteEvaluatorV1(paramsId: string, options?: any): Promise<import("axios").AxiosResponse<SparrModelsBaseBaseResponse>>;
    /**
     * Delete a feedback
     * @summary Delete Feedback
     * @param {string} feedbackId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    deleteFeedbackV1(feedbackId: string, options?: any): Promise<import("axios").AxiosResponse<SparrModelsBaseBaseResponse>>;
    /**
     * Delete a file
     * @summary Delete File
     * @param {string} fileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    deleteFileV1(fileId: string, options?: any): Promise<import("axios").AxiosResponse<SparrModelsBaseBaseResponse>>;
    /**
     * Delete a goals collection
     * @summary Delete Goals
     * @param {string} goalsId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    deleteGoalsV1(goalsId: string, options?: any): Promise<import("axios").AxiosResponse<SparrModelsBaseBaseResponse>>;
    /**
     * Delete a persona
     * @summary Delete Persona
     * @param {string} personaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    deletePersonaV1(personaId: string, options?: any): Promise<import("axios").AxiosResponse<SparrModelsBaseBaseResponse>>;
    /**
     * Delete a scenario
     * @summary Delete Scenario
     * @param {string} scenarioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    deleteScenarioV1(scenarioId: string, options?: any): Promise<import("axios").AxiosResponse<SparrModelsBaseBaseResponse>>;
    /**
     * Delete a tracker
     * @summary Delete Tracker
     * @param {string} trackerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    deleteTrackerV1(trackerId: string, options?: any): Promise<import("axios").AxiosResponse<SparrModelsBaseBaseResponse>>;
    /**
     * Detach a tag from an entity
     * @summary Detach Tag
     * @param {string} entityType
     * @param {string} entityId
     * @param {string} tagName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    detachTagV1SparrEntityTagsEntityTypeEntityIdTagsTagNameDelete(entityType: string, entityId: string, tagName: string, options?: any): Promise<import("axios").AxiosResponse<SparrModelsBaseBaseResponse>>;
    /**
     * Generate evaluator data from files and/or existing core components
     * @summary Generate Evaluator
     * @param {FlexibleGenerationRequest} flexibleGenerationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    generateEvaluatorV1(flexibleGenerationRequest: FlexibleGenerationRequest, options?: any): Promise<import("axios").AxiosResponse<CombinedEvaluatorResponse>>;
    /**
     * Get a specific course by ID
     * @summary Get Course
     * @param {string} courseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    getCourseV1(courseId: string, options?: any): Promise<import("axios").AxiosResponse<CourseResponse>>;
    /**
     * Get credits
     * @summary Get Credits V1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    getCreditsV1(options?: any): Promise<import("axios").AxiosResponse<Credit[]>>;
    /**
     * Get all entities of a type that have a specific tag
     * @summary Get Entities By Tag
     * @param {string} entityType
     * @param {string} tagName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    getEntitiesByTagV1SparrEntityTagsEntityTypeByTagTagNameGet(entityType: string, tagName: string, options?: any): Promise<import("axios").AxiosResponse<EntityTag[]>>;
    /**
     * Get all tags for an entity
     * @summary Get Entity Tags
     * @param {string} entityType
     * @param {string} entityId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    getEntityTagsV1SparrEntityTagsEntityTypeEntityIdTagsGet(entityType: string, entityId: string, options?: any): Promise<import("axios").AxiosResponse<EntityTag[]>>;
    /**
     * Get a specific evaluator by ID that is either directly owned or available through reseller course assignments
     * @summary Get Evaluator By Id
     * @param {string} paramsId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    getEvaluatorV1(paramsId: string, options?: any): Promise<import("axios").AxiosResponse<Evaluator>>;
    /**
     * Get a specific feedback by ID
     * @summary Get Feedback
     * @param {string} feedbackId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    getFeedbackV1(feedbackId: string, options?: any): Promise<import("axios").AxiosResponse<Feedback>>;
    /**
     * Get a specific file by ID
     * @summary Get File
     * @param {string} fileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    getFileV1(fileId: string, options?: any): Promise<import("axios").AxiosResponse<any>>;
    /**
     * Get a specific goals collection by ID that is either directly owned or available through reseller course assignments
     * @summary Get Goals By Id
     * @param {string} goalsId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    getGoalsV1(goalsId: string, options?: any): Promise<import("axios").AxiosResponse<SparrDbModelsGoal>>;
    /**
     * Get metrics for a given batch of metrics requests
     * @summary Get Metrics
     * @param {SparrModelsAnalyticsBatchMetricsRequests} sparrModelsAnalyticsBatchMetricsRequests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    getMetricsV1(sparrModelsAnalyticsBatchMetricsRequests: SparrModelsAnalyticsBatchMetricsRequests, options?: any): Promise<import("axios").AxiosResponse<SparrModelsAnalyticsBatchMetricsResponse>>;
    /**
     * Get a specific persona by ID that is either directly owned or available through reseller course assignments
     * @summary Get Persona
     * @param {string} personaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    getPersonaV1(personaId: string, options?: any): Promise<import("axios").AxiosResponse<Persona>>;
    /**
     * Get pricing
     * @summary Get Pricing V1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    getPricingV1(options?: any): Promise<import("axios").AxiosResponse<Price[]>>;
    /**
     * Get a specific scenario by ID that is either directly owned or available through reseller course assignments
     * @summary Get Scenario
     * @param {string} scenarioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    getScenarioV1(scenarioId: string, options?: any): Promise<import("axios").AxiosResponse<Scenario>>;
    /**
     * Get a specific tracker by ID that is either directly owned or available through reseller course assignments
     * @summary Get Tracker By Id
     * @param {string} trackerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    getTrackerV1(trackerId: string, options?: any): Promise<import("axios").AxiosResponse<Tracker>>;
    /**
     * Search personas by name, title and company
     * @summary Get User Stats
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    getUserStatsV1(userId: string, options?: any): Promise<import("axios").AxiosResponse<UserStats>>;
    /**
     * Import a persona from LinkedIn URL
     * @summary Import Linkedin Persona
     * @param {string} linkedinUrl
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    importLinkedinPersonaV1(linkedinUrl: string, options?: any): Promise<import("axios").AxiosResponse<Persona>>;
    /**
     * Get all courses including reseller assignments
     * @summary Get Courses
     * @param {number} [skip] Skip for pagination
     * @param {number} [limit] Limit for pagination
     * @param {string} [status] Filter by status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    listCoursesV1(skip?: number, limit?: number, status?: string, options?: any): Promise<import("axios").AxiosResponse<CourseResponse[]>>;
    /**
     * Get all evaluator that are either directly owned or available through reseller course assignments
     * @summary Get Evaluator
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    listEvaluatorV1(skip?: number, limit?: number, options?: any): Promise<import("axios").AxiosResponse<Evaluator[]>>;
    /**
     * Get all feedbacks
     * @summary Get Feedbacks
     * @param {number} [skip] Skip for pagination
     * @param {number} [limit] Limit for pagination
     * @param {string} [fromDate] Start date for filtering feedbacks
     * @param {string} [toDate] End date for filtering feedbacks
     * @param {string} [userFilter] User filter for filtering feedbacks. Comma separated list of user ids.
     * @param {string} [statusFilter] Status filter for filtering feedbacks. Comma separated list of statuses.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    listFeedbacksV1(skip?: number, limit?: number, fromDate?: string, toDate?: string, userFilter?: string, statusFilter?: string, options?: any): Promise<import("axios").AxiosResponse<Feedback[]>>;
    /**
     * Get all goals that are either directly owned or available through reseller course assignments
     * @summary Get Goals
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    listGoalsV1(skip?: number, limit?: number, options?: any): Promise<import("axios").AxiosResponse<SparrDbModelsGoal[]>>;
    /**
     * Get all personas that are either directly owned or available through reseller course assignments
     * @summary Get Personas
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [tags] Filter personas by tag, comma separated names
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    listPersonasV1(skip?: number, limit?: number, tags?: string, options?: any): Promise<import("axios").AxiosResponse<Persona[]>>;
    /**
     * Get all scenarios that are either directly owned or available through reseller course assignments
     * @summary Get Scenarios
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [tags] Filter scenarios by tag, comma separated names
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    listScenariosV1(skip?: number, limit?: number, tags?: string, options?: any): Promise<import("axios").AxiosResponse<Scenario[]>>;
    /**
     * Get all trackers that are either directly owned or available through reseller course assignments
     * @summary Get Trackers
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    listTrackerV1(skip?: number, limit?: number, options?: any): Promise<import("axios").AxiosResponse<Tracker[]>>;
    /**
     * Get all course assignments for a user with analytics
     * @summary Get User Assignments
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    listUserAssignmentsV1(userId: string, options?: any): Promise<import("axios").AxiosResponse<UserCourseAssignmentAnalyticsResponse[]>>;
    /**
     * Get all module attempts with module information for a user in a specific course
     * @summary Get User Course Attempts
     * @param {string} courseId
     * @param {string} userId
     * @param {number} [skip] Skip for pagination
     * @param {number} [limit] Limit for pagination
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    listUserCourseAttemptsV1(courseId: string, userId: string, skip?: number, limit?: number, options?: any): Promise<import("axios").AxiosResponse<UserModuleAttemptResponse[]>>;
    /**
     * Get all module attempts for a user
     * @summary Get User Module Attempts
     * @param {string} moduleId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    listUserModuleAttemptsV1(moduleId: string, userId: string, options?: any): Promise<import("axios").AxiosResponse<UserModuleAttemptResponse[]>>;
    /**
     * Revoke a course from a user
     * @summary Revoke Course
     * @param {string} courseId
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    revokeCourseV1(courseId: string, userId: string, options?: any): Promise<import("axios").AxiosResponse<SparrModelsBaseBaseResponse>>;
    /**
     * Search goals by name and description
     * @summary Search Goals
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    searchGoalsV1(query: string, page?: number, size?: number, options?: any): Promise<import("axios").AxiosResponse<GoalsSearchResponse>>;
    /**
     * Search personas by name, title and company
     * @summary Search Personas
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    searchPersonasV1(query: string, page?: number, size?: number, options?: any): Promise<import("axios").AxiosResponse<PersonaSearchResponse>>;
    /**
     * Search scenarios by name and description
     * @summary Search Scenarios
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    searchScenariosV1(query: string, page?: number, size?: number, options?: any): Promise<import("axios").AxiosResponse<ScenarioSearchResponse>>;
    /**
     * Search trackers by name and description
     * @summary Search Tracker
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    searchTrackerV1(query: string, page?: number, size?: number, options?: any): Promise<import("axios").AxiosResponse<TrackerSearchResponse>>;
    /**
     * Heart Beat check to check the health of Sparr Service
     * @summary Heart Beat Status Of Sparr Service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    statusSparrStatusGet(options?: any): Promise<import("axios").AxiosResponse<object>>;
    /**
     * Update course completion status
     * @summary Update Course Completion Status
     * @param {string} courseId
     * @param {string} userId
     * @param {CourseCompletionStatus} completionStatus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    updateCourseCompletionStatusV1(courseId: string, userId: string, completionStatus: CourseCompletionStatus, options?: any): Promise<import("axios").AxiosResponse<UserCourseAssignment>>;
    /**
     * Update a course
     * @summary Update Course
     * @param {string} courseId
     * @param {CourseUpdateRequest} courseUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    updateCourseV1(courseId: string, courseUpdateRequest: CourseUpdateRequest, options?: any): Promise<import("axios").AxiosResponse<CourseResponse>>;
    /**
     * Update evaluator
     * @summary Update Evaluator
     * @param {string} paramsId
     * @param {EvaluatorCore} evaluatorCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    updateEvaluatorV1(paramsId: string, evaluatorCore: EvaluatorCore, options?: any): Promise<import("axios").AxiosResponse<Evaluator>>;
    /**
     * Update a feedback
     * @summary Update Feedback
     * @param {string} feedbackId
     * @param {FeedbackCore} feedbackCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    updateFeedbackV1(feedbackId: string, feedbackCore: FeedbackCore, options?: any): Promise<import("axios").AxiosResponse<Feedback>>;
    /**
     * Update a goals collection
     * @summary Update Goals
     * @param {string} goalsId
     * @param {GoalCore} goalCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    updateGoalsV1(goalsId: string, goalCore: GoalCore, options?: any): Promise<import("axios").AxiosResponse<SparrDbModelsGoal>>;
    /**
     * Update a persona
     * @summary Update Persona
     * @param {string} personaId
     * @param {PersonaCore} personaCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    updatePersonaV1(personaId: string, personaCore: PersonaCore, options?: any): Promise<import("axios").AxiosResponse<Persona>>;
    /**
     * Update a scenario
     * @summary Update Scenario
     * @param {string} scenarioId
     * @param {ScenarioCore} scenarioCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    updateScenarioV1(scenarioId: string, scenarioCore: ScenarioCore, options?: any): Promise<import("axios").AxiosResponse<Scenario>>;
    /**
     * Update a tracker
     * @summary Update Tracker
     * @param {string} trackerId
     * @param {TrackerCore} trackerCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    updateTrackerV1(trackerId: string, trackerCore: TrackerCore, options?: any): Promise<import("axios").AxiosResponse<Tracker>>;
    /**
     * Upload multiple files and create file records. Maximum 5 files per request, each file max 10MB.
     * @summary Upload Files
     * @param {Array<any>} files
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrApi
     */
    uploadFilesV1(files: Array<any>, options?: any): Promise<import("axios").AxiosResponse<any[]>>;
}
/**
 * SparrResellerApi - axios parameter creator
 * @export
 */
export declare const SparrResellerApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a new course
     * @summary Create Course
     * @param {CourseRequest} courseRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCourseResellerV1: (courseRequest: CourseRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Create a new evaluator
     * @summary Create Evaluator
     * @param {EvaluatorCore} evaluatorCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEvaluatorResellerV1: (evaluatorCore: EvaluatorCore, options?: any) => Promise<RequestArgs>;
    /**
     * Create a new goals collection
     * @summary Create Goals
     * @param {GoalCore} goalCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGoalsResellerV1: (goalCore: GoalCore, options?: any) => Promise<RequestArgs>;
    /**
     * Create a new persona
     * @summary Create Persona
     * @param {PersonaCore} personaCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPersonaResellerV1: (personaCore: PersonaCore, options?: any) => Promise<RequestArgs>;
    /**
     * Create a new scenario
     * @summary Create Scenario
     * @param {ScenarioCore} scenarioCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createScenarioResellerV1: (scenarioCore: ScenarioCore, options?: any) => Promise<RequestArgs>;
    /**
     * Create a new tracker
     * @summary Create Tracker
     * @param {TrackerCore} trackerCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTrackerResellerV1: (trackerCore: TrackerCore, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a course
     * @summary Delete Course
     * @param {string} courseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCourseResellerV1: (courseId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Delete evaluator
     * @summary Delete Evaluator
     * @param {string} paramsId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEvaluatorResellerV1: (paramsId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a goals collection
     * @summary Delete Goals
     * @param {string} goalsId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGoalsResellerV1: (goalsId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a persona
     * @summary Delete Persona
     * @param {string} personaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePersonaResellerV1: (personaId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a scenario
     * @summary Delete Scenario
     * @param {string} scenarioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteScenarioResellerV1: (scenarioId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a tracker
     * @summary Delete Tracker
     * @param {string} trackerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTrackerResellerV1: (trackerId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Generate evaluator data from files and/or existing core components
     * @summary Generate Evaluator
     * @param {FlexibleGenerationRequest} flexibleGenerationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateEvaluatorResellerV1: (flexibleGenerationRequest: FlexibleGenerationRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Get a specific course by ID
     * @summary Get Course
     * @param {string} courseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCourseResellerV1: (courseId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a specific evaluator by ID that is either directly owned or available through reseller course assignments
     * @summary Get Evaluator By Id
     * @param {string} paramsId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvaluatorResellerV1: (paramsId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a specific goals collection by ID that is either directly owned or available through reseller course assignments
     * @summary Get Goals By Id
     * @param {string} goalsId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGoalsResellerV1: (goalsId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a specific persona by ID that is either directly owned or available through reseller course assignments
     * @summary Get Persona
     * @param {string} personaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPersonaResellerV1: (personaId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a specific scenario by ID that is either directly owned or available through reseller course assignments
     * @summary Get Scenario
     * @param {string} scenarioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScenarioResellerV1: (scenarioId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a specific tracker by ID that is either directly owned or available through reseller course assignments
     * @summary Get Tracker By Id
     * @param {string} trackerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTrackerResellerV1: (trackerId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Import a persona from LinkedIn URL
     * @summary Import Linkedin Persona
     * @param {string} linkedinUrl
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    importLinkedinPersonaResellerV1: (linkedinUrl: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get all courses including reseller assignments
     * @summary Get Courses
     * @param {number} [skip] Skip for pagination
     * @param {number} [limit] Limit for pagination
     * @param {string} [status] Filter by status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCoursesResellerV1: (skip?: number, limit?: number, status?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get all evaluator that are either directly owned or available through reseller course assignments
     * @summary Get Evaluator
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEvaluatorResellerV1: (skip?: number, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Get all goals that are either directly owned or available through reseller course assignments
     * @summary Get Goals
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listGoalsResellerV1: (skip?: number, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Get all personas that are either directly owned or available through reseller course assignments
     * @summary Get Personas
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [tags] Filter personas by tag, comma separated names
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPersonasResellerV1: (skip?: number, limit?: number, tags?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get all scenarios that are either directly owned or available through reseller course assignments
     * @summary Get Scenarios
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [tags] Filter scenarios by tag, comma separated names
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listScenariosResellerV1: (skip?: number, limit?: number, tags?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get all trackers that are either directly owned or available through reseller course assignments
     * @summary Get Trackers
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTrackerResellerV1: (skip?: number, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Search goals by name and description
     * @summary Search Goals
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchGoalsResellerV1: (query: string, page?: number, size?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Search personas by name, title and company
     * @summary Search Personas
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchPersonasResellerV1: (query: string, page?: number, size?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Search scenarios by name and description
     * @summary Search Scenarios
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchScenariosResellerV1: (query: string, page?: number, size?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Search trackers by name and description
     * @summary Search Tracker
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTrackerResellerV1: (query: string, page?: number, size?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Update a course
     * @summary Update Course
     * @param {string} courseId
     * @param {CourseUpdateRequest} courseUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCourseResellerV1: (courseId: string, courseUpdateRequest: CourseUpdateRequest, options?: any) => Promise<RequestArgs>;
    /**
     * Update evaluator
     * @summary Update Evaluator
     * @param {string} paramsId
     * @param {EvaluatorCore} evaluatorCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEvaluatorResellerV1: (paramsId: string, evaluatorCore: EvaluatorCore, options?: any) => Promise<RequestArgs>;
    /**
     * Update a goals collection
     * @summary Update Goals
     * @param {string} goalsId
     * @param {GoalCore} goalCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGoalsResellerV1: (goalsId: string, goalCore: GoalCore, options?: any) => Promise<RequestArgs>;
    /**
     * Update a persona
     * @summary Update Persona
     * @param {string} personaId
     * @param {PersonaCore} personaCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePersonaResellerV1: (personaId: string, personaCore: PersonaCore, options?: any) => Promise<RequestArgs>;
    /**
     * Update a scenario
     * @summary Update Scenario
     * @param {string} scenarioId
     * @param {ScenarioCore} scenarioCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateScenarioResellerV1: (scenarioId: string, scenarioCore: ScenarioCore, options?: any) => Promise<RequestArgs>;
    /**
     * Update a tracker
     * @summary Update Tracker
     * @param {string} trackerId
     * @param {TrackerCore} trackerCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTrackerResellerV1: (trackerId: string, trackerCore: TrackerCore, options?: any) => Promise<RequestArgs>;
};
/**
 * SparrResellerApi - functional programming interface
 * @export
 */
export declare const SparrResellerApiFp: (configuration?: Configuration) => {
    /**
     * Create a new course
     * @summary Create Course
     * @param {CourseRequest} courseRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCourseResellerV1(courseRequest: CourseRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseResponse>>;
    /**
     * Create a new evaluator
     * @summary Create Evaluator
     * @param {EvaluatorCore} evaluatorCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEvaluatorResellerV1(evaluatorCore: EvaluatorCore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Evaluator>>;
    /**
     * Create a new goals collection
     * @summary Create Goals
     * @param {GoalCore} goalCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGoalsResellerV1(goalCore: GoalCore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SparrDbModelsGoal>>;
    /**
     * Create a new persona
     * @summary Create Persona
     * @param {PersonaCore} personaCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPersonaResellerV1(personaCore: PersonaCore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Persona>>;
    /**
     * Create a new scenario
     * @summary Create Scenario
     * @param {ScenarioCore} scenarioCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createScenarioResellerV1(scenarioCore: ScenarioCore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Scenario>>;
    /**
     * Create a new tracker
     * @summary Create Tracker
     * @param {TrackerCore} trackerCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTrackerResellerV1(trackerCore: TrackerCore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tracker>>;
    /**
     * Delete a course
     * @summary Delete Course
     * @param {string} courseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCourseResellerV1(courseId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SparrModelsBaseBaseResponse>>;
    /**
     * Delete evaluator
     * @summary Delete Evaluator
     * @param {string} paramsId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEvaluatorResellerV1(paramsId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SparrModelsBaseBaseResponse>>;
    /**
     * Delete a goals collection
     * @summary Delete Goals
     * @param {string} goalsId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGoalsResellerV1(goalsId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SparrModelsBaseBaseResponse>>;
    /**
     * Delete a persona
     * @summary Delete Persona
     * @param {string} personaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePersonaResellerV1(personaId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SparrModelsBaseBaseResponse>>;
    /**
     * Delete a scenario
     * @summary Delete Scenario
     * @param {string} scenarioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteScenarioResellerV1(scenarioId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SparrModelsBaseBaseResponse>>;
    /**
     * Delete a tracker
     * @summary Delete Tracker
     * @param {string} trackerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTrackerResellerV1(trackerId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SparrModelsBaseBaseResponse>>;
    /**
     * Generate evaluator data from files and/or existing core components
     * @summary Generate Evaluator
     * @param {FlexibleGenerationRequest} flexibleGenerationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateEvaluatorResellerV1(flexibleGenerationRequest: FlexibleGenerationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CombinedEvaluatorResponse>>;
    /**
     * Get a specific course by ID
     * @summary Get Course
     * @param {string} courseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCourseResellerV1(courseId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseResponse>>;
    /**
     * Get a specific evaluator by ID that is either directly owned or available through reseller course assignments
     * @summary Get Evaluator By Id
     * @param {string} paramsId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvaluatorResellerV1(paramsId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Evaluator>>;
    /**
     * Get a specific goals collection by ID that is either directly owned or available through reseller course assignments
     * @summary Get Goals By Id
     * @param {string} goalsId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGoalsResellerV1(goalsId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SparrDbModelsGoal>>;
    /**
     * Get a specific persona by ID that is either directly owned or available through reseller course assignments
     * @summary Get Persona
     * @param {string} personaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPersonaResellerV1(personaId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Persona>>;
    /**
     * Get a specific scenario by ID that is either directly owned or available through reseller course assignments
     * @summary Get Scenario
     * @param {string} scenarioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScenarioResellerV1(scenarioId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Scenario>>;
    /**
     * Get a specific tracker by ID that is either directly owned or available through reseller course assignments
     * @summary Get Tracker By Id
     * @param {string} trackerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTrackerResellerV1(trackerId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tracker>>;
    /**
     * Import a persona from LinkedIn URL
     * @summary Import Linkedin Persona
     * @param {string} linkedinUrl
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    importLinkedinPersonaResellerV1(linkedinUrl: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Persona>>;
    /**
     * Get all courses including reseller assignments
     * @summary Get Courses
     * @param {number} [skip] Skip for pagination
     * @param {number} [limit] Limit for pagination
     * @param {string} [status] Filter by status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCoursesResellerV1(skip?: number, limit?: number, status?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CourseResponse>>>;
    /**
     * Get all evaluator that are either directly owned or available through reseller course assignments
     * @summary Get Evaluator
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEvaluatorResellerV1(skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Evaluator>>>;
    /**
     * Get all goals that are either directly owned or available through reseller course assignments
     * @summary Get Goals
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listGoalsResellerV1(skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SparrDbModelsGoal>>>;
    /**
     * Get all personas that are either directly owned or available through reseller course assignments
     * @summary Get Personas
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [tags] Filter personas by tag, comma separated names
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPersonasResellerV1(skip?: number, limit?: number, tags?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Persona>>>;
    /**
     * Get all scenarios that are either directly owned or available through reseller course assignments
     * @summary Get Scenarios
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [tags] Filter scenarios by tag, comma separated names
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listScenariosResellerV1(skip?: number, limit?: number, tags?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Scenario>>>;
    /**
     * Get all trackers that are either directly owned or available through reseller course assignments
     * @summary Get Trackers
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTrackerResellerV1(skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tracker>>>;
    /**
     * Search goals by name and description
     * @summary Search Goals
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchGoalsResellerV1(query: string, page?: number, size?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalsSearchResponse>>;
    /**
     * Search personas by name, title and company
     * @summary Search Personas
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchPersonasResellerV1(query: string, page?: number, size?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonaSearchResponse>>;
    /**
     * Search scenarios by name and description
     * @summary Search Scenarios
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchScenariosResellerV1(query: string, page?: number, size?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScenarioSearchResponse>>;
    /**
     * Search trackers by name and description
     * @summary Search Tracker
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTrackerResellerV1(query: string, page?: number, size?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrackerSearchResponse>>;
    /**
     * Update a course
     * @summary Update Course
     * @param {string} courseId
     * @param {CourseUpdateRequest} courseUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCourseResellerV1(courseId: string, courseUpdateRequest: CourseUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseResponse>>;
    /**
     * Update evaluator
     * @summary Update Evaluator
     * @param {string} paramsId
     * @param {EvaluatorCore} evaluatorCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEvaluatorResellerV1(paramsId: string, evaluatorCore: EvaluatorCore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Evaluator>>;
    /**
     * Update a goals collection
     * @summary Update Goals
     * @param {string} goalsId
     * @param {GoalCore} goalCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGoalsResellerV1(goalsId: string, goalCore: GoalCore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SparrDbModelsGoal>>;
    /**
     * Update a persona
     * @summary Update Persona
     * @param {string} personaId
     * @param {PersonaCore} personaCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePersonaResellerV1(personaId: string, personaCore: PersonaCore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Persona>>;
    /**
     * Update a scenario
     * @summary Update Scenario
     * @param {string} scenarioId
     * @param {ScenarioCore} scenarioCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateScenarioResellerV1(scenarioId: string, scenarioCore: ScenarioCore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Scenario>>;
    /**
     * Update a tracker
     * @summary Update Tracker
     * @param {string} trackerId
     * @param {TrackerCore} trackerCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTrackerResellerV1(trackerId: string, trackerCore: TrackerCore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tracker>>;
};
/**
 * SparrResellerApi - factory interface
 * @export
 */
export declare const SparrResellerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a new course
     * @summary Create Course
     * @param {CourseRequest} courseRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCourseResellerV1(courseRequest: CourseRequest, options?: any): AxiosPromise<CourseResponse>;
    /**
     * Create a new evaluator
     * @summary Create Evaluator
     * @param {EvaluatorCore} evaluatorCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEvaluatorResellerV1(evaluatorCore: EvaluatorCore, options?: any): AxiosPromise<Evaluator>;
    /**
     * Create a new goals collection
     * @summary Create Goals
     * @param {GoalCore} goalCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGoalsResellerV1(goalCore: GoalCore, options?: any): AxiosPromise<SparrDbModelsGoal>;
    /**
     * Create a new persona
     * @summary Create Persona
     * @param {PersonaCore} personaCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPersonaResellerV1(personaCore: PersonaCore, options?: any): AxiosPromise<Persona>;
    /**
     * Create a new scenario
     * @summary Create Scenario
     * @param {ScenarioCore} scenarioCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createScenarioResellerV1(scenarioCore: ScenarioCore, options?: any): AxiosPromise<Scenario>;
    /**
     * Create a new tracker
     * @summary Create Tracker
     * @param {TrackerCore} trackerCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTrackerResellerV1(trackerCore: TrackerCore, options?: any): AxiosPromise<Tracker>;
    /**
     * Delete a course
     * @summary Delete Course
     * @param {string} courseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCourseResellerV1(courseId: string, options?: any): AxiosPromise<SparrModelsBaseBaseResponse>;
    /**
     * Delete evaluator
     * @summary Delete Evaluator
     * @param {string} paramsId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEvaluatorResellerV1(paramsId: string, options?: any): AxiosPromise<SparrModelsBaseBaseResponse>;
    /**
     * Delete a goals collection
     * @summary Delete Goals
     * @param {string} goalsId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGoalsResellerV1(goalsId: string, options?: any): AxiosPromise<SparrModelsBaseBaseResponse>;
    /**
     * Delete a persona
     * @summary Delete Persona
     * @param {string} personaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePersonaResellerV1(personaId: string, options?: any): AxiosPromise<SparrModelsBaseBaseResponse>;
    /**
     * Delete a scenario
     * @summary Delete Scenario
     * @param {string} scenarioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteScenarioResellerV1(scenarioId: string, options?: any): AxiosPromise<SparrModelsBaseBaseResponse>;
    /**
     * Delete a tracker
     * @summary Delete Tracker
     * @param {string} trackerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTrackerResellerV1(trackerId: string, options?: any): AxiosPromise<SparrModelsBaseBaseResponse>;
    /**
     * Generate evaluator data from files and/or existing core components
     * @summary Generate Evaluator
     * @param {FlexibleGenerationRequest} flexibleGenerationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateEvaluatorResellerV1(flexibleGenerationRequest: FlexibleGenerationRequest, options?: any): AxiosPromise<CombinedEvaluatorResponse>;
    /**
     * Get a specific course by ID
     * @summary Get Course
     * @param {string} courseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCourseResellerV1(courseId: string, options?: any): AxiosPromise<CourseResponse>;
    /**
     * Get a specific evaluator by ID that is either directly owned or available through reseller course assignments
     * @summary Get Evaluator By Id
     * @param {string} paramsId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEvaluatorResellerV1(paramsId: string, options?: any): AxiosPromise<Evaluator>;
    /**
     * Get a specific goals collection by ID that is either directly owned or available through reseller course assignments
     * @summary Get Goals By Id
     * @param {string} goalsId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGoalsResellerV1(goalsId: string, options?: any): AxiosPromise<SparrDbModelsGoal>;
    /**
     * Get a specific persona by ID that is either directly owned or available through reseller course assignments
     * @summary Get Persona
     * @param {string} personaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPersonaResellerV1(personaId: string, options?: any): AxiosPromise<Persona>;
    /**
     * Get a specific scenario by ID that is either directly owned or available through reseller course assignments
     * @summary Get Scenario
     * @param {string} scenarioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getScenarioResellerV1(scenarioId: string, options?: any): AxiosPromise<Scenario>;
    /**
     * Get a specific tracker by ID that is either directly owned or available through reseller course assignments
     * @summary Get Tracker By Id
     * @param {string} trackerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTrackerResellerV1(trackerId: string, options?: any): AxiosPromise<Tracker>;
    /**
     * Import a persona from LinkedIn URL
     * @summary Import Linkedin Persona
     * @param {string} linkedinUrl
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    importLinkedinPersonaResellerV1(linkedinUrl: string, options?: any): AxiosPromise<Persona>;
    /**
     * Get all courses including reseller assignments
     * @summary Get Courses
     * @param {number} [skip] Skip for pagination
     * @param {number} [limit] Limit for pagination
     * @param {string} [status] Filter by status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listCoursesResellerV1(skip?: number, limit?: number, status?: string, options?: any): AxiosPromise<Array<CourseResponse>>;
    /**
     * Get all evaluator that are either directly owned or available through reseller course assignments
     * @summary Get Evaluator
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEvaluatorResellerV1(skip?: number, limit?: number, options?: any): AxiosPromise<Array<Evaluator>>;
    /**
     * Get all goals that are either directly owned or available through reseller course assignments
     * @summary Get Goals
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listGoalsResellerV1(skip?: number, limit?: number, options?: any): AxiosPromise<Array<SparrDbModelsGoal>>;
    /**
     * Get all personas that are either directly owned or available through reseller course assignments
     * @summary Get Personas
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [tags] Filter personas by tag, comma separated names
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPersonasResellerV1(skip?: number, limit?: number, tags?: string, options?: any): AxiosPromise<Array<Persona>>;
    /**
     * Get all scenarios that are either directly owned or available through reseller course assignments
     * @summary Get Scenarios
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [tags] Filter scenarios by tag, comma separated names
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listScenariosResellerV1(skip?: number, limit?: number, tags?: string, options?: any): AxiosPromise<Array<Scenario>>;
    /**
     * Get all trackers that are either directly owned or available through reseller course assignments
     * @summary Get Trackers
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTrackerResellerV1(skip?: number, limit?: number, options?: any): AxiosPromise<Array<Tracker>>;
    /**
     * Search goals by name and description
     * @summary Search Goals
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchGoalsResellerV1(query: string, page?: number, size?: number, options?: any): AxiosPromise<GoalsSearchResponse>;
    /**
     * Search personas by name, title and company
     * @summary Search Personas
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchPersonasResellerV1(query: string, page?: number, size?: number, options?: any): AxiosPromise<PersonaSearchResponse>;
    /**
     * Search scenarios by name and description
     * @summary Search Scenarios
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchScenariosResellerV1(query: string, page?: number, size?: number, options?: any): AxiosPromise<ScenarioSearchResponse>;
    /**
     * Search trackers by name and description
     * @summary Search Tracker
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTrackerResellerV1(query: string, page?: number, size?: number, options?: any): AxiosPromise<TrackerSearchResponse>;
    /**
     * Update a course
     * @summary Update Course
     * @param {string} courseId
     * @param {CourseUpdateRequest} courseUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCourseResellerV1(courseId: string, courseUpdateRequest: CourseUpdateRequest, options?: any): AxiosPromise<CourseResponse>;
    /**
     * Update evaluator
     * @summary Update Evaluator
     * @param {string} paramsId
     * @param {EvaluatorCore} evaluatorCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateEvaluatorResellerV1(paramsId: string, evaluatorCore: EvaluatorCore, options?: any): AxiosPromise<Evaluator>;
    /**
     * Update a goals collection
     * @summary Update Goals
     * @param {string} goalsId
     * @param {GoalCore} goalCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGoalsResellerV1(goalsId: string, goalCore: GoalCore, options?: any): AxiosPromise<SparrDbModelsGoal>;
    /**
     * Update a persona
     * @summary Update Persona
     * @param {string} personaId
     * @param {PersonaCore} personaCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePersonaResellerV1(personaId: string, personaCore: PersonaCore, options?: any): AxiosPromise<Persona>;
    /**
     * Update a scenario
     * @summary Update Scenario
     * @param {string} scenarioId
     * @param {ScenarioCore} scenarioCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateScenarioResellerV1(scenarioId: string, scenarioCore: ScenarioCore, options?: any): AxiosPromise<Scenario>;
    /**
     * Update a tracker
     * @summary Update Tracker
     * @param {string} trackerId
     * @param {TrackerCore} trackerCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateTrackerResellerV1(trackerId: string, trackerCore: TrackerCore, options?: any): AxiosPromise<Tracker>;
};
/**
 * SparrResellerApi - object-oriented interface
 * @export
 * @class SparrResellerApi
 * @extends {BaseAPI}
 */
export declare class SparrResellerApi extends BaseAPI {
    /**
     * Create a new course
     * @summary Create Course
     * @param {CourseRequest} courseRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrResellerApi
     */
    createCourseResellerV1(courseRequest: CourseRequest, options?: any): Promise<import("axios").AxiosResponse<CourseResponse>>;
    /**
     * Create a new evaluator
     * @summary Create Evaluator
     * @param {EvaluatorCore} evaluatorCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrResellerApi
     */
    createEvaluatorResellerV1(evaluatorCore: EvaluatorCore, options?: any): Promise<import("axios").AxiosResponse<Evaluator>>;
    /**
     * Create a new goals collection
     * @summary Create Goals
     * @param {GoalCore} goalCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrResellerApi
     */
    createGoalsResellerV1(goalCore: GoalCore, options?: any): Promise<import("axios").AxiosResponse<SparrDbModelsGoal>>;
    /**
     * Create a new persona
     * @summary Create Persona
     * @param {PersonaCore} personaCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrResellerApi
     */
    createPersonaResellerV1(personaCore: PersonaCore, options?: any): Promise<import("axios").AxiosResponse<Persona>>;
    /**
     * Create a new scenario
     * @summary Create Scenario
     * @param {ScenarioCore} scenarioCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrResellerApi
     */
    createScenarioResellerV1(scenarioCore: ScenarioCore, options?: any): Promise<import("axios").AxiosResponse<Scenario>>;
    /**
     * Create a new tracker
     * @summary Create Tracker
     * @param {TrackerCore} trackerCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrResellerApi
     */
    createTrackerResellerV1(trackerCore: TrackerCore, options?: any): Promise<import("axios").AxiosResponse<Tracker>>;
    /**
     * Delete a course
     * @summary Delete Course
     * @param {string} courseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrResellerApi
     */
    deleteCourseResellerV1(courseId: string, options?: any): Promise<import("axios").AxiosResponse<SparrModelsBaseBaseResponse>>;
    /**
     * Delete evaluator
     * @summary Delete Evaluator
     * @param {string} paramsId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrResellerApi
     */
    deleteEvaluatorResellerV1(paramsId: string, options?: any): Promise<import("axios").AxiosResponse<SparrModelsBaseBaseResponse>>;
    /**
     * Delete a goals collection
     * @summary Delete Goals
     * @param {string} goalsId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrResellerApi
     */
    deleteGoalsResellerV1(goalsId: string, options?: any): Promise<import("axios").AxiosResponse<SparrModelsBaseBaseResponse>>;
    /**
     * Delete a persona
     * @summary Delete Persona
     * @param {string} personaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrResellerApi
     */
    deletePersonaResellerV1(personaId: string, options?: any): Promise<import("axios").AxiosResponse<SparrModelsBaseBaseResponse>>;
    /**
     * Delete a scenario
     * @summary Delete Scenario
     * @param {string} scenarioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrResellerApi
     */
    deleteScenarioResellerV1(scenarioId: string, options?: any): Promise<import("axios").AxiosResponse<SparrModelsBaseBaseResponse>>;
    /**
     * Delete a tracker
     * @summary Delete Tracker
     * @param {string} trackerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrResellerApi
     */
    deleteTrackerResellerV1(trackerId: string, options?: any): Promise<import("axios").AxiosResponse<SparrModelsBaseBaseResponse>>;
    /**
     * Generate evaluator data from files and/or existing core components
     * @summary Generate Evaluator
     * @param {FlexibleGenerationRequest} flexibleGenerationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrResellerApi
     */
    generateEvaluatorResellerV1(flexibleGenerationRequest: FlexibleGenerationRequest, options?: any): Promise<import("axios").AxiosResponse<CombinedEvaluatorResponse>>;
    /**
     * Get a specific course by ID
     * @summary Get Course
     * @param {string} courseId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrResellerApi
     */
    getCourseResellerV1(courseId: string, options?: any): Promise<import("axios").AxiosResponse<CourseResponse>>;
    /**
     * Get a specific evaluator by ID that is either directly owned or available through reseller course assignments
     * @summary Get Evaluator By Id
     * @param {string} paramsId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrResellerApi
     */
    getEvaluatorResellerV1(paramsId: string, options?: any): Promise<import("axios").AxiosResponse<Evaluator>>;
    /**
     * Get a specific goals collection by ID that is either directly owned or available through reseller course assignments
     * @summary Get Goals By Id
     * @param {string} goalsId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrResellerApi
     */
    getGoalsResellerV1(goalsId: string, options?: any): Promise<import("axios").AxiosResponse<SparrDbModelsGoal>>;
    /**
     * Get a specific persona by ID that is either directly owned or available through reseller course assignments
     * @summary Get Persona
     * @param {string} personaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrResellerApi
     */
    getPersonaResellerV1(personaId: string, options?: any): Promise<import("axios").AxiosResponse<Persona>>;
    /**
     * Get a specific scenario by ID that is either directly owned or available through reseller course assignments
     * @summary Get Scenario
     * @param {string} scenarioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrResellerApi
     */
    getScenarioResellerV1(scenarioId: string, options?: any): Promise<import("axios").AxiosResponse<Scenario>>;
    /**
     * Get a specific tracker by ID that is either directly owned or available through reseller course assignments
     * @summary Get Tracker By Id
     * @param {string} trackerId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrResellerApi
     */
    getTrackerResellerV1(trackerId: string, options?: any): Promise<import("axios").AxiosResponse<Tracker>>;
    /**
     * Import a persona from LinkedIn URL
     * @summary Import Linkedin Persona
     * @param {string} linkedinUrl
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrResellerApi
     */
    importLinkedinPersonaResellerV1(linkedinUrl: string, options?: any): Promise<import("axios").AxiosResponse<Persona>>;
    /**
     * Get all courses including reseller assignments
     * @summary Get Courses
     * @param {number} [skip] Skip for pagination
     * @param {number} [limit] Limit for pagination
     * @param {string} [status] Filter by status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrResellerApi
     */
    listCoursesResellerV1(skip?: number, limit?: number, status?: string, options?: any): Promise<import("axios").AxiosResponse<CourseResponse[]>>;
    /**
     * Get all evaluator that are either directly owned or available through reseller course assignments
     * @summary Get Evaluator
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrResellerApi
     */
    listEvaluatorResellerV1(skip?: number, limit?: number, options?: any): Promise<import("axios").AxiosResponse<Evaluator[]>>;
    /**
     * Get all goals that are either directly owned or available through reseller course assignments
     * @summary Get Goals
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrResellerApi
     */
    listGoalsResellerV1(skip?: number, limit?: number, options?: any): Promise<import("axios").AxiosResponse<SparrDbModelsGoal[]>>;
    /**
     * Get all personas that are either directly owned or available through reseller course assignments
     * @summary Get Personas
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [tags] Filter personas by tag, comma separated names
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrResellerApi
     */
    listPersonasResellerV1(skip?: number, limit?: number, tags?: string, options?: any): Promise<import("axios").AxiosResponse<Persona[]>>;
    /**
     * Get all scenarios that are either directly owned or available through reseller course assignments
     * @summary Get Scenarios
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [tags] Filter scenarios by tag, comma separated names
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrResellerApi
     */
    listScenariosResellerV1(skip?: number, limit?: number, tags?: string, options?: any): Promise<import("axios").AxiosResponse<Scenario[]>>;
    /**
     * Get all trackers that are either directly owned or available through reseller course assignments
     * @summary Get Trackers
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrResellerApi
     */
    listTrackerResellerV1(skip?: number, limit?: number, options?: any): Promise<import("axios").AxiosResponse<Tracker[]>>;
    /**
     * Search goals by name and description
     * @summary Search Goals
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrResellerApi
     */
    searchGoalsResellerV1(query: string, page?: number, size?: number, options?: any): Promise<import("axios").AxiosResponse<GoalsSearchResponse>>;
    /**
     * Search personas by name, title and company
     * @summary Search Personas
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrResellerApi
     */
    searchPersonasResellerV1(query: string, page?: number, size?: number, options?: any): Promise<import("axios").AxiosResponse<PersonaSearchResponse>>;
    /**
     * Search scenarios by name and description
     * @summary Search Scenarios
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrResellerApi
     */
    searchScenariosResellerV1(query: string, page?: number, size?: number, options?: any): Promise<import("axios").AxiosResponse<ScenarioSearchResponse>>;
    /**
     * Search trackers by name and description
     * @summary Search Tracker
     * @param {string} query Search query string
     * @param {number} [page] Page number
     * @param {number} [size] Items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrResellerApi
     */
    searchTrackerResellerV1(query: string, page?: number, size?: number, options?: any): Promise<import("axios").AxiosResponse<TrackerSearchResponse>>;
    /**
     * Update a course
     * @summary Update Course
     * @param {string} courseId
     * @param {CourseUpdateRequest} courseUpdateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrResellerApi
     */
    updateCourseResellerV1(courseId: string, courseUpdateRequest: CourseUpdateRequest, options?: any): Promise<import("axios").AxiosResponse<CourseResponse>>;
    /**
     * Update evaluator
     * @summary Update Evaluator
     * @param {string} paramsId
     * @param {EvaluatorCore} evaluatorCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrResellerApi
     */
    updateEvaluatorResellerV1(paramsId: string, evaluatorCore: EvaluatorCore, options?: any): Promise<import("axios").AxiosResponse<Evaluator>>;
    /**
     * Update a goals collection
     * @summary Update Goals
     * @param {string} goalsId
     * @param {GoalCore} goalCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrResellerApi
     */
    updateGoalsResellerV1(goalsId: string, goalCore: GoalCore, options?: any): Promise<import("axios").AxiosResponse<SparrDbModelsGoal>>;
    /**
     * Update a persona
     * @summary Update Persona
     * @param {string} personaId
     * @param {PersonaCore} personaCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrResellerApi
     */
    updatePersonaResellerV1(personaId: string, personaCore: PersonaCore, options?: any): Promise<import("axios").AxiosResponse<Persona>>;
    /**
     * Update a scenario
     * @summary Update Scenario
     * @param {string} scenarioId
     * @param {ScenarioCore} scenarioCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrResellerApi
     */
    updateScenarioResellerV1(scenarioId: string, scenarioCore: ScenarioCore, options?: any): Promise<import("axios").AxiosResponse<Scenario>>;
    /**
     * Update a tracker
     * @summary Update Tracker
     * @param {string} trackerId
     * @param {TrackerCore} trackerCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparrResellerApi
     */
    updateTrackerResellerV1(trackerId: string, trackerCore: TrackerCore, options?: any): Promise<import("axios").AxiosResponse<Tracker>>;
}
/**
 * SparringApi - axios parameter creator
 * @export
 */
export declare const SparringApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a virtual prospect
     * @summary Create Virtual Prospect
     * @param {VirtualProspectInput} virtualProspectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createVirtualProspectV1SparrVirtualProspectsPost: (virtualProspectInput: VirtualProspectInput, options?: any) => Promise<RequestArgs>;
    /**
     * Delete a virtual prospect
     * @summary Delete Virtual Prospect
     * @param {string} prospectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVirtualProspectV1SparrVirtualProspectsProspectIdDelete: (prospectId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get sparring stats from Trata AI like call count, prospect count, etc.
     * @summary Get Sparring Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSparringStatsV1SparrSparringStatsGet: (options?: any) => Promise<RequestArgs>;
    /**
     * Get virtual prospect associated with an agent
     * @summary Get Virtual Prospect by Agent ID
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVirtualProspectByAgentIdV1SparrAgentAgentIdVirtualProspectGet: (agentId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Get a virtual prospect
     * @summary Get Virtual Prospect
     * @param {string} prospectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVirtualProspectV1SparrVirtualProspectsProspectIdGet: (prospectId: string, options?: any) => Promise<RequestArgs>;
    /**
     * Link a virtual prospect to an agent
     * @summary Link Virtual Prospect to Agent
     * @param {string} prospectId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkVirtualProspectToAgentV1SparrVirtualProspectsProspectIdAgentAgentIdLinkPost: (prospectId: string, agentId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List all virtual prospects
     * @summary List Virtual Prospects
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVirtualProspectsV1SparrVirtualProspectsGet: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any) => Promise<RequestArgs>;
    /**
     * Update a virtual prospect
     * @summary Update Virtual Prospect
     * @param {string} prospectId
     * @param {VirtualProspectInput} virtualProspectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVirtualProspectV1SparrVirtualProspectsProspectIdPut: (prospectId: string, virtualProspectInput: VirtualProspectInput, options?: any) => Promise<RequestArgs>;
};
/**
 * SparringApi - functional programming interface
 * @export
 */
export declare const SparringApiFp: (configuration?: Configuration) => {
    /**
     * Create a virtual prospect
     * @summary Create Virtual Prospect
     * @param {VirtualProspectInput} virtualProspectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createVirtualProspectV1SparrVirtualProspectsPost(virtualProspectInput: VirtualProspectInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VirtualProspectOutput>>;
    /**
     * Delete a virtual prospect
     * @summary Delete Virtual Prospect
     * @param {string} prospectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVirtualProspectV1SparrVirtualProspectsProspectIdDelete(prospectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     * Get sparring stats from Trata AI like call count, prospect count, etc.
     * @summary Get Sparring Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSparringStatsV1SparrSparringStatsGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SparrStatsResponse>>;
    /**
     * Get virtual prospect associated with an agent
     * @summary Get Virtual Prospect by Agent ID
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVirtualProspectByAgentIdV1SparrAgentAgentIdVirtualProspectGet(agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VirtualProspectOutput>>>;
    /**
     * Get a virtual prospect
     * @summary Get Virtual Prospect
     * @param {string} prospectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVirtualProspectV1SparrVirtualProspectsProspectIdGet(prospectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VirtualProspectOutput>>;
    /**
     * Link a virtual prospect to an agent
     * @summary Link Virtual Prospect to Agent
     * @param {string} prospectId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkVirtualProspectToAgentV1SparrVirtualProspectsProspectIdAgentAgentIdLinkPost(prospectId: string, agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VirtualProspectAIAgentLink>>;
    /**
     * List all virtual prospects
     * @summary List Virtual Prospects
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVirtualProspectsV1SparrVirtualProspectsGet(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VirtualProspectOutput>>>;
    /**
     * Update a virtual prospect
     * @summary Update Virtual Prospect
     * @param {string} prospectId
     * @param {VirtualProspectInput} virtualProspectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVirtualProspectV1SparrVirtualProspectsProspectIdPut(prospectId: string, virtualProspectInput: VirtualProspectInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VirtualProspectOutput>>;
};
/**
 * SparringApi - factory interface
 * @export
 */
export declare const SparringApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a virtual prospect
     * @summary Create Virtual Prospect
     * @param {VirtualProspectInput} virtualProspectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createVirtualProspectV1SparrVirtualProspectsPost(virtualProspectInput: VirtualProspectInput, options?: any): AxiosPromise<VirtualProspectOutput>;
    /**
     * Delete a virtual prospect
     * @summary Delete Virtual Prospect
     * @param {string} prospectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVirtualProspectV1SparrVirtualProspectsProspectIdDelete(prospectId: string, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     * Get sparring stats from Trata AI like call count, prospect count, etc.
     * @summary Get Sparring Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSparringStatsV1SparrSparringStatsGet(options?: any): AxiosPromise<SparrStatsResponse>;
    /**
     * Get virtual prospect associated with an agent
     * @summary Get Virtual Prospect by Agent ID
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVirtualProspectByAgentIdV1SparrAgentAgentIdVirtualProspectGet(agentId: string, options?: any): AxiosPromise<Array<VirtualProspectOutput>>;
    /**
     * Get a virtual prospect
     * @summary Get Virtual Prospect
     * @param {string} prospectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVirtualProspectV1SparrVirtualProspectsProspectIdGet(prospectId: string, options?: any): AxiosPromise<VirtualProspectOutput>;
    /**
     * Link a virtual prospect to an agent
     * @summary Link Virtual Prospect to Agent
     * @param {string} prospectId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkVirtualProspectToAgentV1SparrVirtualProspectsProspectIdAgentAgentIdLinkPost(prospectId: string, agentId: string, options?: any): AxiosPromise<VirtualProspectAIAgentLink>;
    /**
     * List all virtual prospects
     * @summary List Virtual Prospects
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVirtualProspectsV1SparrVirtualProspectsGet(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): AxiosPromise<Array<VirtualProspectOutput>>;
    /**
     * Update a virtual prospect
     * @summary Update Virtual Prospect
     * @param {string} prospectId
     * @param {VirtualProspectInput} virtualProspectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateVirtualProspectV1SparrVirtualProspectsProspectIdPut(prospectId: string, virtualProspectInput: VirtualProspectInput, options?: any): AxiosPromise<VirtualProspectOutput>;
};
/**
 * SparringApi - object-oriented interface
 * @export
 * @class SparringApi
 * @extends {BaseAPI}
 */
export declare class SparringApi extends BaseAPI {
    /**
     * Create a virtual prospect
     * @summary Create Virtual Prospect
     * @param {VirtualProspectInput} virtualProspectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparringApi
     */
    createVirtualProspectV1SparrVirtualProspectsPost(virtualProspectInput: VirtualProspectInput, options?: any): Promise<import("axios").AxiosResponse<VirtualProspectOutput>>;
    /**
     * Delete a virtual prospect
     * @summary Delete Virtual Prospect
     * @param {string} prospectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparringApi
     */
    deleteVirtualProspectV1SparrVirtualProspectsProspectIdDelete(prospectId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     * Get sparring stats from Trata AI like call count, prospect count, etc.
     * @summary Get Sparring Stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparringApi
     */
    getSparringStatsV1SparrSparringStatsGet(options?: any): Promise<import("axios").AxiosResponse<SparrStatsResponse>>;
    /**
     * Get virtual prospect associated with an agent
     * @summary Get Virtual Prospect by Agent ID
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparringApi
     */
    getVirtualProspectByAgentIdV1SparrAgentAgentIdVirtualProspectGet(agentId: string, options?: any): Promise<import("axios").AxiosResponse<VirtualProspectOutput[]>>;
    /**
     * Get a virtual prospect
     * @summary Get Virtual Prospect
     * @param {string} prospectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparringApi
     */
    getVirtualProspectV1SparrVirtualProspectsProspectIdGet(prospectId: string, options?: any): Promise<import("axios").AxiosResponse<VirtualProspectOutput>>;
    /**
     * Link a virtual prospect to an agent
     * @summary Link Virtual Prospect to Agent
     * @param {string} prospectId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparringApi
     */
    linkVirtualProspectToAgentV1SparrVirtualProspectsProspectIdAgentAgentIdLinkPost(prospectId: string, agentId: string, options?: any): Promise<import("axios").AxiosResponse<VirtualProspectAIAgentLink>>;
    /**
     * List all virtual prospects
     * @summary List Virtual Prospects
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparringApi
     */
    listVirtualProspectsV1SparrVirtualProspectsGet(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, options?: any): Promise<import("axios").AxiosResponse<VirtualProspectOutput[]>>;
    /**
     * Update a virtual prospect
     * @summary Update Virtual Prospect
     * @param {string} prospectId
     * @param {VirtualProspectInput} virtualProspectInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SparringApi
     */
    updateVirtualProspectV1SparrVirtualProspectsProspectIdPut(prospectId: string, virtualProspectInput: VirtualProspectInput, options?: any): Promise<import("axios").AxiosResponse<VirtualProspectOutput>>;
}
/**
 * TelephonyApi - axios parameter creator
 * @export
 */
export declare const TelephonyApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get Agent Phones
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAgentPhonesV1: (agentId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Link Phone To Agent
     * @param {string} phoneId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkPhoneToAgentV1: (phoneId: string, agentId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary List Available Phones
     * @param {string} countryCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAvailablePhonesV1: (countryCode: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary List Purchased Phones
     * @param {string} [countryCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPurchasedPhonesV1: (countryCode?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary List Supported Countries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSupportedCountriesV1: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Purchase Phone
     * @param {NumberPurchaseRequest} numberPurchaseRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purchasePhoneV1: (numberPurchaseRequest: NumberPurchaseRequest, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Release Phone
     * @param {string} phoneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    releasePhoneV1: (phoneId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Unlink Phone From Agent
     * @param {string} phoneId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlinkPhoneFromAgentV1: (phoneId: string, agentId: string, options?: any) => Promise<RequestArgs>;
};
/**
 * TelephonyApi - functional programming interface
 * @export
 */
export declare const TelephonyApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get Agent Phones
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAgentPhonesV1(agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TelephoneNumber>>>;
    /**
     *
     * @summary Link Phone To Agent
     * @param {string} phoneId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkPhoneToAgentV1(phoneId: string, agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     *
     * @summary List Available Phones
     * @param {string} countryCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAvailablePhonesV1(countryCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AvailablePhoneNumber>>>;
    /**
     *
     * @summary List Purchased Phones
     * @param {string} [countryCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPurchasedPhonesV1(countryCode?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TelephoneNumber>>>;
    /**
     *
     * @summary List Supported Countries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSupportedCountriesV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CountryInfo>>>;
    /**
     *
     * @summary Purchase Phone
     * @param {NumberPurchaseRequest} numberPurchaseRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purchasePhoneV1(numberPurchaseRequest: NumberPurchaseRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TelephoneNumber>>;
    /**
     *
     * @summary Release Phone
     * @param {string} phoneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    releasePhoneV1(phoneId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
    /**
     *
     * @summary Unlink Phone From Agent
     * @param {string} phoneId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlinkPhoneFromAgentV1(phoneId: string, agentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponseInput>>;
};
/**
 * TelephonyApi - factory interface
 * @export
 */
export declare const TelephonyApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get Agent Phones
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAgentPhonesV1(agentId: string, options?: any): AxiosPromise<Array<TelephoneNumber>>;
    /**
     *
     * @summary Link Phone To Agent
     * @param {string} phoneId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkPhoneToAgentV1(phoneId: string, agentId: string, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     *
     * @summary List Available Phones
     * @param {string} countryCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAvailablePhonesV1(countryCode: string, options?: any): AxiosPromise<Array<AvailablePhoneNumber>>;
    /**
     *
     * @summary List Purchased Phones
     * @param {string} [countryCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPurchasedPhonesV1(countryCode?: string, options?: any): AxiosPromise<Array<TelephoneNumber>>;
    /**
     *
     * @summary List Supported Countries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSupportedCountriesV1(options?: any): AxiosPromise<Array<CountryInfo>>;
    /**
     *
     * @summary Purchase Phone
     * @param {NumberPurchaseRequest} numberPurchaseRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purchasePhoneV1(numberPurchaseRequest: NumberPurchaseRequest, options?: any): AxiosPromise<TelephoneNumber>;
    /**
     *
     * @summary Release Phone
     * @param {string} phoneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    releasePhoneV1(phoneId: string, options?: any): AxiosPromise<BaseResponseInput>;
    /**
     *
     * @summary Unlink Phone From Agent
     * @param {string} phoneId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlinkPhoneFromAgentV1(phoneId: string, agentId: string, options?: any): AxiosPromise<BaseResponseInput>;
};
/**
 * TelephonyApi - object-oriented interface
 * @export
 * @class TelephonyApi
 * @extends {BaseAPI}
 */
export declare class TelephonyApi extends BaseAPI {
    /**
     *
     * @summary Get Agent Phones
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TelephonyApi
     */
    getAgentPhonesV1(agentId: string, options?: any): Promise<import("axios").AxiosResponse<TelephoneNumber[]>>;
    /**
     *
     * @summary Link Phone To Agent
     * @param {string} phoneId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TelephonyApi
     */
    linkPhoneToAgentV1(phoneId: string, agentId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     *
     * @summary List Available Phones
     * @param {string} countryCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TelephonyApi
     */
    listAvailablePhonesV1(countryCode: string, options?: any): Promise<import("axios").AxiosResponse<AvailablePhoneNumber[]>>;
    /**
     *
     * @summary List Purchased Phones
     * @param {string} [countryCode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TelephonyApi
     */
    listPurchasedPhonesV1(countryCode?: string, options?: any): Promise<import("axios").AxiosResponse<TelephoneNumber[]>>;
    /**
     *
     * @summary List Supported Countries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TelephonyApi
     */
    listSupportedCountriesV1(options?: any): Promise<import("axios").AxiosResponse<CountryInfo[]>>;
    /**
     *
     * @summary Purchase Phone
     * @param {NumberPurchaseRequest} numberPurchaseRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TelephonyApi
     */
    purchasePhoneV1(numberPurchaseRequest: NumberPurchaseRequest, options?: any): Promise<import("axios").AxiosResponse<TelephoneNumber>>;
    /**
     *
     * @summary Release Phone
     * @param {string} phoneId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TelephonyApi
     */
    releasePhoneV1(phoneId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
    /**
     *
     * @summary Unlink Phone From Agent
     * @param {string} phoneId
     * @param {string} agentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TelephonyApi
     */
    unlinkPhoneFromAgentV1(phoneId: string, agentId: string, options?: any): Promise<import("axios").AxiosResponse<BaseResponseInput>>;
}
/**
 * UIApi - axios parameter creator
 * @export
 */
export declare const UIApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary List Action Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActionTemplatesV1: (language?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary List Products
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {string} [tags]
     * @param {string} [productIds]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProductsDetailedV1: (searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, tags?: string, productIds?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary List Prompt Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPromptTemplatesV1: (language?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary List Role Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRoleTemplatesV1: (language?: string, options?: any) => Promise<RequestArgs>;
};
/**
 * UIApi - functional programming interface
 * @export
 */
export declare const UIApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary List Action Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActionTemplatesV1(language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ActionInput>>>;
    /**
     *
     * @summary List Products
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {string} [tags]
     * @param {string} [productIds]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProductsDetailedV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, tags?: string, productIds?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductWithAgents>>>;
    /**
     *
     * @summary List Prompt Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPromptTemplatesV1(language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{
        [key: string]: PromptTemplate;
    }>>;
    /**
     *
     * @summary List Role Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRoleTemplatesV1(language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RoleTemplate>>>;
};
/**
 * UIApi - factory interface
 * @export
 */
export declare const UIApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary List Action Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listActionTemplatesV1(language?: string, options?: any): AxiosPromise<Array<ActionInput>>;
    /**
     *
     * @summary List Products
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {string} [tags]
     * @param {string} [productIds]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProductsDetailedV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, tags?: string, productIds?: string, options?: any): AxiosPromise<Array<ProductWithAgents>>;
    /**
     *
     * @summary List Prompt Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listPromptTemplatesV1(language?: string, options?: any): AxiosPromise<{
        [key: string]: PromptTemplate;
    }>;
    /**
     *
     * @summary List Role Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRoleTemplatesV1(language?: string, options?: any): AxiosPromise<Array<RoleTemplate>>;
};
/**
 * UIApi - object-oriented interface
 * @export
 * @class UIApi
 * @extends {BaseAPI}
 */
export declare class UIApi extends BaseAPI {
    /**
     *
     * @summary List Action Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UIApi
     */
    listActionTemplatesV1(language?: string, options?: any): Promise<import("axios").AxiosResponse<ActionInput[]>>;
    /**
     *
     * @summary List Products
     * @param {string} [searchBy]
     * @param {string} [searchValue]
     * @param {string} [status]
     * @param {string} [sortBy]
     * @param {SortOrder} [sortOrder]
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {string} [updatedAfter]
     * @param {string} [updatedBefore]
     * @param {string} [tags]
     * @param {string} [productIds]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UIApi
     */
    listProductsDetailedV1(searchBy?: string, searchValue?: string, status?: string, sortBy?: string, sortOrder?: SortOrder, skip?: number, limit?: number, updatedAfter?: string, updatedBefore?: string, tags?: string, productIds?: string, options?: any): Promise<import("axios").AxiosResponse<ProductWithAgents[]>>;
    /**
     *
     * @summary List Prompt Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UIApi
     */
    listPromptTemplatesV1(language?: string, options?: any): Promise<import("axios").AxiosResponse<{
        [key: string]: PromptTemplate;
    }>>;
    /**
     *
     * @summary List Role Templates
     * @param {string} [language]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UIApi
     */
    listRoleTemplatesV1(language?: string, options?: any): Promise<import("axios").AxiosResponse<RoleTemplate[]>>;
}
/**
 * VoiceModelsApi - axios parameter creator
 * @export
 */
export declare const VoiceModelsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get List Of Voices Available For Sparr
     * @summary Get List Of Voices Available For Sparr
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSparrVoiceModelsV1: (options?: any) => Promise<RequestArgs>;
    /**
     * Get List Of Voices Available For Conversations
     * @summary Get List Of Voices Available For Conversations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVoiceModelsV1: (options?: any) => Promise<RequestArgs>;
};
/**
 * VoiceModelsApi - functional programming interface
 * @export
 */
export declare const VoiceModelsApiFp: (configuration?: Configuration) => {
    /**
     * Get List Of Voices Available For Sparr
     * @summary Get List Of Voices Available For Sparr
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSparrVoiceModelsV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VoiceModel>>>;
    /**
     * Get List Of Voices Available For Conversations
     * @summary Get List Of Voices Available For Conversations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVoiceModelsV1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VoiceModel>>>;
};
/**
 * VoiceModelsApi - factory interface
 * @export
 */
export declare const VoiceModelsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get List Of Voices Available For Sparr
     * @summary Get List Of Voices Available For Sparr
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSparrVoiceModelsV1(options?: any): AxiosPromise<Array<VoiceModel>>;
    /**
     * Get List Of Voices Available For Conversations
     * @summary Get List Of Voices Available For Conversations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVoiceModelsV1(options?: any): AxiosPromise<Array<VoiceModel>>;
};
/**
 * VoiceModelsApi - object-oriented interface
 * @export
 * @class VoiceModelsApi
 * @extends {BaseAPI}
 */
export declare class VoiceModelsApi extends BaseAPI {
    /**
     * Get List Of Voices Available For Sparr
     * @summary Get List Of Voices Available For Sparr
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoiceModelsApi
     */
    listSparrVoiceModelsV1(options?: any): Promise<import("axios").AxiosResponse<VoiceModel[]>>;
    /**
     * Get List Of Voices Available For Conversations
     * @summary Get List Of Voices Available For Conversations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VoiceModelsApi
     */
    listVoiceModelsV1(options?: any): Promise<import("axios").AxiosResponse<VoiceModel[]>>;
}
/**
 * WorkflowsApi - axios parameter creator
 * @export
 */
export declare const WorkflowsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create Workflow
     * @param {WorkflowCore} workflowCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkflowV1WorkflowsPost: (workflowCore: WorkflowCore, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete Workflow
     * @param {string} workflowId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkflowV1WorkflowsWorkflowIdDelete: (workflowId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Read Workflow
     * @param {string} workflowId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readWorkflowV1WorkflowsWorkflowIdGet: (workflowId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Read Workflows
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {AgenticWorkflowAdkModelsWorkflowAppEnum} [app]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readWorkflowsV1WorkflowsGet: (skip?: number, limit?: number, app?: AgenticWorkflowAdkModelsWorkflowAppEnum, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Trigger Workflow Step
     * @param {string} workflowId
     * @param {string} stepId
     * @param {WorkflowStepTriggerRequest} workflowStepTriggerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    triggerWorkflowStepV1WorkflowsWorkflowIdStepStepIdTriggerPost: (workflowId: string, stepId: string, workflowStepTriggerRequest: WorkflowStepTriggerRequest, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Update Workflow
     * @param {string} workflowId
     * @param {WorkflowCore} workflowCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkflowV1WorkflowsWorkflowIdPut: (workflowId: string, workflowCore: WorkflowCore, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Upload File
     * @param {string} workflowId
     * @param {any} file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFileV1WorkflowsWorkflowIdFilePost: (workflowId: string, file: any, options?: any) => Promise<RequestArgs>;
};
/**
 * WorkflowsApi - functional programming interface
 * @export
 */
export declare const WorkflowsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create Workflow
     * @param {WorkflowCore} workflowCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkflowV1WorkflowsPost(workflowCore: WorkflowCore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workflow>>;
    /**
     *
     * @summary Delete Workflow
     * @param {string} workflowId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkflowV1WorkflowsWorkflowIdDelete(workflowId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgenticWorkflowModelsBaseBaseResponse>>;
    /**
     *
     * @summary Read Workflow
     * @param {string} workflowId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readWorkflowV1WorkflowsWorkflowIdGet(workflowId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workflow>>;
    /**
     *
     * @summary Read Workflows
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {AgenticWorkflowAdkModelsWorkflowAppEnum} [app]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readWorkflowsV1WorkflowsGet(skip?: number, limit?: number, app?: AgenticWorkflowAdkModelsWorkflowAppEnum, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Workflow>>>;
    /**
     *
     * @summary Trigger Workflow Step
     * @param {string} workflowId
     * @param {string} stepId
     * @param {WorkflowStepTriggerRequest} workflowStepTriggerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    triggerWorkflowStepV1WorkflowsWorkflowIdStepStepIdTriggerPost(workflowId: string, stepId: string, workflowStepTriggerRequest: WorkflowStepTriggerRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowStepTriggerResponse>>;
    /**
     *
     * @summary Update Workflow
     * @param {string} workflowId
     * @param {WorkflowCore} workflowCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkflowV1WorkflowsWorkflowIdPut(workflowId: string, workflowCore: WorkflowCore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workflow>>;
    /**
     *
     * @summary Upload File
     * @param {string} workflowId
     * @param {any} file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFileV1WorkflowsWorkflowIdFilePost(workflowId: string, file: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadFileResponse>>;
};
/**
 * WorkflowsApi - factory interface
 * @export
 */
export declare const WorkflowsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create Workflow
     * @param {WorkflowCore} workflowCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWorkflowV1WorkflowsPost(workflowCore: WorkflowCore, options?: any): AxiosPromise<Workflow>;
    /**
     *
     * @summary Delete Workflow
     * @param {string} workflowId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWorkflowV1WorkflowsWorkflowIdDelete(workflowId: string, options?: any): AxiosPromise<AgenticWorkflowModelsBaseBaseResponse>;
    /**
     *
     * @summary Read Workflow
     * @param {string} workflowId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readWorkflowV1WorkflowsWorkflowIdGet(workflowId: string, options?: any): AxiosPromise<Workflow>;
    /**
     *
     * @summary Read Workflows
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {AgenticWorkflowAdkModelsWorkflowAppEnum} [app]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readWorkflowsV1WorkflowsGet(skip?: number, limit?: number, app?: AgenticWorkflowAdkModelsWorkflowAppEnum, options?: any): AxiosPromise<Array<Workflow>>;
    /**
     *
     * @summary Trigger Workflow Step
     * @param {string} workflowId
     * @param {string} stepId
     * @param {WorkflowStepTriggerRequest} workflowStepTriggerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    triggerWorkflowStepV1WorkflowsWorkflowIdStepStepIdTriggerPost(workflowId: string, stepId: string, workflowStepTriggerRequest: WorkflowStepTriggerRequest, options?: any): AxiosPromise<WorkflowStepTriggerResponse>;
    /**
     *
     * @summary Update Workflow
     * @param {string} workflowId
     * @param {WorkflowCore} workflowCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWorkflowV1WorkflowsWorkflowIdPut(workflowId: string, workflowCore: WorkflowCore, options?: any): AxiosPromise<Workflow>;
    /**
     *
     * @summary Upload File
     * @param {string} workflowId
     * @param {any} file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFileV1WorkflowsWorkflowIdFilePost(workflowId: string, file: any, options?: any): AxiosPromise<UploadFileResponse>;
};
/**
 * WorkflowsApi - object-oriented interface
 * @export
 * @class WorkflowsApi
 * @extends {BaseAPI}
 */
export declare class WorkflowsApi extends BaseAPI {
    /**
     *
     * @summary Create Workflow
     * @param {WorkflowCore} workflowCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    createWorkflowV1WorkflowsPost(workflowCore: WorkflowCore, options?: any): Promise<import("axios").AxiosResponse<Workflow>>;
    /**
     *
     * @summary Delete Workflow
     * @param {string} workflowId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    deleteWorkflowV1WorkflowsWorkflowIdDelete(workflowId: string, options?: any): Promise<import("axios").AxiosResponse<AgenticWorkflowModelsBaseBaseResponse>>;
    /**
     *
     * @summary Read Workflow
     * @param {string} workflowId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    readWorkflowV1WorkflowsWorkflowIdGet(workflowId: string, options?: any): Promise<import("axios").AxiosResponse<Workflow>>;
    /**
     *
     * @summary Read Workflows
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {AgenticWorkflowAdkModelsWorkflowAppEnum} [app]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    readWorkflowsV1WorkflowsGet(skip?: number, limit?: number, app?: AgenticWorkflowAdkModelsWorkflowAppEnum, options?: any): Promise<import("axios").AxiosResponse<Workflow[]>>;
    /**
     *
     * @summary Trigger Workflow Step
     * @param {string} workflowId
     * @param {string} stepId
     * @param {WorkflowStepTriggerRequest} workflowStepTriggerRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    triggerWorkflowStepV1WorkflowsWorkflowIdStepStepIdTriggerPost(workflowId: string, stepId: string, workflowStepTriggerRequest: WorkflowStepTriggerRequest, options?: any): Promise<import("axios").AxiosResponse<WorkflowStepTriggerResponse>>;
    /**
     *
     * @summary Update Workflow
     * @param {string} workflowId
     * @param {WorkflowCore} workflowCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    updateWorkflowV1WorkflowsWorkflowIdPut(workflowId: string, workflowCore: WorkflowCore, options?: any): Promise<import("axios").AxiosResponse<Workflow>>;
    /**
     *
     * @summary Upload File
     * @param {string} workflowId
     * @param {any} file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApi
     */
    uploadFileV1WorkflowsWorkflowIdFilePost(workflowId: string, file: any, options?: any): Promise<import("axios").AxiosResponse<UploadFileResponse>>;
}
/**
 * WorkflowsApiHubspotApi - axios parameter creator
 * @export
 */
export declare const WorkflowsApiHubspotApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Handle Hubspot Webhook
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    handleHubspotWebhookV1WorkflowsApiHubspotWebhookPost: (options?: any) => Promise<RequestArgs>;
};
/**
 * WorkflowsApiHubspotApi - functional programming interface
 * @export
 */
export declare const WorkflowsApiHubspotApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Handle Hubspot Webhook
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    handleHubspotWebhookV1WorkflowsApiHubspotWebhookPost(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgenticWorkflowModelsBaseBaseResponse>>;
};
/**
 * WorkflowsApiHubspotApi - factory interface
 * @export
 */
export declare const WorkflowsApiHubspotApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Handle Hubspot Webhook
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    handleHubspotWebhookV1WorkflowsApiHubspotWebhookPost(options?: any): AxiosPromise<AgenticWorkflowModelsBaseBaseResponse>;
};
/**
 * WorkflowsApiHubspotApi - object-oriented interface
 * @export
 * @class WorkflowsApiHubspotApi
 * @extends {BaseAPI}
 */
export declare class WorkflowsApiHubspotApi extends BaseAPI {
    /**
     *
     * @summary Handle Hubspot Webhook
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsApiHubspotApi
     */
    handleHubspotWebhookV1WorkflowsApiHubspotWebhookPost(options?: any): Promise<import("axios").AxiosResponse<AgenticWorkflowModelsBaseBaseResponse>>;
}
/**
 * WorkflowsAppsApi - axios parameter creator
 * @export
 */
export declare const WorkflowsAppsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create App
     * @param {AppEntity} appEntity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAppV1WorkflowsAppsPost: (appEntity: AppEntity, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete App
     * @param {string} appId
     * @param {string} [version]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAppV1WorkflowsAppsAppIdDelete: (appId: string, version?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Connections By App Id
     * @param {string} appId
     * @param {string} version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnectionsByAppIdV1WorkflowsAppsAppIdVersionsVersionConnectionsGet: (appId: string, version: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Read App
     * @param {string} appId
     * @param {string} [version]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAppV1WorkflowsAppsAppIdGet: (appId: string, version?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Read Apps
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAppsV1WorkflowsAppsGet: (skip?: number, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Update App
     * @param {string} appId
     * @param {AppEntity} appEntity
     * @param {string} [version]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAppV1WorkflowsAppsAppIdPut: (appId: string, appEntity: AppEntity, version?: string, options?: any) => Promise<RequestArgs>;
};
/**
 * WorkflowsAppsApi - functional programming interface
 * @export
 */
export declare const WorkflowsAppsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create App
     * @param {AppEntity} appEntity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAppV1WorkflowsAppsPost(appEntity: AppEntity, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponse>>;
    /**
     *
     * @summary Delete App
     * @param {string} appId
     * @param {string} [version]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAppV1WorkflowsAppsAppIdDelete(appId: string, version?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgenticWorkflowModelsBaseBaseResponse>>;
    /**
     *
     * @summary Get Connections By App Id
     * @param {string} appId
     * @param {string} version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnectionsByAppIdV1WorkflowsAppsAppIdVersionsVersionConnectionsGet(appId: string, version: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConnectionCore>>>;
    /**
     *
     * @summary Read App
     * @param {string} appId
     * @param {string} [version]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAppV1WorkflowsAppsAppIdGet(appId: string, version?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponse>>;
    /**
     *
     * @summary Read Apps
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAppsV1WorkflowsAppsGet(skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AppResponse>>>;
    /**
     *
     * @summary Update App
     * @param {string} appId
     * @param {AppEntity} appEntity
     * @param {string} [version]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAppV1WorkflowsAppsAppIdPut(appId: string, appEntity: AppEntity, version?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppResponse>>;
};
/**
 * WorkflowsAppsApi - factory interface
 * @export
 */
export declare const WorkflowsAppsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create App
     * @param {AppEntity} appEntity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAppV1WorkflowsAppsPost(appEntity: AppEntity, options?: any): AxiosPromise<AppResponse>;
    /**
     *
     * @summary Delete App
     * @param {string} appId
     * @param {string} [version]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAppV1WorkflowsAppsAppIdDelete(appId: string, version?: string, options?: any): AxiosPromise<AgenticWorkflowModelsBaseBaseResponse>;
    /**
     *
     * @summary Get Connections By App Id
     * @param {string} appId
     * @param {string} version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getConnectionsByAppIdV1WorkflowsAppsAppIdVersionsVersionConnectionsGet(appId: string, version: string, options?: any): AxiosPromise<Array<ConnectionCore>>;
    /**
     *
     * @summary Read App
     * @param {string} appId
     * @param {string} [version]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAppV1WorkflowsAppsAppIdGet(appId: string, version?: string, options?: any): AxiosPromise<AppResponse>;
    /**
     *
     * @summary Read Apps
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readAppsV1WorkflowsAppsGet(skip?: number, limit?: number, options?: any): AxiosPromise<Array<AppResponse>>;
    /**
     *
     * @summary Update App
     * @param {string} appId
     * @param {AppEntity} appEntity
     * @param {string} [version]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAppV1WorkflowsAppsAppIdPut(appId: string, appEntity: AppEntity, version?: string, options?: any): AxiosPromise<AppResponse>;
};
/**
 * WorkflowsAppsApi - object-oriented interface
 * @export
 * @class WorkflowsAppsApi
 * @extends {BaseAPI}
 */
export declare class WorkflowsAppsApi extends BaseAPI {
    /**
     *
     * @summary Create App
     * @param {AppEntity} appEntity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsAppsApi
     */
    createAppV1WorkflowsAppsPost(appEntity: AppEntity, options?: any): Promise<import("axios").AxiosResponse<AppResponse>>;
    /**
     *
     * @summary Delete App
     * @param {string} appId
     * @param {string} [version]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsAppsApi
     */
    deleteAppV1WorkflowsAppsAppIdDelete(appId: string, version?: string, options?: any): Promise<import("axios").AxiosResponse<AgenticWorkflowModelsBaseBaseResponse>>;
    /**
     *
     * @summary Get Connections By App Id
     * @param {string} appId
     * @param {string} version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsAppsApi
     */
    getConnectionsByAppIdV1WorkflowsAppsAppIdVersionsVersionConnectionsGet(appId: string, version: string, options?: any): Promise<import("axios").AxiosResponse<ConnectionCore[]>>;
    /**
     *
     * @summary Read App
     * @param {string} appId
     * @param {string} [version]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsAppsApi
     */
    readAppV1WorkflowsAppsAppIdGet(appId: string, version?: string, options?: any): Promise<import("axios").AxiosResponse<AppResponse>>;
    /**
     *
     * @summary Read Apps
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsAppsApi
     */
    readAppsV1WorkflowsAppsGet(skip?: number, limit?: number, options?: any): Promise<import("axios").AxiosResponse<AppResponse[]>>;
    /**
     *
     * @summary Update App
     * @param {string} appId
     * @param {AppEntity} appEntity
     * @param {string} [version]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsAppsApi
     */
    updateAppV1WorkflowsAppsAppIdPut(appId: string, appEntity: AppEntity, version?: string, options?: any): Promise<import("axios").AxiosResponse<AppResponse>>;
}
/**
 * WorkflowsConnectionsApi - axios parameter creator
 * @export
 */
export declare const WorkflowsConnectionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create Connection
     * @param {ConnectionCore} connectionCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConnectionV1WorkflowsConnectionsPost: (connectionCore: ConnectionCore, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete Connection
     * @param {string} connectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConnectionV1WorkflowsConnectionsConnectionIdDelete: (connectionId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Read Connection
     * @param {string} connectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readConnectionV1WorkflowsConnectionsConnectionIdGet: (connectionId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Read Connections
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readConnectionsV1WorkflowsConnectionsGet: (skip?: number, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Update Connection
     * @param {string} connectionId
     * @param {ConnectionCore} connectionCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConnectionV1WorkflowsConnectionsConnectionIdPut: (connectionId: string, connectionCore: ConnectionCore, options?: any) => Promise<RequestArgs>;
};
/**
 * WorkflowsConnectionsApi - functional programming interface
 * @export
 */
export declare const WorkflowsConnectionsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create Connection
     * @param {ConnectionCore} connectionCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConnectionV1WorkflowsConnectionsPost(connectionCore: ConnectionCore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgenticWorkflowDbModelsConnection>>;
    /**
     *
     * @summary Delete Connection
     * @param {string} connectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConnectionV1WorkflowsConnectionsConnectionIdDelete(connectionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgenticWorkflowModelsBaseBaseResponse>>;
    /**
     *
     * @summary Read Connection
     * @param {string} connectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readConnectionV1WorkflowsConnectionsConnectionIdGet(connectionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgenticWorkflowDbModelsConnection>>;
    /**
     *
     * @summary Read Connections
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readConnectionsV1WorkflowsConnectionsGet(skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AgenticWorkflowDbModelsConnection>>>;
    /**
     *
     * @summary Update Connection
     * @param {string} connectionId
     * @param {ConnectionCore} connectionCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConnectionV1WorkflowsConnectionsConnectionIdPut(connectionId: string, connectionCore: ConnectionCore, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AgenticWorkflowDbModelsConnection>>;
};
/**
 * WorkflowsConnectionsApi - factory interface
 * @export
 */
export declare const WorkflowsConnectionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create Connection
     * @param {ConnectionCore} connectionCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createConnectionV1WorkflowsConnectionsPost(connectionCore: ConnectionCore, options?: any): AxiosPromise<AgenticWorkflowDbModelsConnection>;
    /**
     *
     * @summary Delete Connection
     * @param {string} connectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteConnectionV1WorkflowsConnectionsConnectionIdDelete(connectionId: string, options?: any): AxiosPromise<AgenticWorkflowModelsBaseBaseResponse>;
    /**
     *
     * @summary Read Connection
     * @param {string} connectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readConnectionV1WorkflowsConnectionsConnectionIdGet(connectionId: string, options?: any): AxiosPromise<AgenticWorkflowDbModelsConnection>;
    /**
     *
     * @summary Read Connections
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readConnectionsV1WorkflowsConnectionsGet(skip?: number, limit?: number, options?: any): AxiosPromise<Array<AgenticWorkflowDbModelsConnection>>;
    /**
     *
     * @summary Update Connection
     * @param {string} connectionId
     * @param {ConnectionCore} connectionCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateConnectionV1WorkflowsConnectionsConnectionIdPut(connectionId: string, connectionCore: ConnectionCore, options?: any): AxiosPromise<AgenticWorkflowDbModelsConnection>;
};
/**
 * WorkflowsConnectionsApi - object-oriented interface
 * @export
 * @class WorkflowsConnectionsApi
 * @extends {BaseAPI}
 */
export declare class WorkflowsConnectionsApi extends BaseAPI {
    /**
     *
     * @summary Create Connection
     * @param {ConnectionCore} connectionCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsConnectionsApi
     */
    createConnectionV1WorkflowsConnectionsPost(connectionCore: ConnectionCore, options?: any): Promise<import("axios").AxiosResponse<AgenticWorkflowDbModelsConnection>>;
    /**
     *
     * @summary Delete Connection
     * @param {string} connectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsConnectionsApi
     */
    deleteConnectionV1WorkflowsConnectionsConnectionIdDelete(connectionId: string, options?: any): Promise<import("axios").AxiosResponse<AgenticWorkflowModelsBaseBaseResponse>>;
    /**
     *
     * @summary Read Connection
     * @param {string} connectionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsConnectionsApi
     */
    readConnectionV1WorkflowsConnectionsConnectionIdGet(connectionId: string, options?: any): Promise<import("axios").AxiosResponse<AgenticWorkflowDbModelsConnection>>;
    /**
     *
     * @summary Read Connections
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsConnectionsApi
     */
    readConnectionsV1WorkflowsConnectionsGet(skip?: number, limit?: number, options?: any): Promise<import("axios").AxiosResponse<AgenticWorkflowDbModelsConnection[]>>;
    /**
     *
     * @summary Update Connection
     * @param {string} connectionId
     * @param {ConnectionCore} connectionCore
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsConnectionsApi
     */
    updateConnectionV1WorkflowsConnectionsConnectionIdPut(connectionId: string, connectionCore: ConnectionCore, options?: any): Promise<import("axios").AxiosResponse<AgenticWorkflowDbModelsConnection>>;
}
/**
 * WorkflowsExecutionsApi - axios parameter creator
 * @export
 */
export declare const WorkflowsExecutionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Execute a workflow. This is an Sync call. This returns the status of the workflow
     * @summary Execute Workflow
     * @param {string} workflowId
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeWorkflowV1WorkflowsExecutionsWorkflowIdExecutePost: (workflowId: string, body: object, options?: any) => Promise<RequestArgs>;
    /**
     * Get the status of a workflow given the run id
     * @summary Get Workflow Status
     * @param {string} runId
     * @param {string} workflowId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkflowStatusV1WorkflowsExecutionsWorkflowIdRunsRunIdGet: (runId: string, workflowId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary List Workflow Runs
     * @param {string} workflowId
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkflowRunsV1WorkflowsExecutionsWorkflowIdRunsGet: (workflowId: string, skip?: number, limit?: number, options?: any) => Promise<RequestArgs>;
    /**
     * Trigger a workflow execution. This is an Async call. This returns a workflow id which can be queried to get the status of the workflow
     * @summary Trigger Workflow
     * @param {string} workflowId
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    triggerWorkflowV1WorkflowsExecutionsWorkflowIdTriggerPost: (workflowId: string, body: object, options?: any) => Promise<RequestArgs>;
};
/**
 * WorkflowsExecutionsApi - functional programming interface
 * @export
 */
export declare const WorkflowsExecutionsApiFp: (configuration?: Configuration) => {
    /**
     * Execute a workflow. This is an Sync call. This returns the status of the workflow
     * @summary Execute Workflow
     * @param {string} workflowId
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeWorkflowV1WorkflowsExecutionsWorkflowIdExecutePost(workflowId: string, body: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowExecution>>;
    /**
     * Get the status of a workflow given the run id
     * @summary Get Workflow Status
     * @param {string} runId
     * @param {string} workflowId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkflowStatusV1WorkflowsExecutionsWorkflowIdRunsRunIdGet(runId: string, workflowId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowExecution>>;
    /**
     *
     * @summary List Workflow Runs
     * @param {string} workflowId
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkflowRunsV1WorkflowsExecutionsWorkflowIdRunsGet(workflowId: string, skip?: number, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkflowExecution>>>;
    /**
     * Trigger a workflow execution. This is an Async call. This returns a workflow id which can be queried to get the status of the workflow
     * @summary Trigger Workflow
     * @param {string} workflowId
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    triggerWorkflowV1WorkflowsExecutionsWorkflowIdTriggerPost(workflowId: string, body: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowExecution>>;
};
/**
 * WorkflowsExecutionsApi - factory interface
 * @export
 */
export declare const WorkflowsExecutionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Execute a workflow. This is an Sync call. This returns the status of the workflow
     * @summary Execute Workflow
     * @param {string} workflowId
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeWorkflowV1WorkflowsExecutionsWorkflowIdExecutePost(workflowId: string, body: object, options?: any): AxiosPromise<WorkflowExecution>;
    /**
     * Get the status of a workflow given the run id
     * @summary Get Workflow Status
     * @param {string} runId
     * @param {string} workflowId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkflowStatusV1WorkflowsExecutionsWorkflowIdRunsRunIdGet(runId: string, workflowId: string, options?: any): AxiosPromise<WorkflowExecution>;
    /**
     *
     * @summary List Workflow Runs
     * @param {string} workflowId
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWorkflowRunsV1WorkflowsExecutionsWorkflowIdRunsGet(workflowId: string, skip?: number, limit?: number, options?: any): AxiosPromise<Array<WorkflowExecution>>;
    /**
     * Trigger a workflow execution. This is an Async call. This returns a workflow id which can be queried to get the status of the workflow
     * @summary Trigger Workflow
     * @param {string} workflowId
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    triggerWorkflowV1WorkflowsExecutionsWorkflowIdTriggerPost(workflowId: string, body: object, options?: any): AxiosPromise<WorkflowExecution>;
};
/**
 * WorkflowsExecutionsApi - object-oriented interface
 * @export
 * @class WorkflowsExecutionsApi
 * @extends {BaseAPI}
 */
export declare class WorkflowsExecutionsApi extends BaseAPI {
    /**
     * Execute a workflow. This is an Sync call. This returns the status of the workflow
     * @summary Execute Workflow
     * @param {string} workflowId
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsExecutionsApi
     */
    executeWorkflowV1WorkflowsExecutionsWorkflowIdExecutePost(workflowId: string, body: object, options?: any): Promise<import("axios").AxiosResponse<WorkflowExecution>>;
    /**
     * Get the status of a workflow given the run id
     * @summary Get Workflow Status
     * @param {string} runId
     * @param {string} workflowId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsExecutionsApi
     */
    getWorkflowStatusV1WorkflowsExecutionsWorkflowIdRunsRunIdGet(runId: string, workflowId: string, options?: any): Promise<import("axios").AxiosResponse<WorkflowExecution>>;
    /**
     *
     * @summary List Workflow Runs
     * @param {string} workflowId
     * @param {number} [skip]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsExecutionsApi
     */
    listWorkflowRunsV1WorkflowsExecutionsWorkflowIdRunsGet(workflowId: string, skip?: number, limit?: number, options?: any): Promise<import("axios").AxiosResponse<WorkflowExecution[]>>;
    /**
     * Trigger a workflow execution. This is an Async call. This returns a workflow id which can be queried to get the status of the workflow
     * @summary Trigger Workflow
     * @param {string} workflowId
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsExecutionsApi
     */
    triggerWorkflowV1WorkflowsExecutionsWorkflowIdTriggerPost(workflowId: string, body: object, options?: any): Promise<import("axios").AxiosResponse<WorkflowExecution>>;
}
/**
 * WorkflowsSubWorkflowsApi - axios parameter creator
 * @export
 */
export declare const WorkflowsSubWorkflowsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Returns all sub workflows which can be invoked for a given workflow step
     * @summary Get Sub Workflows
     * @param {WorkflowStepInput} workflowStepInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubWorkflowsV1WorkflowsStepsSubWorkflowsPost: (workflowStepInput: WorkflowStepInput, options?: any) => Promise<RequestArgs>;
};
/**
 * WorkflowsSubWorkflowsApi - functional programming interface
 * @export
 */
export declare const WorkflowsSubWorkflowsApiFp: (configuration?: Configuration) => {
    /**
     * Returns all sub workflows which can be invoked for a given workflow step
     * @summary Get Sub Workflows
     * @param {WorkflowStepInput} workflowStepInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubWorkflowsV1WorkflowsStepsSubWorkflowsPost(workflowStepInput: WorkflowStepInput, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Workflow>>>;
};
/**
 * WorkflowsSubWorkflowsApi - factory interface
 * @export
 */
export declare const WorkflowsSubWorkflowsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Returns all sub workflows which can be invoked for a given workflow step
     * @summary Get Sub Workflows
     * @param {WorkflowStepInput} workflowStepInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubWorkflowsV1WorkflowsStepsSubWorkflowsPost(workflowStepInput: WorkflowStepInput, options?: any): AxiosPromise<Array<Workflow>>;
};
/**
 * WorkflowsSubWorkflowsApi - object-oriented interface
 * @export
 * @class WorkflowsSubWorkflowsApi
 * @extends {BaseAPI}
 */
export declare class WorkflowsSubWorkflowsApi extends BaseAPI {
    /**
     * Returns all sub workflows which can be invoked for a given workflow step
     * @summary Get Sub Workflows
     * @param {WorkflowStepInput} workflowStepInput
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowsSubWorkflowsApi
     */
    getSubWorkflowsV1WorkflowsStepsSubWorkflowsPost(workflowStepInput: WorkflowStepInput, options?: any): Promise<import("axios").AxiosResponse<Workflow[]>>;
}
